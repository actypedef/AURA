{"date": "2025-06-03 19:38", "hash": "ebe95df0d5220f00cedd6f4bddea35e4", "eval": {"Mbpp/59": [{"task_id": "Mbpp/59", "solution": "\"\"\"\nWrite a function to find the nth octagonal number.\nassert is_octagonal(5) == 65\n\"\"\"\ndef is_octagonal(n):\n    # Calculate the formula for the nth octagonal number\n    return n * (3 * n - 1)\n\n# Test cases to verify the correctness of the function\nassert is_octagonal(5) == 65\nassert is_octagonal(7) == 123\nassert is_octagonal(9) == 204", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/62": [{"task_id": "Mbpp/62", "solution": "\"\"\"\nWrite a python function to find smallest number in a list.\nassert smallest_num([10, 20, 1, 45, 99]) == 1\n\"\"\"\ndef smallest_num(lst):\n    return min(lst)\n\n# Test cases\nassert smallest_num([10, 20, 1, 45, 99]) == 1", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/7": [{"task_id": "Mbpp/7", "solution": "\"\"\"\nWrite a function to find all words which are at least 4 characters long in a string.\nassert set(find_char_long('Please move back to stream')) == set(['Please', 'move', 'back', 'stream'])\n\"\"\"\ndef find_char_long(s):\n    # Split the input string into words using space as delimiter\n    words = s.split()\n    # Filter out words that are at least 4 characters long\n    result = [word for word in words if len(word) >= 4]\n    return set(result)\n\n# Test the function\nassert set(find_char_long('Please move back to stream')) == set(['Please', 'move', 'back', 'stream'])", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/65": [{"task_id": "Mbpp/65", "solution": "\"\"\"\nWrite a function to flatten a list and sum all of its elements.\nassert recursive_list_sum(([1, 2, [3,4],[5,6]]))==21\n\"\"\"\ndef recursive_list_sum(lst):\n    # Initialize total sum to zero\n    total_sum = 0\n    \n    # Iterate through each element in the list\n    for item in lst:\n        # If the item is a list itself, recursively call the function\n        if isinstance(item, list):\n            total_sum += recursive_list_sum(item)\n        else:\n            # Otherwise, add the item to the total sum\n            total_sum += item\n    \n    return total_sum\n\n# Test cases to verify the correctness of the function\nassert recursive_list_sum(([1, 2, [3,4],[5,6]])) == 21\nassert recursive_list_sum([[], [], [[7,8],9]]) == 34\nassert recursive_list_sum([[10,20],30,[40,50]]) == 150", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/74": [{"task_id": "Mbpp/74", "solution": "\"\"\"\nWrite a function to check whether it follows the sequence given in the patterns array.\nassert is_samepatterns([\"red\",\"green\",\"green\"], [\"a\", \"b\", \"b\"])==True\n\"\"\"\ndef is_samepatterns(patterns, sequences):\n    # Initialize a counter for each pattern\n    pattern_counter = {pattern: 0 for pattern in patterns}\n    \n    # Iterate over each sequence\n    for seq in sequences:\n        # Check if the sequence matches any of the patterns\n        if seq in patterns:\n            # Increment the counter for the matched pattern\n            pattern_counter[seq] += 1\n    \n    # Check if all patterns have been matched exactly once\n    return all(count == 1 for count in pattern_counter.values())\n\n# Test the function with provided data points\nassert is_samepatterns([\"red\",\"green\",\"green\"], [\"a\", \"b\", \"b\"]) == True", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/56": [{"task_id": "Mbpp/56", "solution": "\"\"\"\nWrite a python function to check if a given number is one less than twice its reverse.\nassert check(70) == False\n\"\"\"\ndef check(n):\n    # Convert the number to a string to easily reverse it\n    num_str = str(n)\n    # Reverse the string\n    reversed_num_str = num_str[::-1]\n    # Convert the reversed string back to an integer\n    reversed_num = int(reversed_num_str)\n    # Check if the original number minus 1 is equal to twice the reversed number\n    return (n - 1) == 2 * reversed_num\n\n# Test cases\nassert check(70) == False", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[73]], "plus_fail_tests": [[1]]}], "Mbpp/18": [{"task_id": "Mbpp/18", "solution": "\"\"\"\nWrite a function to remove characters from the first string which are present in the second string.\nassert remove_dirty_chars(\"probasscurve\", \"pros\") == 'bacuve'\n\"\"\"\ndef remove_dirty_chars(main_str, dirty_str):\n    # Create a set of characters in the dirty string for faster lookup\n    dirty_set = set(dirty_str)\n    \n    # Use list comprehension to filter out characters from main_str that are present in dirty_set\n    result = ''.join([char for char in main_str if char not in dirty_set])\n    \n    return result\n\n# Test cases to verify the correctness of the solution\nassert remove_dirty_chars(\"probasscurve\", \"pros\") == 'bacuve'\nassert remove_dirty_chars(\"hello\", \"world\") == \"helo\"\nassert remove_dirty_chars(\"pythonprogramming\", \"pyth\") == \"onpragmming\"", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/58": [{"task_id": "Mbpp/58", "solution": "\"\"\"\nWrite a python function to check whether the given two integers have opposite sign or not.\nassert opposite_Signs(1,-2) == True\n\"\"\"\ndef opposite_signs(a, b):\n    # Check if both numbers have opposite signs\n    return (a > 0 and b < 0) or (a < 0 and b > 0)\n\n# Test cases\nassert opposite_signs(1, -2) == True\nassert opposite_signs(-3, 4) == True\nassert opposite_signs(5, 5) == False\nassert opposite_signs(-6, -7) == True", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/8": [{"task_id": "Mbpp/8", "solution": "\"\"\"\nWrite a function to find squares of individual elements in a list.\nassert square_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]\n\"\"\"\ndef square_nums(nums):\n    return [num ** 2 for num in nums]\n\n# Test cases\nassert square_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 4, 9, 16, 25, 36, 49, 64, 81, 100]", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/9": [{"task_id": "Mbpp/9", "solution": "\"\"\"\nWrite a python function to find the minimum number of rotations (greater than 0) required to get the same string.\nassert find_Rotations(\"aaaa\") == 1\n\"\"\"\ndef find_Rotations(s):\n    # Initialize the count of rotations to zero\n    rotation_count = 0\n    \n    # Iterate through each character in the string\n    for i in range(len(s)):\n        # Check if the current character is not the first one\n        if s[i] != s[0]:\n            # Increment the rotation count\n            rotation_count += 1\n    \n    # Return the total rotation count\n    return rotation_count\n\n# Test cases to verify the correctness of the function\nassert find_Rotations(\"aaaa\") == 1\nassert find_Rotations(\"abab\") == 1\nassert find_Rotations(\"abcabc\") == 2\nassert find_Rotations(\"abcdedcba\") == 4\nassert find_Rotations(\"abcdefg\") == 3", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/84": [{"task_id": "Mbpp/84", "solution": "\"\"\"\nWrite a function to find the nth number in the newman conway sequence.\nassert sequence(10) == 6\n\"\"\"\ndef newman_conway(n):\n    if n <= 2: return n\n    else: \n        return newman_conway(newman_conway(n-1)) + newman_conway(n-newman_conway(n-1))\n\n# Test cases to verify the correctness of the function\nassert newman_conway(10) == 6\nassert newman_conway(5) == 3\nassert newman_conway(8) == 4\nassert newman_conway(7) == 5", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/20": [{"task_id": "Mbpp/20", "solution": "\"\"\"\nWrite a function to check if the given number is woodball or not.\nassert is_woodall(383) == True\n\"\"\"\ndef is_woodall(n):\n    # Check if n is less than 100\n    if n < 100:\n        return False\n    \n    # Calculate the sum of digits\n    sum_of_digits = sum(int(digit) for digit in str(n))\n    \n    # Check if the sum of digits is equal to n\n    return sum_of_digits == n\n\n# Test cases\nassert is_woodall(383) == True", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/72": [{"task_id": "Mbpp/72", "solution": "\"\"\"\nWrite a python function to check whether the given number can be represented as the difference of two squares or not.\nassert dif_Square(5) == True\n\"\"\"\ndef dif_Square(n):\n    # Check if n is a perfect square\n    if int(n**0.5)**2 == n:\n        return True\n    else:\n        return False\n\n# Test cases\nassert dif_Square(5) == True\nassert dif_Square(10) == False\nassert dif_Square(8) == True\nassert dif_Square(9) == False\nassert dif_Square(14) == True\nassert dif_Square(16) == False\nassert dif_Square(20) == True\nassert dif_Square(25) == False\nassert dif_Square(30) == True\nassert dif_Square(37) == False\nassert dif_Square(40) == True\nassert dif_Square(49) == False\nassert dif_Square(50) == True\nassert dif_Square(55) == False\nassert dif_Square(60) == True\nassert dif_Square(65) == False\nassert dif_Square(70) == True\nassert dif_Square(75) == False\nassert dif_Square(80) == True\nassert dif_Square(85) == False\nassert dif_Square(90) == True\nassert dif_Square(95) == False\nassert dif_Square(100) == False\nassert dif_Square(105) == True\nassert dif_Square(110) == False\nassert dif_Square(115) == True\nassert dif_Square(120) == True\nassert dif_Square(125) == False\nassert dif_Square(130) == True\nassert dif_Square(135) == False\nassert dif_Square(140) == True\nassert dif_Square(145) == False\nassert dif_Square(150) == True\nassert dif_Square(155) == False\nassert dif_Square(160) == True\nassert dif_Square(165) == False\nassert dif_Square(170) == True\nassert dif_Square(175) == False\nassert dif_Square(180) == True\nassert dif_Square(185) == False\nassert dif_Square(190) == True\nassert dif_Square(195) == False\nassert dif_Square(200) == False\nassert dif_Square(205) == True\nassert dif_Square(210) == False\nassert dif_Square(215) == True\nassert dif_Square(220) == True\nassert dif_Square(225) == False\nassert dif_Square(230) == True\nassert dif_Square(235) == False\nassert dif_Square(240) == True\nassert dif_Square(245) == False\nassert dif_Square(250) == False\nassert dif_Square(255) == True\nassert dif_Square(260) == True\nassert dif_Square(265) == False\nassert dif_Square(270) == True\nassert dif_Square(275) == False\nassert dif_Square(280) == True\nassert dif_Square(285) == False\nassert dif_Square(290) == True\nassert dif_Square(295) == False\nassert dif_Square(", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/67": [{"task_id": "Mbpp/67", "solution": "\"\"\"\nWrite a function to find the number of ways to partition a set of Bell numbers.\nassert bell_number(2)==2\n\"\"\"\ndef bell_number(n):\n    if n == 0:\n        return 1\n    else:\n        return sum(bell_number(i) for i in range(n))\n\n# Test cases\nassert bell_number(2) == 2\nassert bell_number(3) == 5\nassert bell_number(4) == 15\nassert bell_number(5) == 52", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/17": [{"task_id": "Mbpp/17", "solution": "\"\"\"\nWrite a function that returns the perimeter of a square given its side length as input.\nassert square_perimeter(10)==40\n\"\"\"\ndef square_perimeter(side_length):\n    # Calculate the perimeter of a square\n    return 4 * side_length\n\n# Test cases to verify the correctness of the function\nassert square_perimeter(10) == 40\nassert square_perimeter(5) == 20\nassert square_perimeter(7) == 28", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/6": [{"task_id": "Mbpp/6", "solution": "\"\"\"\nWrite a python function to check whether the two numbers differ at one bit position only or not.\nassert differ_At_One_Bit_Pos(13,9) == True\n\"\"\"\ndef differ_At_One_Bit_Pos(x, y):\n    # XOR the two numbers\n    xor_result = x ^ y\n    \n    # Check if there is exactly one set bit (i.e., 1)\n    return xor_result & -xor_result == 1\n\n# Test cases\nassert differ_At_One_Bit_Pos(13, 9) == True\nassert differ_At_One_Bit_Pos(25, 4) == False\nassert differ_At_One_Bit_Pos(7, 8) == True\nassert differ_At_One_Bit_Pos(0, 1) == True\nassert differ_At_One_Bit_Pos(1, 0) == True", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/63": [{"task_id": "Mbpp/63", "solution": "\"\"\"\nWrite a function to find the maximum difference between available pairs in the given tuple list.\nassert max_difference([(3, 5), (1, 7), (10, 3), (1, 2)]) == 7\n\"\"\"\ndef max_difference(pairs):\n    # Sort the pairs based on the second element of each pair\n    sorted_pairs = sorted(pairs, key=lambda x: x[1])\n    \n    # Initialize the maximum difference as zero\n    max_diff = 0\n    \n    # Iterate through the sorted pairs\n    for i in range(len(sorted_pairs) - 1):\n        # Calculate the difference between the current pair and the next one\n        diff = sorted_pairs[i + 1][0] - sorted_pairs[i][1]\n        \n        # Update the maximum difference if the calculated difference is greater than the previous maximum\n        if diff > max_diff:\n            max_diff = diff\n    \n    return max_diff\n\n# Test cases to verify the correctness of the function\nassert max_difference([(3, 5), (1, 7), (10, 3), (1, 2)]) == 7\nassert max_difference([(4, 6), (8, 9), (10, 11), (12, 13)]) == 5\nassert max_difference([(1, 1), (2, 2), (3, 3), (4, 4)]) == 0\nassert max_difference([(5, 10), (10, 15), (15, 20), (20, 25)]) == 15", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/77": [{"task_id": "Mbpp/77", "solution": "\"\"\"\nWrite a python function to find whether a number is divisible by 11.\nassert is_Diff (12345) == False\n\"\"\"\ndef is_Diff(n):\n    \"\"\"\n    Check if a given number is divisible by 11.\n\n    Args:\n    n (int): The number to check.\n\n    Returns:\n    bool: True if the number is divisible by 11, False otherwise.\n    \"\"\"\n    # Calculate the alternating sum of digits\n    alternate_sum = sum(int(digit) for i, digit in enumerate(str(n)) * ((-1)**i))\n    \n    # Check if the number is divisible by 11\n    return alternate_sum % 11 == 0\n\n# Test cases\nassert is_Diff(12345) == False", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/88": [{"task_id": "Mbpp/88", "solution": "\"\"\"\nWrite a function to get the frequency of all the elements in a list, returned as a dictionary.\nassert freq_count([10,10,10,10,20,20,20,20,40,40,50,50,30])==({10: 4, 20: 4, 40: 2, 50: 2, 30: 1})\n\"\"\"\ndef freq_count(lst):\n    # Create an empty dictionary to store the frequency of each element\n    freq_dict = {}\n    \n    # Iterate over each element in the list\n    for element in lst:\n        # If the element is already in the dictionary, increment its count\n        if element in freq_dict:\n            freq_dict[element] += 1\n        # Otherwise, add the element to the dictionary with a count of 1\n        else:\n            freq_dict[element] = 1\n    \n    # Return the dictionary containing the frequency of each element\n    return freq_dict\n\n# Test the function with the provided data point\nassert freq_count([10,10,10,10,20,20,20,20,40,40,50,50,30]) == ({10: 4, 20: 4, 40: 2, 50: 2, 30: 1})", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/19": [{"task_id": "Mbpp/19", "solution": "\"\"\"\nWrite a function to find whether a given array of integers contains any duplicate element.\nassert test_duplicate(([1,2,3,4,5]))==False\n\"\"\"\ndef test_duplicate(arr):\n    # Convert the list to a set to remove duplicates\n    unique_arr = set(arr)\n    # Check if the length of the original array is equal to the length of the set\n    return len(arr) != len(unique_arr)\n\n# Test the function with provided data points\nassert test_duplicate(([1,2,3,4,5])) == False", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/57": [{"task_id": "Mbpp/57", "solution": "\"\"\"\nWrite a python function to find the largest number that can be formed with the given list of digits.\nassert find_Max_Num([1,2,3]) == 321\n\"\"\"\ndef find_Max_Num(digits):\n    # Sort the digits in descending order\n    sorted_digits = sorted(digits, reverse=True)\n    \n    # Convert the sorted digits back to an integer\n    max_num = int(''.join(map(str, sorted_digits)))\n    \n    return max_num\n\n# Test cases\nassert find_Max_Num([1,2,3]) == 321\nassert find_Max_Num([5,4,9,7,6]) == 98765\nassert find_Max_Num([0,1,2,3,4,5,6,7,8,9]) == 987654321", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/80": [{"task_id": "Mbpp/80", "solution": "\"\"\"\nWrite a function to find the nth tetrahedral number.\nassert tetrahedral_number(5) == 35\n\"\"\"\ndef tetrahedral_number(n):\n    \"\"\"\n    Calculate the nth tetrahedral number.\n\n    Args:\n    n (int): The index of the tetrahedral number to calculate\n\n    Returns:\n    int: The nth tetrahedral number\n    \"\"\"\n    return n * (n + 1) * (n + 2) // 6\n\n# Test cases to verify the correctness of the function\nassert tetrahedral_number(0) == 0\nassert tetrahedral_number(1) == 1\nassert tetrahedral_number(2) == 4\nassert tetrahedral_number(3) == 10\nassert tetrahedral_number(4) == 20\nassert tetrahedral_number(5) == 35", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/64": [{"task_id": "Mbpp/64", "solution": "\"\"\"\nWrite a function to sort a list of tuples using the second value of each tuple.\nassert subject_marks([('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)])==[('Social sciences', 82), ('English', 88), ('Science', 90), ('Maths', 97)]\n\"\"\"\ndef subject_marks(subject_marks):\n    # Sort the list based on the second element of each tuple\n    sorted_subject_marks = sorted(subject_marks, key=lambda x: x[1])\n    return sorted_subject_marks\n\n# Test the function\nassert subject_marks([('English', 88), ('Science', 90), ('Maths', 97), ('Social Sciences', 82)]) == [('Social sciences', 82), ('English', 88), ('Science', 90), ('Maths', 97)]", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/83": [{"task_id": "Mbpp/83", "solution": "\"\"\"\nWrite a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nassert get_Char(\"abc\") == \"f\"\n\"\"\"\ndef get_Char(s):\n    return chr((sum(ord(c) for c in s)) % 26 + ord('a'))\n\n# Test cases\nassert get_Char(\"abc\") == \"f\"\nassert get_Char(\"xyz\") == \"v\"\nassert get_Char(\"hello\") == \"j\"\nassert get_Char(\"world\") == \"z\"\nassert get_Char(\"Python\") == \"w\"", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/79": [{"task_id": "Mbpp/79", "solution": "\"\"\"\nWrite a python function to check whether the length of the word is odd or not.\nassert word_len(\"Hadoop\") == False\n\"\"\"\n# Define the function to check if the length of a word is odd\ndef is_word_length_odd(word):\n    # Check if the length of the word is odd using modulo operator\n    return len(word) % 2 != 0\n\n# Test cases to verify the correctness of the function\nassert is_word_length_odd(\"Hadoop\") == False\nassert is_word_length_odd(\"Python\") == True\nassert is_word_length_odd(\"Java\") == True\nassert is_word_length_odd(\"C++\") == True\nassert is_word_length_odd(\"Ruby\") == True\nassert is_word_length_odd(\"Swift\") == True\nassert is_word_length_odd(\"Go\") == True\nassert is_word_length_odd(\"Rust\") == True\nassert is_word_length_odd(\"Scala\") == True\nassert is_word_length_odd(\"Perl\") == True\nassert is_word_length_odd(\"Lua\") == True\nassert is_word_length_odd(\"Groovy\") == True\nassert is_word_length_odd(\"Kotlin\") == True\nassert is_word_length_odd(\"PHP\") == True\nassert is_word_length_odd(\"SQL\") == True\nassert is_word_length_odd(\"JSON\") == True\nassert is_word_length_odd(\"XML\") == True\nassert is_word_length_odd(\"HTML\") == True\nassert is_word_length_odd(\"CSS\") == True\nassert is_word_length_odd(\"JavaScript\") == True\nassert is_word_length_odd(\"TypeScript\") == True\nassert is_word_length_odd(\"CoffeeScript\") == True\nassert is_word_length_odd(\"Django\") == True\nassert is_word_length_odd(\"Flask\") == True\nassert is_word_length_odd(\"AngularJS\") == True\nassert is_word_length_odd(\"React\") == True\nassert is_word_length_odd(\"Vue.js\") == True\nassert is_word_length_odd(\"jQuery\") == True\nassert is_word_length_odd(\"Bootstrap\") == True\nassert is_word_length_odd(\"Foundation\") == True\nassert is_word_length_odd(\"Materialize\") == True\nassert is_word_length_odd(\"Bootstrap4\") == True\nassert is_word_length_odd(\"Tailwind CSS\") == True\nassert is_word_length_odd(\"Sass\") == True\nassert is_word_length_odd(\"Less\") == True\nassert is_word_length_odd(\"Stylus\") == True\nassert is_word_length_odd(\"Pug\") == True\nassert is_word_length_odd(\"Jade\") == True\nassert is_word_length_odd(\"EJS\") == True\nassert is_word_length_odd(\"Mustache\") == True\nassert is_word_length_odd(\"Handlebars\") == True\nassert is_word_length_odd(\"Blade\") == True\nassert is_word_length_odd(\"Twig\") == True\nassert is_word_length_odd(\"Nunjucks\") == True\nassert is_word_length_odd(\"Jinja2\") == True\nassert is_word_length_odd(\"Django Template Language\") == True\nassert is_word_length_odd(\"Flask Template Language\") == True\nassert is_word_length_odd(\"AngularJS Template Language\") == True\nassert is_word_length_odd(\"React Template Language\") == True\nassert is_word_length_odd(\"Vue.js Template Language\") == True\nassert is_word_length_odd(\"jQuery Template Language\") == True\nassert is_word_length_odd(\"Bootstrap Template Language\") == True\nassert is_word_length_odd(\"Foundation Template Language\") == True\nassert is_word_length_odd(\"Materialize Template Language\") == True\nassert is_word_length_odd(\"Bootstrap4 Template Language\") == True\nassert is_word_length_odd(\"Tailwind CSS Template Language\") == True\nassert is_word_length_odd(\"Sass Template Language\") == True\nassert is_word_length_odd(\"Less Template Language\") == True\nassert is_word_length_odd(\"St", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/14": [{"task_id": "Mbpp/14", "solution": "\"\"\"\nWrite a python function to find the volume of a triangular prism.\nassert find_Volume(10,8,6) == 240\n\"\"\"\ndef find_Volume(base_length, height, length):\n    \"\"\"\n    Calculate the volume of a triangular prism.\n\n    Parameters:\n    base_length (float): Length of the base of the triangle.\n    height (float): Height of the triangle.\n    length (float): Length of the prism.\n\n    Returns:\n    float: Volume of the prism.\n    \"\"\"\n    return (base_length * height * length) / 2\n\n# Test cases to verify the correctness of the function\nassert find_Volume(10,8,6) == 240\nassert find_Volume(5,3,7) == 52.5\nassert find_Volume(1,1,1) == 0.5", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/75": [{"task_id": "Mbpp/75", "solution": "\"\"\"\nWrite a function to find tuples which have all elements divisible by k from the given list of tuples.\nassert find_tuples([(6, 24, 12), (7, 9, 6), (12, 18, 21)], 6) == [(6, 24, 12)]\n\"\"\"\n# Define the function to find tuples divisible by k\ndef find_tuples(tuples_list, k):\n    # Use list comprehension to filter tuples where each element is divisible by k\n    result = [t for t in tuples_list if all(x % k == 0 for x in t)]\n    return result\n\n# Test the function with provided data points\nassert find_tuples([(6, 24, 12), (7, 9, 6), (12, 18, 21)], 6) == [(6, 24, 12)]\n\n# Print success message", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/11": [{"task_id": "Mbpp/11", "solution": "\"\"\"\nWrite a python function to remove first and last occurrence of a given character from the string.\nassert remove_Occ(\"hello\",\"l\") == \"heo\"\n\"\"\"\ndef remove_Occ(text, char):\n    # Remove first occurrence\n    text = text.replace(char, '', 1)\n    # Remove last occurrence\n    text = text.replace(char, '', -1)\n    return text\n\n# Test cases\nassert remove_Occ(\"hello\", \"l\") == \"heo\"\nassert remove_Occ(\"world\", \"o\") == \"world\"\nassert remove_Occ(\"python\", \"p\") == \"ython\"\nassert remove_Occ(\"java\", \"a\") == \"jav\"\nassert remove_Occ(\"programming\", \"g\") == \"programmin\"", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/92": [{"task_id": "Mbpp/92", "solution": "\"\"\"\nWrite a function to check whether the given number is undulating or not.\nassert is_undulating(1212121) == True\n\"\"\"\ndef is_undulating(n):\n    \"\"\"\n    Check if the given number is undulating or not.\n\n    Args:\n    n (int): The number to be checked.\n\n    Returns:\n    bool: True if the number is undulating, False otherwise.\n    \"\"\"\n    # Convert the number to string for easy manipulation\n    str_n = str(n)\n    \n    # Check if the length of the string is odd\n    if len(str_n) % 2 != 0:\n        return False\n    \n    # Compare each pair of characters\n    for i in range(len(str_n) // 2):\n        if str_n[i] != str_n[-i-1]:\n            return False\n    \n    return True\n\n# Test cases\nassert is_undulating(1212121) == True\nassert is_undulating(123456789) == False\nassert is_undulating(12221222) == True\nassert is_undulating(1234567890) == False\nassert is_undulating(12222222) == True\nassert is_undulating(12345678901) == False\nassert is_undulating(122222222) == True\nassert is_undulating(123456789012) == False\nassert is_undulating(12222222222) == True\nassert is_undulating(1234567890123) == False\nassert is_undulating(1222222222222) == True\nassert is_undulating(12345678901234) == False\nassert is_undulating(12222222222222) == True\nassert is_undulating(123456789012345) == False\nassert is_undulating(122222222222222) == True\nassert is_undulating(1234567890123456) == False\nassert is_undulating(1222222222222222) == True\nassert is_undulating(12345678901234567) == False\nassert is_undulating(12222222222222222) == True\nassert is_undulating(123456789012345678) == False\nassert is_undulating(122222222222222222) == True\nassert is_undulating(1234567890123456789) == False\nassert is_undulating(1222222222222222222) == True\nassert is_undulating(12345678901234567890) == False\nassert is_undulating(12222222222222222222) == True\nassert is_undulating(12345678901234", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/68": [{"task_id": "Mbpp/68", "solution": "\"\"\"\nWrite a python function to check whether the given array is monotonic or not.\nassert is_Monotonic([6, 5, 4, 4]) == True\n\"\"\"\ndef is_Monotonic(arr):\n    # Check if the array is already sorted in ascending order\n    if arr == sorted(arr) or arr == sorted(arr, reverse=True):\n        return True\n    \n    # If not, check if it's sorted in descending order\n    elif arr == sorted(arr, reverse=True) or arr == sorted(arr, reverse=True):\n        return True\n    \n    # If neither of the above conditions is met, the array is not monotonic\n    else:\n        return False\n\n# Test cases\nassert is_Monotonic([6, 5, 4, 4]) == True\nassert is_Monotonic([1, 2, 3, 4]) == True\nassert is_Monotonic([4, 3, 2, 1]) == True\nassert is_Monotonic([1, 3, 2, 4]) == False\nassert is_Monotonic([2, 3, 4, 5]) == False", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/66": [{"task_id": "Mbpp/66", "solution": "\"\"\"\nWrite a python function to count the number of positive numbers in a list.\nassert pos_count([1,-2,3,-4]) == 2\n\"\"\"\ndef pos_count(lst):\n    # Initialize a counter for positive numbers\n    count = 0\n    # Iterate over each element in the list\n    for num in lst:\n        # Check if the number is positive\n        if num > 0:\n            # Increment the counter\n            count += 1\n    # Return the total count of positive numbers\n    return count\n\n# Test cases to verify the correctness of the function\nassert pos_count([1,-2,3,-4]) == 2\nassert pos_count([-1,-2,-3,-4]) == 0\nassert pos_count([0,1,2,3,4]) == 5\nassert pos_count([]) == 0", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/16": [{"task_id": "Mbpp/16", "solution": "\"\"\"\nWrite a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nassert text_lowercase_underscore(\"aab_cbbbc\")==(True)\n\"\"\"\ndef text_lowercase_underscore(text):\n    # Check if the text contains only lowercase letters joined with an underscore\n    return text.islower() and '_' in text\n\n# Test cases to verify the correctness of the function\nassert text_lowercase_underscore(\"aab_cbbbc\") == (True)\nassert text_lowercase_underscore(\"aab_Cbbbc\") == (False)\nassert text_lowercase_underscore(\"123abc\") == (False)\nassert text_lowercase_underscore(\"a_b_c\") == (True)\nassert text_lowercase_underscore(\"A_b_c\") == (False)", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [["_abc"]]}], "Mbpp/89": [{"task_id": "Mbpp/89", "solution": "\"\"\"\nWrite a function to find the closest smaller number than n.\nassert closest_num(11) == 10\n\"\"\"\ndef closest_num(n):\n    \"\"\"\n    Find the closest smaller number than n.\n    \n    Args:\n    n (int): The number to find the closest smaller number for.\n    \n    Returns:\n    int: The closest smaller number than n.\n    \"\"\"\n    return n - 1\n\n# Test cases\nassert closest_num(11) == 10\nassert closest_num(23) == 22\nassert closest_num(45) == 44", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/70": [{"task_id": "Mbpp/70", "solution": "\"\"\"\nWrite a function to find whether all the given tuples have equal length or not.\nassert get_equal([(11, 22, 33), (44, 55, 66)]) == True\n\"\"\"\ndef get_equal(tuples_list):\n    # Check if all tuples have the same length\n    return len(set(map(len, tuples_list))) == 1\n\n# Test cases\nassert get_equal([(11, 22, 33), (44, 55, 66)]) == True\nassert get_equal([(77, 88, 99), (101, 102, 103)]) == False\nassert get_equal([]) == True  # Edge case: empty list should return True", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/82": [{"task_id": "Mbpp/82", "solution": "\"\"\"\nWrite a function to find the volume of a sphere.\nassert math.isclose(volume_sphere(10), 4188.790204786391, rel_tol=0.001)\n\"\"\"\nimport math\n\ndef volume_sphere(radius):\n    \"\"\"\n    Calculate the volume of a sphere given its radius.\n\n    Args:\n    radius (float): The radius of the sphere.\n\n    Returns:\n    float: The volume of the sphere.\n    \"\"\"\n    return (4/3) * math.pi * radius**3\n\n# Test the function\nassert math.isclose(volume_sphere(10), 4188.790204786391, rel_tol=0.001)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/100": [{"task_id": "Mbpp/100", "solution": "\"\"\"\nWrite a function to find the next smallest palindrome of a specified integer, returned as an integer.\nassert next_smallest_palindrome(99)==101\n\"\"\"\ndef next_smallest_palindrome(n):\n    # Convert number to string for easy manipulation\n    num_str = str(n)\n    \n    # Find the length of the number\n    length = len(num_str)\n    \n    # Check if the number is already a palindrome\n    if num_str == num_str[::-1]:\n        # If it's not, increment the number by 1\n        n += 1\n    \n    # Convert the incremented number back to a string\n    next_num_str = str(n)\n    \n    # Return the next smallest palindrome as an integer\n    return int(next_num_str)\n\n# Test cases\nassert next_smallest_palindrome(99) == 101\nassert next_smallest_palindrome(123) == 131\nassert next_smallest_palindrome(123456789) == 123456791", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/3": [{"task_id": "Mbpp/3", "solution": "\"\"\"\nWrite a python function to identify non-prime numbers.\nassert is_not_prime(2) == False\n\"\"\"\n# Importing necessary package for assertions\nimport unittest\n\ndef is_not_prime(n):\n    \"\"\"\n    Check if a number is not prime.\n\n    Args:\n    n (int): The number to check.\n\n    Returns:\n    bool: True if the number is not prime, False otherwise.\n    \"\"\"\n    # Check if the number is less than 2\n    if n < 2:\n        return True\n    \n    # Check divisibility from 2 to the square root of n\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return True\n    return False\n\n# Test cases to verify the correctness of the function\nclass TestIsNotPrime(unittest.TestCase):\n    def test_is_not_prime(self):\n        self.assertFalse(is_not_prime(2))\n        self.assertTrue(is_not_prime(4))\n        self.assertTrue(is_not_prime(6))\n        self.assertTrue(is_not_prime(8))\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/4": [{"task_id": "Mbpp/4", "solution": "\"\"\"\nWrite a function to find the n largest integers from a given list of numbers, returned in descending order.\nassert heap_queue_largest( [25, 35, 22, 85, 14, 65, 75, 22, 58],3)==[85, 75, 65]\n\"\"\"\nimport heapq\n\ndef heap_queue_largest(nums, k):\n    # Use heapq.nlargest to get the k largest elements in descending order\n    return heapq.nlargest(k, nums)\n\n# Test the function with provided data points\nassert heap_queue_largest([25, 35, 22, 85, 14, 65, 75, 22, 58],3) == [85, 75, 65]", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/85": [{"task_id": "Mbpp/85", "solution": "\"\"\"\nWrite a function to find the surface area of a sphere.\nassert math.isclose(surfacearea_sphere(10), 1256.6370614359173, rel_tol=0.001)\n\"\"\"\nimport math\n\ndef surface_area_sphere(radius):\n    \"\"\"\n    Calculate the surface area of a sphere.\n\n    Args:\n    radius (float): The radius of the sphere.\n\n    Returns:\n    float: The surface area of the sphere.\n    \"\"\"\n    return 4 * math.pi * radius ** 2\n\n# Test cases\nassert math.isclose(surface_area_sphere(10), 1256.6370614359173, rel_tol=0.001)", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/91": [{"task_id": "Mbpp/91", "solution": "\"\"\"\nWrite a function to check if a string is present as a substring in a given list of string values.\nassert find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"],\"ack\")==True\n\"\"\"\ndef find_substring(string_list, target_string):\n    # Check if the target string is in the list\n    return target_string in string_list\n\n# Test the function with the provided data point\nassert find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ack\") == True", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/90": [{"task_id": "Mbpp/90", "solution": "\"\"\"\nWrite a python function to find the length of the longest word.\nassert len_log([\"python\",\"PHP\",\"bigdata\"]) == 7\n\"\"\"\ndef len_log(words):\n    # Find the maximum length of any word in the list\n    max_length = max(len(word) for word in words)\n    return max_length\n\n# Test cases\nassert len_log([\"python\", \"PHP\", \"bigdata\"]) == 7\nassert len_log([\"hello\", \"world\", \"python\", \"code\"]) == 6\nassert len_log([\"short\", \"longest\", \"words\"]) == 5\nassert len_log([]) == 0", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/69": [{"task_id": "Mbpp/69", "solution": "\"\"\"\nWrite a function to check whether a list contains the given sublist or not.\nassert is_sublist([2,4,3,5,7],[3,7])==False\n\"\"\"\ndef is_sublist(main_list, sub_list):\n    # Iterate through each element of main_list\n    for i in range(len(main_list)):\n        # If the current element matches the first element of sub_list\n        if main_list[i] == sub_list[0]:\n            # Check if the remaining elements of main_list match the rest of sub_list\n            if main_list[i:i+len(sub_list)] == sub_list[1:]:\n                return True\n    # If no matching element is found, return False\n    return False\n\n# Test cases\nassert is_sublist([2,4,3,5,7],[3,7]) == False", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[2, 4, 3, 5, 7], [4, 3]]], "plus_fail_tests": []}], "Mbpp/71": [{"task_id": "Mbpp/71", "solution": "\"\"\"\nWrite a function to sort a list of elements.\nassert comb_sort([5, 15, 37, 25, 79]) == [5, 15, 25, 37, 79]\n\"\"\"\ndef comb_sort(arr):\n    n = len(arr)\n    swapped = True\n    while swapped or n > 1:\n        swapped = False\n        for i in range(n - 1):\n            if arr[i] > arr[i + 1]:\n                # Swap the elements\n                arr[i], arr[i + 1] = arr[i + 1], arr[i]\n                swapped = True\n        n -= 1\n    return arr\n\n# Test the function\nassert comb_sort([5, 15, 37, 25, 79]) == [5, 15, 25, 37, 79]", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/99": [{"task_id": "Mbpp/99", "solution": "\"\"\"\nWrite a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nassert decimal_to_binary(8) == '1000'\n\"\"\"\n# Define the function to convert decimal to binary\ndef decimal_to_binary(n):\n    # Convert the decimal number to binary using bin() and remove the '0b' prefix\n    return bin(n)[2:]\n\n# Test cases to verify the correctness of the function\nassert decimal_to_binary(8) == '1000'\nassert decimal_to_binary(7) == '111'\nassert decimal_to_binary(9) == '1001'\nassert decimal_to_binary(15) == '1111'", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[-5]]}], "Mbpp/94": [{"task_id": "Mbpp/94", "solution": "\"\"\"\nGiven a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\nassert index_minimum([('Rash', 143), ('Manjeet', 200), ('Varsha', 100)]) == 'Varsha'\n\"\"\"\ndef index_minimum(tuples_list):\n    # Find the tuple with the minimum second value\n    min_tuple = min(tuples_list, key=lambda x: x[1])\n    # Return the first value of the found tuple\n    return min_tuple[0]\n\n# Test cases to verify the correctness of the function\nassert index_minimum([('Rash', 143), ('Manjeet', 200), ('Varsha', 100)]) == 'Varsha'\nassert index_minimum([('John', 56), ('Jane', 78), ('Mike', 90)]) == 'Jane'\nassert index_minimum([('Alice', 123), ('Bob', 123), ('Charlie', 123)]) == 'Alice'", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/12": [{"task_id": "Mbpp/12", "solution": "\"\"\"\nWrite a function to sort a given matrix in ascending order according to the sum of its rows.\nassert sort_matrix([[1, 2, 3], [2, 4, 5], [1, 1, 1]])==[[1, 1, 1], [1, 2, 3], [2, 4, 5]]\n\"\"\"\ndef sort_matrix(matrix):\n    # Sort the matrix based on the sum of each row\n    sorted_matrix = sorted(matrix, key=sum)\n    return sorted_matrix\n\n# Test cases to verify the correctness of the function\nassert sort_matrix([[1, 2, 3], [2, 4, 5], [1, 1, 1]]) == [[1, 1, 1], [1, 2, 3], [2, 4, 5]]", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/2": [{"task_id": "Mbpp/2", "solution": "\"\"\"\nWrite a function to find the shared elements from the given two lists.\nassert set(similar_elements((3, 4, 5, 6),(5, 7, 4, 10))) == set((4, 5))\n\"\"\"\ndef similar_elements(list1, list2):\n    # Convert both lists to sets for easy comparison\n    set1 = set(list1)\n    set2 = set(list2)\n    \n    # Find the intersection of the two sets\n    shared_elements = set1.intersection(set2)\n    \n    return shared_elements\n\n# Test the function with provided data points\nassert set(similar_elements((3, 4, 5, 6), (5, 7, 4, 10))) == set((4, 5))", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/104": [{"task_id": "Mbpp/104", "solution": "\"\"\"\nWrite a function to sort each sublist of strings in a given list of lists.\nassert sort_sublists(([\"green\", \"orange\"], [\"black\", \"white\"], [\"white\", \"black\", \"orange\"]))==[['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]\n\"\"\"\ndef sort_sublists(input_list):\n    # Use map to apply the sorted function to each sublist\n    return list(map(sorted, input_list))\n\n# Test the function\nassert sort_sublists(([\"green\", \"orange\"], [\"black\", \"white\"], [\"white\", \"black\", \"orange\"])) == [['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/93": [{"task_id": "Mbpp/93", "solution": "\"\"\"\nWrite a function to calculate the value of 'a' to the power 'b'.\nassert power(3,4) == 81\n\"\"\"\ndef power(a, b):\n    return a ** b\n\n# Test cases\nassert power(3, 4) == 81\nassert power(2, 3) == 8\nassert power(5, 0) == 1\nassert power(1, 1) == 1\nassert power(-2, 3) == -8\nassert power(0, 5) == 0", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/108": [{"task_id": "Mbpp/108", "solution": "\"\"\"\nWrite a function to merge three lists into a single sorted list.\nassert merge_sorted_list([25, 24, 15, 4, 5, 29, 110],[19, 20, 11, 56, 25, 233, 154],[24, 26, 54, 48])==[4, 5, 11, 15, 19, 20, 24, 24, 25, 25, 26, 29, 48, 54, 56, 110, 154, 233]\n\"\"\"\ndef merge_sorted_list(list1, list2, list3):\n    # Combine all lists into one\n    combined_list = list1 + list2 + list3\n    \n    # Sort the combined list\n    combined_list.sort()\n    \n    return combined_list\n\n# Test cases\nassert merge_sorted_list([25, 24, 15, 4, 5, 29, 110],[19, 20, 11, 56, 25, 233, 154],[24, 26, 54, 48]) == [4, 5, 11, 15, 19, 20, 24, 24, 25, 25, 26, 29, 48, 54, 56, 110, 154, 233]", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/97": [{"task_id": "Mbpp/97", "solution": "\"\"\"\nWrite a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\nassert frequency_lists([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]])=={1: 1, 2: 3, 3: 1, 4: 1, 5: 2, 6: 1, 7: 1, 8: 1, 9: 1}\n\"\"\"\ndef frequency_lists(lst):\n    # Flatten the list of lists into a single list\n    flat_list = [item for sublist in lst for item in sublist]\n    \n    # Use a dictionary to count the frequency of each element\n    freq_dict = {element: flat_list.count(element) for element in set(flat_list)}\n    \n    return freq_dict\n\n# Test cases\nassert frequency_lists([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]]) == {1: 1, 2: 3, 3: 1, 4: 1, 5: 2, 6: 1, 7: 1, 8: 1, 9: 1}", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/101": [{"task_id": "Mbpp/101", "solution": "\"\"\"\nWrite a function to find the kth element in the given array using 1-based indexing.\nassert kth_element([12,3,5,7,19], 2) == 3\n\"\"\"\ndef kth_element(arr, k):\n    # Check if k is within the valid range of indices for the array\n    if k < 1 or k > len(arr):\n        return \"Error: Index out of bounds.\"\n    \n    # Sort the array in ascending order\n    arr.sort()\n    \n    # Return the kth element (0-based index)\n    return arr[k-1]\n\n# Test cases\nassert kth_element([12,3,5,7,19], 2) == 3\nassert kth_element([1,2,3,4,5], 3) == 3\nassert kth_element([-1,0,3,7,123], 4) == 7\nassert kth_element([1,2,3,4,5], 6) == \"Error: Index out of bounds.\"", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/103": [{"task_id": "Mbpp/103", "solution": "\"\"\"\nWrite a function to find the Eulerian number a(n, m).\nassert eulerian_num(3, 1) == 4\n\"\"\"\ndef eulerian_num(n, m):\n    if n < 0 or m < 0:\n        return \"Invalid input\"\n    \n    # Initialize the base cases\n    if n == 0 and m == 0:\n        return 1\n    \n    if n == 0 or m == 1:\n        return 0\n    \n    # Calculate the Eulerian number using recursion\n    return (n - 1) * eulerian_num(n - 1, m - 1) + (m - 1) * eulerian_num(n, m - 1)\n\n# Test cases", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/111": [{"task_id": "Mbpp/111", "solution": "\"\"\"\nWrite a function to find the common elements in given nested lists.\nassert set(common_in_nested_lists([[12, 18, 23, 25, 45], [7, 12, 18, 24, 28], [1, 5, 8, 12, 15, 16, 18]]))==set([18, 12])\n\"\"\"\ndef common_in_nested_lists(lists):\n    # Flatten the list of lists into a single list\n    flat_list = [item for sublist in lists for item in sublist]\n    \n    # Use set intersection to find common elements\n    common_elements = set(flat_list) & set(lists[0])\n    \n    return common_elements\n\n# Test the function\nassert set(common_in_nested_lists([[12, 18, 23, 25, 45], [7, 12, 18, 24, 28], [1, 5, 8, 12, 15, 16, 18]]))==set([18, 12])", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/102": [{"task_id": "Mbpp/102", "solution": "\"\"\"\nWrite a function to convert a snake case string to camel case string.\nassert snake_to_camel('python_program')=='PythonProgram'\n\"\"\"\ndef snake_to_camel(snake_str):\n    # Split the input string into words using underscore as delimiter\n    words = snake_str.split('_')\n    \n    # Capitalize each word and join them together\n    camel_str = ''.join(word.capitalize() for word in words)\n    \n    return camel_str\n\n# Test the function\nassert snake_to_camel('python_program') == 'PythonProgram'", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/98": [{"task_id": "Mbpp/98", "solution": "\"\"\"\nWrite a function to multiply all the numbers in a list and divide with the length of the list.\nassert math.isclose(multiply_num((8, 2, 3, -1, 7)), -67.2, rel_tol=0.001)\n\"\"\"\nimport math\n\ndef multiply_num(nums):\n    # Multiply all numbers in the list\n    product = 1\n    for num in nums:\n        product *= num\n    \n    # Divide the product by the length of the list\n    result = product / len(nums)\n    \n    return result\n\n# Test the function with provided data points\nassert math.isclose(multiply_num((8, 2, 3, -1, 7)), -67.2, rel_tol=0.001)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/61": [{"task_id": "Mbpp/61", "solution": "\"\"\"\nWrite a python function to count the number of substrings with the sum of digits equal to their length.\nassert count_Substrings('112112') == 6\n\"\"\"\ndef count_substrings(s):\n    # Initialize the result counter\n    result = 0\n    \n    # Iterate over each possible substring starting from the first character\n    for i in range(len(s)):\n        # Initialize the current sum of digits\n        current_sum = 0\n        \n        # Iterate over each character in the substring\n        for j in range(i, len(s)):\n            # Add the current character to the sum of digits\n            current_sum += ord(s[j]) - ord('0')\n            \n            # If the sum of digits equals the length of the substring, increment the result\n            if current_sum == j + 1:\n                result += 1\n    \n    return result\n\n# Test cases to verify the correctness of the function\nassert count_substrings('112112') == 6", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/105": [{"task_id": "Mbpp/105", "solution": "\"\"\"\nWrite a python function to count true booleans in the given list.\nassert count([True,False,True]) == 2\n\"\"\"\ndef count(lst):\n    return sum(lst)\n\n# Test cases\nassert count([True, False, True]) == 2", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/87": [{"task_id": "Mbpp/87", "solution": "\"\"\"\nWrite a function to merge three dictionaries into a single dictionary.\nassert merge_dictionaries_three({ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" }, { \"G\": \"Green\", \"W\": \"White\" },{ \"O\": \"Orange\", \"W\": \"White\", \"B\": \"Black\" })=={'B': 'Black', 'R': 'Red', 'P': 'Pink', 'G': 'Green', 'W': 'White', 'O': 'Orange'}\n\"\"\"\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    # Merge all dictionaries into one\n    merged_dict = {**dict1, **dict2, **dict3}\n    return merged_dict\n\n# Test cases to verify the correctness of the function\nassert merge_dictionaries_three({\"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\"}, {\"G\": \"Green\", \"W\": \"White\"}, {\"O\": \"Orange\", \"W\": \"White\", \"B\": \"Black\"}) == {'B': 'Black', 'R': 'Red', 'P': 'Pink', 'G': 'Green', 'W': 'White', 'O': 'Orange'}", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/95": [{"task_id": "Mbpp/95", "solution": "\"\"\"\nWrite a python function to find the length of the smallest list in a list of lists.\nassert Find_Min_Length([[1],[1,2]]) == 1\n\"\"\"\ndef Find_Min_Length(list_of_lists):\n    # Initialize minimum length as infinity\n    min_length = float('inf')\n    \n    # Iterate through each sublist in the list of lists\n    for sublist in list_of_lists:\n        # Update minimum length if current sublist's length is smaller\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n    \n    # Return the minimum length found\n    return min_length\n\n# Test cases to verify the correctness of the function\nassert Find_Min_Length([[1],[1,2]]) == 1\nassert Find_Min_Length([[5,6,7], [8,9], [10,11,12]]) == 3\nassert Find_Min_Length([[], [], []]) == 0\nassert Find_Min_Length([[100, 200, 300], [400, 500], [600]]) == 3", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/106": [{"task_id": "Mbpp/106", "solution": "\"\"\"\nWrite a function to append the given list to the given tuples.\nassert add_lists([5, 6, 7], (9, 10)) == (9, 10, 5, 6, 7)\n\"\"\"\ndef add_lists(lst, tup):\n    # Append each element of the tuple to the list\n    for item in tup:\n        lst.append(item)\n    return tuple(lst)\n\n# Test the function with provided data points\nassert add_lists([5, 6, 7], (9, 10)) == (9, 10, 5, 6, 7)", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/109": [{"task_id": "Mbpp/109", "solution": "\"\"\"\nWrite a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\nassert odd_Equivalent(\"011001\",6) == 3\n\"\"\"\ndef odd_Equivalent(binary_string, rotations):\n    # Initialize count of odd-equivalent strings\n    count = 0\n    \n    # Iterate over each rotation\n    for i in range(rotations):\n        # Rotate the binary string\n        rotated_string = binary_string[i:] + binary_string[:i]\n        \n        # Check if the rotated string has an odd number of '1's\n        if rotated_string.count('1') % 2 != 0:\n            count += 1\n            \n    return count\n\n# Test the function with provided data points\nassert odd_Equivalent(\"011001\",6) == 3", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/86": [{"task_id": "Mbpp/86", "solution": "\"\"\"\nWrite a function to find nth centered hexagonal number.\nassert centered_hexagonal_number(10) == 271\n\"\"\"\ndef centered_hexagonal_number(n):\n    \"\"\"\n    Calculate the nth centered hexagonal number.\n    \n    Args:\n    n (int): The position of the centered hexagonal number.\n    \n    Returns:\n    int: The nth centered hexagonal number.\n    \"\"\"\n    return 3 * n * n + 1\n\n# Test cases to verify the correctness of the function\nassert centered_hexagonal_number(10) == 271\nassert centered_hexagonal_number(5) == 19\nassert centered_hexagonal_number(1) == 1\nassert centered_hexagonal_number(6) == 43", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/115": [{"task_id": "Mbpp/115", "solution": "\"\"\"\nWrite a function to check whether all dictionaries in a list are empty or not.\nassert empty_dit([{},{},{}])==True\n\"\"\"\ndef empty_dit(dicts):\n    # Check if all dictionaries in the list are empty\n    return all(not d for d in dicts)\n\n# Test cases\nassert empty_dit([{},{},{}]) == True\nassert empty_dit([{'a':1}, {'b':2}]) == False", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[[1, 2], [], []]]], "plus_fail_tests": [[[[], [], [], ["", "gA", "EnIODji", "not", "e", "a", "ML"], [], [], [], [], [], [], [], []]]]}], "Mbpp/135": [{"task_id": "Mbpp/135", "solution": "\"\"\"\nWrite a function to find the nth hexagonal number.\nassert hexagonal_num(10) == 190\n\"\"\"\ndef hexagonal_num(n):\n    \"\"\"\n    Calculate the nth hexagonal number.\n    \n    Args:\n    n (int): The position of the hexagonal number in the sequence.\n    \n    Returns:\n    int: The nth hexagonal number.\n    \"\"\"\n    return 3 * n**2 - 1\n\n# Test cases to verify the correctness of the function\nassert hexagonal_num(10) == 190\nassert hexagonal_num(5) == 45\nassert hexagonal_num(7) == 61\nassert hexagonal_num(8) == 71\nassert hexagonal_num(9) == 89\nassert hexagonal_num(10) == 190", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/118": [{"task_id": "Mbpp/118", "solution": "\"\"\"\nWrite a function to convert a string to a list of strings split on the space character.\nassert string_to_list(\"python programming\")==['python','programming']\n\"\"\"\ndef string_to_list(s):\n    \"\"\"\n    Convert a string to a list of strings split on the space character.\n    \n    Args:\n    s (str): The input string to be converted.\n    \n    Returns:\n    list: A list containing the words from the input string.\n    \"\"\"\n    return s.split()\n\n# Test cases to verify the correctness of the solution\nassert string_to_list(\"python programming\") == ['python', 'programming']\nassert string_to_list(\"hello world\") == ['hello', 'world']\nassert string_to_list(\"\") == []\nassert string_to_list(\"single word\") == ['single', 'word']", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/117": [{"task_id": "Mbpp/117", "solution": "\"\"\"\nWrite a function to convert all possible convertible elements in a list of lists to floats.\nassert list_to_float( [(\"3\", \"4\"), (\"1\", \"26.45\"), (\"7.32\", \"8\"), (\"4\", \"8\")] ) == [(3.0, 4.0), (1.0, 26.45), (7.32, 8.0), (4.0, 8.0)]\n\"\"\"\ndef list_to_float(lst):\n    # Use list comprehension to iterate over each sublist in the input list\n    return [tuple(float(x) for x in sub_list) for sub_list in lst]\n\n# Test cases to verify the correctness of the solution\nassert list_to_float( [(\"3\", \"4\"), (\"1\", \"26.45\"), (\"7.32\", \"8\"), (\"4\", \"8\")] ) == [(3.0, 4.0), (1.0, 26.45), (7.32, 8.0), (4.0, 8.0)]\n", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/128": [{"task_id": "Mbpp/128", "solution": "\"\"\"\nWrite a function to find words that are longer than n characters from a given list of words.\nassert long_words(3,\"python is a programming language\")==['python','programming','language']\n\"\"\"\ndef long_words(n, word_list):\n    # Use list comprehension to filter words longer than n characters\n    return [word for word in word_list if len(word) > n]\n\n# Test the function with provided data points\nassert long_words(3, \"python is a programming language\") == ['python', 'programming', 'language']", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/116": [{"task_id": "Mbpp/116", "solution": "\"\"\"\nWrite a function to convert a given tuple of positive integers into a single integer.\nassert tuple_to_int((1,2,3))==123\n\"\"\"\ndef tuple_to_int(tup):\n    \"\"\"\n    Convert a tuple of positive integers into a single integer.\n\n    Args:\n    tup (tuple): A tuple of positive integers.\n\n    Returns:\n    int: The converted integer.\n    \"\"\"\n    return int(''.join(str(i) for i in tup))\n\n# Test cases\nassert tuple_to_int((1, 2, 3)) == 123\nassert tuple_to_int((4, 5, 6, 7)) == 4567\nassert tuple_to_int((8, 9, 0, 1)) == 8901", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/132": [{"task_id": "Mbpp/132", "solution": "\"\"\"\nWrite a function to convert a tuple to a string.\nassert tup_string(('e', 'x', 'e', 'r', 'c', 'i', 's', 'e', 's'))==(\"exercises\")\n\"\"\"\ndef tup_string(tup):\n    \"\"\"\n    Convert a tuple to a string.\n\n    Args:\n    tup (tuple): The tuple to be converted.\n\n    Returns:\n    str: The string representation of the tuple.\n    \"\"\"\n    return ''.join(map(str, tup))\n\n# Test the function\nassert tup_string(('e', 'x', 'e', 'r', 'c', 'i', 's', 'e', 's')) == (\"exercises\")\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/140": [{"task_id": "Mbpp/140", "solution": "\"\"\"\nWrite a function to flatten the list of lists into a single set of numbers.\nassert set(extract_singly([(3, 4, 5), (4, 5, 7), (1, 4)])) == set([3, 4, 5, 7, 1])\n\"\"\"\ndef extract_singly(list_of_lists):\n    # Flatten the list of lists using itertools.chain\n    flattened_list = [item for sublist in list_of_lists for item in sublist]\n    # Convert the list to a set to remove duplicates\n    return set(flattened_list)\n\n# Test the function with provided data points\nassert set(extract_singly([(3, 4, 5), (4, 5, 7), (1, 4)])) == set([3, 4, 5, 7, 1])", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/127": [{"task_id": "Mbpp/127", "solution": "\"\"\"\nWrite a function to multiply two integers.\nassert multiply_int(10,20)==200\n\"\"\"\n# Define the function to multiply two integers\ndef multiply_int(a, b):\n    # Multiply the two integers and return the result\n    return a * b\n\n# Test the function with provided data points\nassert multiply_int(10, 20) == 200", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/133": [{"task_id": "Mbpp/133", "solution": "\"\"\"\nWrite a function to calculate the sum of the negative numbers of a given list of numbers.\nassert sum_negativenum([2, 4, -6, -9, 11, -12, 14, -5, 17])==-32\n\"\"\"\ndef sum_negativenum(nums):\n    return sum(num for num in nums if num < 0)\n\n# Test cases\nassert sum_negativenum([2, 4, -6, -9, 11, -12, 14, -5, 17]) == -32\nassert sum_negativenum([-1, -2, -3, -4, -5]) == -15\nassert sum_negativenum([]) == 0\nassert sum_negativenum([0, 0, 0]) == 0", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/226": [{"task_id": "Mbpp/226", "solution": "\"\"\"\nWrite a python function to remove the characters which have odd index values of a given string.\nassert odd_values_string('abcdef') == 'ace'\n\"\"\"\ndef odd_values_string(s):\n    # Initialize an empty string to store the result\n    result = \"\"\n    # Iterate over each character in the input string\n    for i in range(len(s)):\n        # Check if the index is even (0-based indexing)\n        if i % 2 == 0:\n            # Append the character at the even index to the result string\n            result += s[i]\n    # Return the resulting string\n    return result\n\n# Test cases to verify the correctness of the solution\nassert odd_values_string('abcdef') == 'ace'\nassert odd_values_string('hello') == 'hlo'\nassert odd_values_string('123456789') == '13579'", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/124": [{"task_id": "Mbpp/124", "solution": "\"\"\"\nWrite a function to get the angle of a complex number.\nassert math.isclose(angle_complex(0,1j), 1.5707963267948966, rel_tol=0.001)\n\"\"\"\nimport math\n\ndef angle_complex(real, imag):\n    \"\"\"\n    Calculate the angle (in radians) of a complex number.\n\n    Args:\n    real (float): The real part of the complex number.\n    imag (float): The imaginary part of the complex number.\n\n    Returns:\n    float: The angle of the complex number.\n    \"\"\"\n    return math.atan2(imag, real)\n\n# Test cases\nassert math.isclose(angle_complex(0,1j), 1.5707963267948966, rel_tol=0.001)", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/131": [{"task_id": "Mbpp/131", "solution": "\"\"\"\nWrite a python function to reverse only the vowels of a given string (where y is not a vowel).\nassert reverse_vowels(\"Python\") == \"Python\"\n\"\"\"\ndef reverse_vowels(s):\n    # Define vowels\n    vowels = 'aeiouAEIOU'\n    \n    # Initialize pointers for the start and end of the string\n    left, right = 0, len(s) - 1\n    \n    # Swap characters until the pointers meet\n    while left < right:\n        # Move the left pointer to the right until it points to a vowel\n        while left < right and s[left] not in vowels:\n            left += 1\n        \n        # Move the right pointer to the left until it points to a vowel\n        while left < right and s[right] not in vowels:\n            right -= 1\n        \n        # If both pointers have found a vowel, swap them\n        if left < right:\n            s[left], s[right] = s[right], s[left]\n        \n        # Move the pointers towards each other\n        left += 1\n        right -= 1\n    \n    return ''.join(s)\n\n# Test cases\nassert reverse_vowels(\"Python\") == \"Python\"\nassert reverse_vowels(\"Hello World!\") == \"olleH dlroW!\"\nassert reverse_vowels(\"Programming\") == \"Prigrammin\"\nassert reverse_vowels(\"No Vowel Here!\") == \"Nv Vouel Rehe!\"", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/130": [{"task_id": "Mbpp/130", "solution": "\"\"\"\nWrite a function to find the item with maximum frequency in a given list.\nassert max_occurrences([2,3,8,4,7,9,8,2,6,5,1,6,1,2,3,2,4,6,9,1,2])==2\n\"\"\"\ndef max_occurrences(arr):\n    # Create a dictionary to store the frequency of each element\n    freq_dict = {}\n    \n    # Iterate through the array and update the frequency count\n    for num in arr:\n        if num in freq_dict:\n            freq_dict[num] += 1\n        else:\n            freq_dict[num] = 1\n    \n    # Find the maximum frequency\n    max_freq = max(freq_dict.values())\n    \n    # Find all elements with the maximum frequency\n    max_elements = [num for num, freq in freq_dict.items() if freq == max_freq]\n    \n    return max_elements\n\n# Test the function with provided data points\nassert max_occurrences([2,3,8,4,7,9,8,2,6,5,1,6,1,2,3,2,4,6,9,1,2])==[2, 8]", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/138": [{"task_id": "Mbpp/138", "solution": "\"\"\"\nWrite a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nassert is_Sum_Of_Powers_Of_Two(10) == True\n\"\"\"\ndef is_Sum_Of_Powers_Of_Two(n):\n    # Check if n is zero\n    if n == 0:\n        return False\n    \n    # Iterate through possible powers of two\n    for i in range(32):  # Assuming the maximum power of two is 2^31 (which is 2147483648)\n        if n & (1 << i) == n:  # Check if n has the ith bit set\n            return True\n    return False\n\n# Test cases\nassert is_Sum_Of_Powers_Of_Two(10) == True\nassert is_Sum_Of_Powers_Of_Two(15) == True\nassert is_Sum_Of_Powers_Of_Two(16) == True\nassert is_Sum_Of_Powers_Of_Two(17) == False\nassert is_Sum_Of_Powers_Of_Two(31) == True\nassert is_Sum_Of_Powers_Of_Two(32) == True\nassert is_Sum_Of_Powers_Of_Two(33) == False\nassert is_Sum_Of_Powers_Of_Two(64) == True\nassert is_Sum_Of_Powers_Of_Two(65) == False\nassert is_Sum_Of_Powers_Of_Two(1024) == True\nassert is_Sum_Of_Powers_Of_Two(1025) == False\nassert is_Sum_Of_Powers_Of_Two(1026) == False\nassert is_Sum_Of_Powers_Of_Two(1027) == False\nassert is_Sum_Of_Powers_Of_Two(1028) == False\nassert is_Sum_Of_Powers_Of_Two(1029) == False\nassert is_Sum_Of_Powers_Of_Two(1030) == False\nassert is_Sum_Of_Powers_Of_Two(1031) == False\nassert is_Sum_Of_Powers_Of_Two(1032) == False\nassert is_Sum_Of_Powers_Of_Two(1033) == False\nassert is_Sum_Of_Powers_Of_Two(1034) == False\nassert is_Sum_Of_Powers_Of_Two(1035) == False\nassert is_Sum_Of_Powers_Of_Two(1036) == False\nassert is_Sum_Of_Powers_Of_Two(1037) == False\nassert is_Sum_Of_Powers_Of_Two(1038) == False\nassert is_Sum_Of_Powers_Of_Two(1039) == False\nassert is_Sum_Of_Powers_Of_Two(1040) == False\nassert is_Sum_Of_Powers_Of_Two(1041) == False\nassert is_Sum_Of_Powers_Of_Two(1042) == False\nassert is_Sum_Of_Powers_Of_Two(1043) == False\nassert is_Sum_Of_Powers_Of_Two(1044) == False\nassert is_Sum_Of_Powers_Of_Two(1045) == False\nassert is_Sum_Of_Powers_Of_Two(1046) == False\nassert is_Sum_Of_Powers_Of_Two(1047) == False\nassert is_Sum_Of_Powers_Of_Two(1048) == False\nassert is_Sum_Of_Powers_Of_Two(1049) == False\nassert is_Sum_Of_Powers_Of_Two(1050) == False\nassert is_Sum_Of_Powers_Of_Two(1051) == False\nassert is_Sum_Of_Powers_Of", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/224": [{"task_id": "Mbpp/224", "solution": "\"\"\"\nWrite a python function to count the number of set bits (binary digits with value 1) in a given number.\nassert count_Set_Bits(2) == 1\n\"\"\"\ndef count_Set_Bits(n):\n    \"\"\"\n    Count the number of set bits (binary digits with value 1) in a given number.\n    \n    :param n: The integer whose set bits are to be counted.\n    :return: The total number of set bits in the binary representation of n.\n    \"\"\"\n    # Initialize the count of set bits\n    count = 0\n    \n    # Loop until n becomes 0\n    while n > 0:\n        # Add the least significant bit to the count\n        count += n & 1\n        \n        # Right shift n by one bit to process the next bit\n        n >>= 1\n    \n    return count\n\n# Test cases to verify the correctness of the function\nassert count_Set_Bits(2) == 1\nassert count_Set_Bits(5) == 2\nassert count_Set_Bits(6) == 2\nassert count_Set_Bits(7) == 3\nassert count_Set_Bits(8) == 1\nassert count_Set_Bits(9) == 2\nassert count_Set_Bits(10) == 2\nassert count_Set_Bits(11) == 2\nassert count_Set_Bits(12) == 2\nassert count_Set_Bits(13) == 3\nassert count_Set_Bits(14) == 3\nassert count_Set_Bits(15) == 3\nassert count_Set_Bits(16) == 1\nassert count_Set_Bits(17) == 1\nassert count_Set_Bits(18) == 1\nassert count_Set_Bits(19) == 2\nassert count_Set_Bits(20) == 2\nassert count_Set_Bits(21) == 2\nassert count_Set_Bits(22) == 2\nassert count_Set_Bits(23) == 3\nassert count_Set_Bits(24) == 1\nassert count_Set_Bits(25) == 2\nassert count_Set_Bits(26) == 2\nassert count_Set_Bits(27) == 2\nassert count_Set_Bits(28) == 1\nassert count_Set_Bits(29) == 2\nassert count_Set_Bits(30) == 2\nassert count_Set_Bits(31) == 2\nassert count_Set_Bits(32) == 1\nassert count_Set_Bits(33) == 2\nassert count_Set_Bits(34) == 2\nassert count_Set_Bits(35) == 2\nassert count_Set_Bits(36) == 2\nassert count_Set_Bits(37) == 3\nassert count_Set_Bits(38) == 3\nassert count_Set_Bits(39) == 3\nassert count_Set_Bits(40) == 1\nassert count_Set_Bits(41) == 2\nassert count_Set_Bits(42) == 2\nassert count_Set_Bits(43) == 2\nassert count_Set_Bits(44) == 2\nassert count_Set_Bits(45) == 3\nassert count_Set_Bits(46) == 3\nassert count_Set_Bits(47) == 3\nassert count_Set_Bits(48) == 1\nassert count_Set_Bits(49) == 2\nassert count_Set_Bits(50) == 2\nassert count_Set_Bits(51) == 2\nassert", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/164": [{"task_id": "Mbpp/164", "solution": "\"\"\"\nWrite a function to determine if the sum of the divisors of two integers are the same.\nassert are_equivalent(36, 57) == False\n\"\"\"\ndef are_equivalent(a, b):\n    # Calculate the sum of divisors for both numbers\n    sum_divisors_a = sum([i for i in range(1, a + 1) if a % i == 0])\n    sum_divisors_b = sum([i for i in range(1, b + 1) if b % i == 0])\n    \n    # Check if the sums are equal\n    return sum_divisors_a == sum_divisors_b\n\n# Test cases to verify the correctness of the function\nassert are_equivalent(36, 57) == False\nassert are_equivalent(28, 28) == True\nassert are_equivalent(49, 49) == True\nassert are_equivalent(123, 123) == True\nassert are_equivalent(123, 124) == False\nassert are_equivalent(123, 125) == False\nassert are_equivalent(123, 126) == False\nassert are_equivalent(123, 127) == False\nassert are_equivalent(123, 128) == False\nassert are_equivalent(123, 129) == False\nassert are_equivalent(123, 130) == False\nassert are_equivalent(123, 131) == False\nassert are_equivalent(123, 132) == False\nassert are_equivalent(123, 133) == False\nassert are_equivalent(123, 134) == False\nassert are_equivalent(123, 135) == False\nassert are_equivalent(123, 136) == False\nassert are_equivalent(123, 137) == False\nassert are_equivalent(123, 138) == False\nassert are_equivalent(123, 139) == False\nassert are_equivalent(123, 140) == False\nassert are_equivalent(123, 141) == False\nassert are_equivalent(123, 142) == False\nassert are_equivalent(123, 143) == False\nassert are_equivalent(123, 144) == False\nassert are_equivalent(123, 145) == False\nassert are_equivalent(123, 146) == False\nassert are_equivalent(123, 147) == False\nassert are_equivalent(123, 148) == False\nassert are_equivalent(123, 149) == False\nassert are_equivalent(123, 150) == False\nassert are_equivalent(123, 151) == False\nassert are_equivalent(123, 152) == False\nassert are_equivalent(123, 153) == False\nassert are_equivalent(123, 154) == False\nassert are_equivalent(123, 155) == False\nassert are_equivalent(123, 156) == False\nassert are_equivalent(123, 157) == False\nassert are_equivalent(123, 158) == False\n", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/125": [{"task_id": "Mbpp/125", "solution": "\"\"\"\nWrite a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nassert find_length(\"11000010001\") == 6\n\"\"\"\ndef find_length(s):\n    max_diff = 0\n    current_diff = 0\n    zero_count = 0\n    \n    for char in s:\n        if char == '0':\n            zero_count += 1\n            current_diff -= 1\n        else:\n            current_diff += 1\n            zero_count += 1\n    \n    # If there's no '0' in the string, return the length of the string minus the count of '1'\n    if zero_count == 0:\n        return len(s) - zero_count\n    \n    # Update max_diff when we encounter a new '0'\n    max_diff = max(max_diff, current_diff)\n    \n    return max_diff\n\n# Test cases\nassert find_length(\"11000010001\") == 6\nassert find_length(\"00000000000\") == 0\nassert find_length(\"11111111111\") == 10\nassert find_lengthbase_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/142": [{"task_id": "Mbpp/142", "solution": "\"\"\"\nWrite a function to count number items that are identical in the same position of three given lists.\nassert count_samepair([1,2,3,4,5,6,7,8],[2,2,3,1,2,6,7,9],[2,1,3,1,2,6,7,9])==3\n\"\"\"\ndef count_samepair(list1, list2, list3):\n    # Initialize a counter for the number of identical pairs\n    count = 0\n    \n    # Iterate through each element in the first list\n    for i in range(len(list1)):\n        # Check if the current element in all three lists is the same\n        if list1[i] == list2[i] == list3[i]:\n            # Increment the counter\n            count += 1\n    \n    # Return the total count of identical pairs\n    return count\n\n# Test cases to verify the correctness of the function\nassert count_samepair([1,2,3,4,5,6,7,8],[2,2,3,1,2,6,7,9],[2,1,3,1,2,6,7,9]) == 3", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6, 7, 8]]]}], "Mbpp/141": [{"task_id": "Mbpp/141", "solution": "\"\"\"\nWrite a function to sort a list of elements.\nassert pancake_sort([15, 79, 25, 38, 69]) == [15, 25, 38, 69, 79]\n\"\"\"\ndef pancake_sort(arr):\n    # Sort the array using bubble sort\n    for i in range(len(arr)):\n        for j in range(0, len(arr) - i - 1):\n            if arr[j] > arr[j + 1]:\n                arr[j], arr[j + 1] = arr[j + 1], arr[j]\n    \n    return arr\n\n# Test the function", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/129": [{"task_id": "Mbpp/129", "solution": "\"\"\"\nWrite a function to calculate whether the matrix is a magic square.\nassert magic_square_test([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]])==True\n\"\"\"\ndef magic_square_test(matrix):\n    # Check if the matrix is a 4x4 matrix\n    if len(matrix) != 4 or any(len(row) != 4 for row in matrix):\n        return False\n    \n    # Calculate the sum of each row\n    row_sums = [sum(row) for row in matrix]\n    \n    # Calculate the sum of each column\n    col_sums = [sum(col) for col in zip(*matrix)]\n    \n    # Calculate the sum of the main diagonal\n    main_diagonal_sum = sum(matrix[i][i] for i in range(4))\n    \n    # Calculate the sum of the secondary diagonal\n    secondary_diagonal_sum = sum(matrix[i][3-i] for i in range(4))\n    \n    # Check if all sums are equal\n    return row_sums == col_sums == [main_diagonal_sum, secondary_diagonal_sum]\n\n# Test the function", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[[[7, 7], [7, 7]]]]}], "Mbpp/120": [{"task_id": "Mbpp/120", "solution": "\"\"\"\nWrite a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\nassert max_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)] )==36\n\"\"\"\ndef max_product_tuple(tuples_list):\n    # Calculate the product of each pair of tuples and return the maximum value\n    return max([abs(x*y) for x, y in tuples_list])\n\n# Test the function with provided data points\nassert max_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)]) == 36", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/126": [{"task_id": "Mbpp/126", "solution": "\"\"\"\nWrite a python function to find the sum of common divisors of two given numbers.\nassert sum(10,15) == 6\n\"\"\"\ndef sum_common_divisors(x, y):\n    # Initialize the sum of common divisors\n    sum_div = 0\n    \n    # Iterate through all possible divisors up to the minimum of x and y\n    for i in range(1, min(x, y) + 1):\n        if x % i == 0 and y % i == 0:\n            sum_div += i\n            \n    return sum_div\n\n# Test cases to verify the correctness of the function\nassert sum_common_divisors(10, 15) == 6\nassert sum_common_divisors(20, 30) == 42\nassert sum_common_divisors(7, 11) == 0", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/139": [{"task_id": "Mbpp/139", "solution": "\"\"\"\nWrite a function to find the circumference of a circle.\nassert math.isclose(circle_circumference(10), 62.830000000000005, rel_tol=0.001)\n\"\"\"\nimport math\n\ndef circle_circumference(radius):\n    \"\"\"\n    Calculate the circumference of a circle given its radius.\n\n    :param radius: The radius of the circle.\n    :return: The circumference of the circle.\n    \"\"\"\n    return 2 * math.pi * radius\n\n# Test the function with provided data points\nassert math.isclose(circle_circumference(10), 62.830000000000005, rel_tol=0.001)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/145": [{"task_id": "Mbpp/145", "solution": "\"\"\"\nWrite a python function to find the maximum difference between any two elements in a given array.\nassert max_Abs_Diff((2,1,5,3)) == 4\n\"\"\"\ndef max_Abs_Diff(arr):\n    \"\"\"\n    Find the maximum difference between any two elements in a given array.\n\n    Args:\n    arr (list): A list of integers.\n\n    Returns:\n    int: The maximum absolute difference between any two elements in the array.\n    \"\"\"\n    # Sort the array to easily find the minimum and maximum values\n    sorted_arr = sorted(arr)\n    \n    # Calculate the maximum difference\n    max_diff = sorted_arr[-1] - sorted_arr[0]\n    \n    return max_diff\n\n# Test the function\nassert max_Abs_Diff((2,1,5,3)) == 4", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/119": [{"task_id": "Mbpp/119", "solution": "\"\"\"\nWrite a python function to find the element that appears only once in a sorted array.\nassert search([1,1,2,2,3]) == 3\n\"\"\"\ndef search(arr):\n    left = 0\n    right = len(arr) - 1\n    \n    while left < right:\n        mid = (left + right) // 2\n        \n        if arr[mid] == arr[mid + 1]:\n            # If mid+1 is also equal, we need to move left pointer\n            left = mid + 1\n        else:\n            # If mid+1 is not equal, we need to move right pointer\n            right = mid\n            \n    return arr[left]\n\n# Test cases\nassert search([1,1,2,2,3]) == 3\nassert search([4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50]) == 50\nassert search([51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100]) == 100", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/166": [{"task_id": "Mbpp/166", "solution": "\"\"\"\nWrite a function that counts the number of pairs of integers in a list that xor to an even number.\nassert find_even_pair([5, 4, 7, 2, 1]) == 4\n\"\"\"\ndef find_even_pair(nums):\n    # Initialize a counter for even pairs\n    count = 0\n    \n    # Iterate through each pair of numbers\n    for i in range(len(nums)):\n        for j in range(i + 1, len(nums)):\n            # Check if the XOR of the two numbers is even\n            if (nums[i] ^ nums[j]) % 2 == 0:\n                count += 1\n    \n    return count\n\n# Test cases to verify the correctness of the function\nassert find_even_pair([5, 4, 7, 2, 1]) == 4\nassert find_even_pair([1, 3, 5, 7, 9]) == 0\nassert find_even_pair([2, 4, 6, 8, 10]) == 10", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/113": [{"task_id": "Mbpp/113", "solution": "\"\"\"\nWrite a function to check if a string represents an integer or not.\nassert check_integer(\"python\")==False\n\"\"\"\ndef check_integer(s):\n    try:\n        int(s)\n        return True\n    except ValueError:\n        return False\n\n# Test cases", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/227": [{"task_id": "Mbpp/227", "solution": "\"\"\"\nWrite a function to find minimum of three numbers.\nassert min_of_three(10,20,0)==0\n\"\"\"\ndef min_of_three(a, b, c):\n    return min(a, b, c)\n\n# Test cases\nassert min_of_three(10, 20, 0) == 0\nassert min_of_three(-5, -3, -1) == -5\nassert min_of_three(1, 1, 1) == 1", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/222": [{"task_id": "Mbpp/222", "solution": "\"\"\"\nWrite a function to check if all the elements in tuple have same data type or not.\nassert check_type((5, 6, 7, 3, 5, 6) ) == True\n\"\"\"\n# Define the function to check if all elements in a tuple have the same data type\ndef check_type(tup):\n    # Check if the tuple is empty\n    if not tup:\n        return True\n    # Get the data type of the first element\n    first_type = type(tup[0])\n    # Iterate through the rest of the tuple\n    for element in tup[1:]:\n        # If the data type of any element is different from the first element's data type, return False\n        if type(element) != first_type:\n            return False\n    # If all elements have the same data type, return True\n    return True\n\n# Test cases to verify the correctness of the function\nassert check_type((5, 6, 7, 3, 5, 6)) == True\nassert check_type((5, 'a', 7, 3, 'b', 6)) == False\nassert check_type(('a', 'b', 'c')) == True\nassert check_type((5, 6, 'a', 3, 'b', 6)) == False\nassert check_type((5, 6, 7, 3, 5, 6)) == True\nassert check_type((5, 'a', 7, 3, 'b', 6)) == False\nassert check_type(('a', 'b', 'c')) == True\nassert check_type((5, 6, 'a', 3, 'b', 6)) == False\nassert check_type((5, 6, 7, 3, 5, 6)) == True\nassert check_type((5, 'a', 7, 3, 'b', 6)) == False\nassert check_type(('a', 'b', 'c')) == True\nassert check_type((5, 6, 'a', 3, 'b', 6)) == False\nassert check_type((5, 6, 7, 3, 5, 6)) == True\nassert check_type((5, 'a', 7, 3, 'b', 6)) == False\nassert check_type(('a', 'b', 'c')) == True\nassert check_type((5, 6, 'a', 3, 'b', 6)) == False\nassert check_type((5, 6, 7, 3, 5, 6)) == True\nassert check_type((5, 'a', 7, 3, 'b', 6)) == False\nassert check_type(('a', 'b', 'c')) == True\nassert check_type((5, 6, 'a', 3, 'b', 6)) == False\nassert check_type((5, 6, 7, 3, 5, 6)) == True\nassert check_type((5, 'a', 7, 3, 'b', 6)) == False\nassert check_type(('a', 'b', 'c')) == True\nassert check_type((5, 6, 'a', 3, 'b', 6)) == False\nassert check_type((5, 6, 7, 3, 5, 6)) == True\nassert check_type((5, 'a', 7, 3, 'b', 6)) == False\nassert check_type(('a', 'b', 'c')) == True\nassert check_type((5, 6, 'a', 3, 'b', 6)) == False\nassert check_type((5, 6, 7, 3", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/239": [{"task_id": "Mbpp/239", "solution": "\"\"\"\nWrite a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\nassert get_total_number_of_sequences(10, 4) == 4\n\"\"\"\ndef get_total_number_of_sequences(m, n):\n    # Initialize the result variable\n    total_sequences = 0\n    \n    # Iterate over all possible values for the first element of the sequence\n    for i in range(1, m + 1):\n        # Calculate the number of valid sequences starting from i\n        if i <= 2 * (m - i + 1):\n            total_sequences += 1\n    \n    return total_sequences\n\n# Test cases to verify the correctness of the function\nassert get_total_number_of_sequences(10, 4) == 4\nassert get_total_number_of_sequences(5, 3) == 6\nassert get_total_number_of_sequences(7, 2) == 8", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/165": [{"task_id": "Mbpp/165", "solution": "\"\"\"\nWrite a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\nassert count_char_position(\"xbcefg\") == 2\n\"\"\"\ndef count_char_position(s):\n    # Initialize a counter for matching positions\n    match_count = 0\n    \n    # Iterate over each character in the string\n    for i, char in enumerate(s):\n        # Check if the character is lowercase and its position matches its alphabetical order\n        if char.islower() and ord(char) - ord('a') == i:\n            match_count += 1\n            \n    return match_count\n\n# Test cases to verify the correctness of the function\nassert count_char_position(\"xbcefg\") == 2\nassert count_char_position(\"abcdefg\") == 7\nassert count_char_position(\"xyz\") == 3\nassert count_char_position(\"\") == 0\nassert count_char_position(\"AaBbCc\") == 4", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/161": [{"task_id": "Mbpp/161", "solution": "\"\"\"\nWrite a function to remove all elements from a given list present in another list.\nassert remove_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [2, 4, 6, 8]) == [1, 3, 5, 7, 9, 10]\n\"\"\"\ndef remove_elements(main_list, remove_list):\n    # Using list comprehension to filter out elements present in remove_list\n    filtered_list = [element for element in main_list if element not in remove_list]\n    return filtered_list\n\n# Test cases to verify the correctness of the function\nassert remove_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [2, 4, 6, 8]) == [1, 3, 5, 7, 9, 10]", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/171": [{"task_id": "Mbpp/171", "solution": "\"\"\"\nWrite a function to find the perimeter of a regular pentagon from the length of its sides.\nassert perimeter_pentagon(5) == 25\n\"\"\"\n# Define the function to calculate the perimeter of a regular pentagon\ndef perimeter_pentagon(side_length):\n    # Calculate the perimeter by multiplying side length by 5 (since there are 5 sides)\n    return side_length * 5\n\n# Test the function with provided data points\nassert perimeter_pentagon(5) == 25", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/143": [{"task_id": "Mbpp/143", "solution": "\"\"\"\nWrite a function to find number of lists present in the given tuple.\nassert find_lists(([1, 2, 3, 4], [5, 6, 7, 8])) == 2\n\"\"\"\ndef find_lists(tup):\n    # Initialize count of lists\n    count = 0\n    # Iterate over each element in the tuple\n    for item in tup:\n        # Check if the element is a list\n        if isinstance(item, list):\n            # Increment count\n            count += 1\n    # Return the total count of lists\n    return count\n\n# Test cases\nassert find_lists(([1, 2, 3, 4], [5, 6, 7, 8])) == 2", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/238": [{"task_id": "Mbpp/238", "solution": "\"\"\"\nWrite a python function to count the number of non-empty substrings of a given string.\nassert number_of_substrings(\"abc\") == 6\n\"\"\"\ndef number_of_substrings(s):\n    return len(s) * (len(s) + 1) // 2\n\n# Test cases\nassert number_of_substrings(\"abc\") == 6\nassert number_of_substrings(\"\") == 0\nassert number_of_substrings(\"a\") == 1\nassert number_of_substrings(\"aa\") == 3\nassert number_of_substrings(\"ab\") == 3\nassert number_of_substrings(\"aba\") == 7\nassert number_of_substrings(\"abcdef\") == 28", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/229": [{"task_id": "Mbpp/229", "solution": "\"\"\"\nWrite a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nassert re_arrange_array([-1, 2, -3, 4, 5, 6, -7, 8, 9], 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9]\n\"\"\"\ndef re_arrange_array(arr, n):\n    # Separate negative and positive numbers into two lists\n    negatives = [x for x in arr if x < 0]\n    positives = [x for x in arr if x >= 0]\n    \n    # Reconstruct the array with negative numbers first, then positive numbers\n    result = negatives[:n] + positives[n:]\n    \n    return result\n\n# Test the function\nassert re_arrange_array([-1, 2, -3, 4, 5, 6, -7, 8, 9], 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9]", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/172": [{"task_id": "Mbpp/172", "solution": "\"\"\"\nWrite a function to count the number of occurence of the string 'std' in a given string.\nassert count_occurance(\"letstdlenstdporstd\") == 3\n\"\"\"\ndef count_occurance(s):\n    return s.count('std')\n\n# Test cases\nassert count_occurance(\"letstdlenstdporstd\") == 3\nassert count_occurance(\"stdstdstd\") == 3\nassert count_occurance(\"std\") == 1\nassert count_occurance(\"\") == 0\nassert count_occurance(\"stdstdstdstd\") == 4", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/245": [{"task_id": "Mbpp/245", "solution": "\"\"\"\nWrite a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nassert max_sum([1, 15, 51, 45, 33, 100, 12, 18, 9]) == 194\n\"\"\"\ndef max_sum(arr):\n    n = len(arr)\n    # Initialize the dp arrays\n    inc = [0] * n\n    dec = [0] * n\n    # Fill the inc array\n    for i in range(1, n):\n        if arr[i] > arr[i-1]:\n            inc[i] = inc[i-1] + 1\n    # Fill the dec array\n    for i in range(n-2, -1, -1):\n        if arr[i] > arr[i+1]:\n            dec[i] = dec[i+1] + 1\n    # Calculate the maximum sum of bitonic subsequence\n    return sum(max(inc[i] + dec[i], arr[i]) for i in range(n))\n\n# Test the function", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[[10, 9, 8, 7, 6, 5, 4, 4, 3, 2, 1]]]}], "Mbpp/160": [{"task_id": "Mbpp/160", "solution": "\"\"\"\nWrite a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\nassert find_solution(2, 3, 7) == (2, 1)\n\"\"\"\ndef find_solution(a, b, n):\n    # Iterate over possible values of x\n    for x in range(n // a + 1):\n        # Calculate the corresponding value of y\n        y = (n - a * x) / b\n        # Check if y is an integer\n        if y.is_integer():\n            return (x, int(y))\n    # If no solution is found, return None\n    return None\n\n# Test cases to verify the correctness of the function\nassert find_solution(2, 3, 7) == (2, 1)\nassert find_solution(5, 4, 0) == (0, 0)\nassert find_solution(6, 8, 10) == (2, 1)\nassert find_solution(1, 2, 3) == None", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/232": [{"task_id": "Mbpp/232", "solution": "\"\"\"\nWrite a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\nassert set(larg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],2))==set([100,90])\n\"\"\"\ndef larg_nnum(lst, n):\n    # Sort the list in descending order\n    lst.sort(reverse=True)\n    # Return the first n elements of the sorted list\n    return lst[:n]\n\n# Test cases to verify the correctness of the function\nassert set(larg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],2)) == set([100, 90])\n\n# Additional test case\nassert set(larg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],3)) == set([100, 90, 80])", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/167": [{"task_id": "Mbpp/167", "solution": "\"\"\"\nWrite a python function to find the smallest power of 2 greater than or equal to n.\nassert next_power_of_2(0) == 1\n\"\"\"\ndef next_power_of_2(n):\n    \"\"\"\n    Find the smallest power of 2 greater than or equal to n.\n\n    Args:\n    n (int): The number to find the next power of 2 for.\n\n    Returns:\n    int: The next power of 2.\n    \"\"\"\n    if n <= 0:\n        return 1\n    else:\n        return 2 ** (n.bit_length() + 1)\n\n# Test cases\nassert next_power_of_2(0) == 1\nassert next_power_of_2(5) == 8\nassert next_power_of_2(16) == 32\nassert next_power_of_2(17) == 32\nassert next_power_of_2(100) == 1024", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/230": [{"task_id": "Mbpp/230", "solution": "\"\"\"\nWrite a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\nassert replace_blank(\"hello people\",'@')==(\"hello@people\")\n\"\"\"\ndef replace_blank(s, c):\n    return s.replace(' ', c)\n\n# Test cases to verify the correctness of the solution\nassert replace_blank(\"hello people\", '@') == \"hello@people\"\nassert replace_blank(\"hello world\", 'x') == \"helloxworld\"\nassert replace_blank(\"Python programming\", '#') == \"Python#programming\"", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/249": [{"task_id": "Mbpp/249", "solution": "\"\"\"\nWrite a function to find the intersection of two arrays.\nassert intersection_array([1, 2, 3, 5, 7, 8, 9, 10],[1, 2, 4, 8, 9])==[1, 2, 8, 9]\n\"\"\"\ndef intersection_array(arr1, arr2):\n    # Use set intersection to find common elements between two lists\n    return list(set(arr1) & set(arr2))\n\n# Test the function with provided data points\nassert intersection_array([1, 2, 3, 5, 7, 8, 9, 10], [1, 2, 4, 8, 9]) == [1, 2, 8, 9]", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/233": [{"task_id": "Mbpp/233", "solution": "\"\"\"\nWrite a function to find the lateral surface area of a cylinder.\nassert math.isclose(lateralsuface_cylinder(10,5), 314.15000000000003, rel_tol=0.001)\n\"\"\"\nimport math\n\ndef lateralsurface_cylinder(radius, height):\n    \"\"\"\n    Calculate the lateral surface area of a cylinder.\n\n    Args:\n    radius (float): The radius of the cylinder's base.\n    height (float): The height of the cylinder.\n\n    Returns:\n    float: The lateral surface area of the cylinder.\n    \"\"\"\n    return 2 * math.pi * radius * height\n\n# Test the function\nassert math.isclose(lateralsurface_cylinder(10,5), 314.15000000000003, rel_tol=0.001)", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/137": [{"task_id": "Mbpp/137", "solution": "\"\"\"\nWrite a function to find the ratio of zeroes to non-zeroes in an array of integers.\nassert math.isclose(zero_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]), 0.181818, rel_tol=0.001)\n\"\"\"\nimport math\n\ndef zero_count(arr):\n    return sum(1 for x in arr if x == 0) / len(arr)\n\n# Test the function\nassert math.isclose(zero_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]), 0.181818, rel_tol=0.001)", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/252": [{"task_id": "Mbpp/252", "solution": "\"\"\"\nWrite a python function to convert complex numbers to polar coordinates.\nassert convert(1) == (1.0, 0.0)\n\"\"\"\n# Define the function to convert complex numbers to polar coordinates\ndef convert(complex_num):\n    # Use the cmath module to calculate the magnitude and phase of the complex number\n    magnitude = abs(complex_num)\n    phase = cmath.phase(complex_num)\n    return magnitude, phase\n\n# Test the function with provided data points\nassert convert(1) == (1.0, 0.0)", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/234": [{"task_id": "Mbpp/234", "solution": "\"\"\"\nWrite a function to find the volume of a cube given its side length.\nassert volume_cube(3)==27\n\"\"\"\n# Define the function to calculate the volume of a cube\ndef volume_cube(side_length):\n    # Calculate the volume using the formula: side_length^3\n    return side_length ** 3\n\n# Test the function with the provided assertion\nassert volume_cube(3) == 27", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/235": [{"task_id": "Mbpp/235", "solution": "\"\"\"\nWrite a python function to set all even bits of a given number.\nassert even_bit_set_number(10) == 10\n\"\"\"\ndef even_bit_set_number(n):\n    # Initialize result as n itself\n    result = n\n    \n    # Iterate through each bit position\n    for i in range(32):  # Assuming 32-bit integer for demonstration\n        # Set the ith bit if it's even (i.e., i % 2 == 0)\n        if i % 2 == 0:\n            result |= (1 << i)\n    \n    return result\n\n# Test cases to verify the correctness of the function\nassert even_bit_set_number(10) == 10\nassert even_bit_set_number(8) == 8\nassert even_bit_set_number(7) == 8\nassert even_bit_set_number(6) == 8\nassert even_bit_set_number(5) == 8\nassert even_bit_set_number(4) == 8\nassert even_bit_set_number(3) == 8\nassert even_bit_set_number(2) == 8\nassert even_bit_set_number(1) == 8\nassert even_bit_set_number(0) == 0", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/168": [{"task_id": "Mbpp/168", "solution": "\"\"\"\nWrite a function to count the number of occurrences of a number in a given list.\nassert frequency([1,2,3], 4) == 0\n\"\"\"\ndef frequency(lst, num):\n    return lst.count(num)\n\n# Test cases\nassert frequency([1,2,3], 4) == 0\nassert frequency([1,2,3,4,5,6,7,8,9,10], 5) == 1\nassert frequency([], 5) == 0\nassert frequency([1,1,1,1,1], 1) == 5\nassert frequency([10,20,30,40,50], 10) == 1\nassert frequency([10,20,30,40,50,10,20,30,40,50], 10) == 2", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/240": [{"task_id": "Mbpp/240", "solution": "\"\"\"\nWrite a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\nassert replace_list([1, 3, 5, 7, 9, 10],[2, 4, 6, 8])==[1, 3, 5, 7, 9, 2, 4, 6, 8]\n\"\"\"\ndef replace_list(list1, list2):\n    # Replace the last element of list1 with the elements of list2\n    list1[-1:] = list2\n    return list1\n\n# Test cases to verify the correctness of the function\nassert replace_list([1, 3, 5, 7, 9, 10], [2, 4, 6, 8]) == [1, 3, 5, 7, 9, 2, 4, 6, 8]", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/242": [{"task_id": "Mbpp/242", "solution": "\"\"\"\nWrite a function to count the total number of characters in a string.\nassert count_charac(\"python programming\")==18\n\"\"\"\ndef count_charac(s):\n    return len(s)\n\n# Test cases\nassert count_charac(\"python programming\") == 18", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/250": [{"task_id": "Mbpp/250", "solution": "\"\"\"\nWrite a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\nassert count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),4) == 0\n\"\"\"\ndef count_X(tup, x):\n    return tup.count(x)\n\n# Test cases\nassert count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),4) == 0", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/251": [{"task_id": "Mbpp/251", "solution": "\"\"\"\nWrite a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\nassert insert_element(['Red', 'Green', 'Black'] ,'c')==['c', 'Red', 'c', 'Green', 'c', 'Black']\n\"\"\"\ndef insert_element(lst, element):\n    # Inserting the element at each position of the list\n    return [element] + lst\n\n# Test cases to verify the correctness of the function\nassert insert_element(['Red', 'Green', 'Black'], 'c') == ['c', 'Red', 'c', 'Green', 'c', 'Black']\nassert insert_element([], 'a') == ['a']\nassert insert_element(['b', 'd'], 'e') == ['e', 'b', 'e', 'd']", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/244": [{"task_id": "Mbpp/244", "solution": "\"\"\"\nWrite a python function to find the next perfect square greater than a given number.\nassert next_Perfect_Square(35) == 36\n\"\"\"\n# Importing necessary library\nimport math\n\ndef next_Perfect_Square(n):\n    # Calculate the square root of n\n    sqrt_n = math.sqrt(n)\n    \n    # Check if the square root is an integer\n    if sqrt_n.is_integer():\n        return int(sqrt_n + 1)**2\n    else:\n        return int(sqrt_n)**2\n\n# Test cases to verify the correctness of the function\nassert next_Perfect_Square(35) == 36\nassert next_Perfect_Square(49) == 50\nassert next_Perfect_Square(78) == 81", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/170": [{"task_id": "Mbpp/170", "solution": "\"\"\"\nWrite a function to find the sum of numbers in a list within a range specified by two indices.\nassert sum_range_list([2,1,5,6,8,3,4,9,10,11,8,12], 8, 10) == 29\n\"\"\"\ndef sum_range_list(lst, start_index, end_index):\n    # Check if the indices are valid\n    if start_index < 0 or end_index >= len(lst) or start_index > end_index:\n        raise ValueError(\"Invalid indices\")\n    \n    # Calculate the sum of numbers within the specified range\n    return sum(lst[start_index:end_index+1])\n\n# Test the function with provided data points\nassert sum_range_list([2,1,5,6,8,3,4,9,10,11,8,12], 8, 10) == 29", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[[10, 20, 30, 40, 50, 60, 70, 80, 90, 100], 7, 5]]}], "Mbpp/96": [{"task_id": "Mbpp/96", "solution": "\"\"\"\nWrite a python function to find the number of divisors of a given integer.\nassert divisor(15) == 4\n\"\"\"\ndef divisor(n):\n    count = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            count += 1\n    return count\n\n# Test cases\nassert divisor(15) == 4\nassert divisor(28) == 6\nassert divisor(37) == 2\nassert divisor(49) == 3", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/237": [{"task_id": "Mbpp/237", "solution": "\"\"\"\nWrite a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\nassert check_occurences([(3, 1), (1, 3), (2, 5), (5, 2), (6, 3)] ) == {(1, 3): 2, (2, 5): 2, (3, 6): 1}\n\"\"\"\ndef check_occurrences(tuples_list):\n    # Create an empty dictionary to store the occurrences\n    occurrence_dict = {}\n    \n    # Iterate over each tuple in the list\n    for tup in tuples_list:\n        # If the tuple is already in the dictionary, increment its count\n        if tup in occurrence_dict:\n            occurrence_dict[tup] += 1\n        # If the tuple is not in the dictionary, add it with a count of 1\n        else:\n            occurrence_dict[tup] = 1\n    \n    return occurrence_dict\n\n# Test cases to verify the correctness of the function\nassert check_occurrences([(3, 1), (1, 3), (2, 5), (5, 2), (6, 3)]) == {(1, 3): 2, (2, 5): 2, (3, 6): 1}", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/253": [{"task_id": "Mbpp/253", "solution": "\"\"\"\nWrite a python function that returns the number of integer elements in a given list.\nassert count_integer([1,2,'abc',1.2]) == 2\n\"\"\"\ndef count_integer(lst):\n    return sum(isinstance(x, int) for x in lst)\n\n# Test cases to verify the correctness of the function\nassert count_integer([1,2,'abc',1.2]) == 2\nassert count_integer(['hello', 'world']) == 0\nassert count_integer([True, False, True, True]) == 4\nassert count_integer([]) == 0", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/223": [{"task_id": "Mbpp/223", "solution": "\"\"\"\nWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nassert is_majority([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n\"\"\"\ndef is_majority(arr, n, x):\n    # Check if x is present in arr\n    if x not in arr:\n        return False\n    \n    # Find the index of the first occurrence of x\n    index = arr.index(x)\n    \n    # Check if x is the majority element\n    count = 0\n    for i in range(index, n):\n        if arr[i] == x:\n            count += 1\n    if count > n // 2:\n        return True\n    else:\n        return False\n\n# Test cases\nassert is_majority([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\nassert is_majority([5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/247": [{"task_id": "Mbpp/247", "solution": "\"\"\"\nWrite a function to find the length of the longest palindromic subsequence in the given string.\nassert lps(\"TENS FOR TENS\") == 5\n\"\"\"\ndef lps(s):\n    # Create a table to store results of subproblems\n    n = len(s)\n    dp = [[0] * n for _ in range(n)]\n    \n    # Fill the table\n    for i in range(n - 1, -1, -1):\n        for j in range(i + 1, n):\n            if s[i] == s[j]:\n                dp[i][j] = 2 + dp[i + 1][j - 1]\n            else:\n                dp[i][j] = max(dp[i + 1][j], dp[i][j - 1])\n    \n    # The length of the longest palindromic subsequence is the value at dp[0][n-1]\n    return dp[0][n - 1]\n\n# Test cases\nassert lps(\"TENS FOR TENS\") == 5\nassert lps(\"GEEKS FOR GEEKS\") == 7\nassert lps(\"ABCD\") == 0\nassert lps(\"A\") == 1\nassert lps(\"BB\") == 2", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/162": [{"task_id": "Mbpp/162", "solution": "\"\"\"\nWrite a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\nassert sum_series(6) == 12\n\"\"\"\ndef sum_series(n):\n    # Initialize the sum to 0\n    total_sum = 0\n    \n    # Iterate over the range from 0 to n//2\n    for i in range(n // 2):\n        # Add the current term to the total sum\n        total_sum += n - 2 * i\n    \n    return total_sum\n\n# Test cases to verify the correctness of the function\nassert sum_series(6) == 12", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[9]], "plus_fail_tests": [[1]]}], "Mbpp/287": [{"task_id": "Mbpp/287", "solution": "\"\"\"\nWrite a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\nassert square_Sum(2) == 20\n\"\"\"\ndef square_Sum(n):\n    # Initialize sum to zero\n    sum = 0\n    \n    # Iterate through the first n even numbers\n    for i in range(1, n+1):\n        # Add the square of the current number to the sum\n        sum += (2*i)**2\n    \n    return sum\n\n# Test cases to verify the correctness of the function\nassert square_Sum(2) == 20\nassert square_Sum(3) == 56\nassert square_Sum(4) == 80\nassert square_Sum(5) == 130", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/256": [{"task_id": "Mbpp/256", "solution": "\"\"\"\nWrite a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\nassert count_Primes_nums(5) == 2\n\"\"\"\ndef count_prime_nums(n):\n    # Initialize a counter for prime numbers\n    prime_count = 0\n    \n    # Iterate through all numbers from 2 to n-1\n    for num in range(2, n):\n        # Check if the current number is prime\n        if num > 1:\n            # Use a helper function to check primality\n            if is_prime(num):\n                prime_count += 1\n                \n    return prime_count\n\n# Helper function to check if a number is prime\ndef is_prime(num):\n    # Check divisibility from 2 to the square root of the number\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\n# Test cases to verify the correctness of the solution\nassert count_prime_nums(5) == 2\nassert count_prime_nums(10) == 4\nassert count_prime_nums(0) == 0\nassert count_prime_nums(1) == 0", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/267": [{"task_id": "Mbpp/267", "solution": "\"\"\"\nWrite a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\nassert square_Sum(2) == 10\n\"\"\"\ndef square_Sum(n):\n    # Initialize sum to zero\n    total_sum = 0\n    \n    # Loop through the first n odd numbers\n    for i in range(1, 2*n+1, 2):\n        # Add the square of each number to the total sum\n        total_sum += i**2\n    \n    return total_sum\n\n# Test cases to verify the correctness of the function\nassert square_Sum(2) == 10\nassert square_Sum(3) == 15\nassert square_Sum(4) == 30\nassert square_Sum(5) == 55", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/390": [{"task_id": "Mbpp/390", "solution": "\"\"\"\nWrite a function to apply a given format string to all of the elements in a list.\nassert add_string([1,2,3,4],'temp{0}')==['temp1', 'temp2', 'temp3', 'temp4']\n\"\"\"\ndef add_string(lst, fmt):\n    return [fmt.format(i) for i in lst]\n\n# Test the function\nassert add_string([1, 2, 3, 4], 'temp{0}') == ['temp1', 'temp2', 'temp3', 'temp4']", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/306": [{"task_id": "Mbpp/306", "solution": "\"\"\"\nWrite a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nassert max_sum_increasing_subseq([1, 101, 2, 3, 100, 4, 5 ], 7, 4, 6) == 11\n\"\"\"\ndef max_sum_increasing_subseq(nums, k, i, j):\n    # Initialize the result array with zeros\n    res = [0] * len(nums)\n    \n    # Iterate through each element in the nums list\n    for idx, num in enumerate(nums):\n        # If the current number is greater than the previous one, update the result\n        if idx > 0 and nums[idx - 1] < num:\n            res[idx] = res[idx - 1] + num\n        else:\n            res[idx] = num\n    \n    # Find the maximum value in the result array up to index k-1\n    max_val = max(res[:k])\n    \n    # Calculate the sum of the remaining elements starting from k+1\n    return max_val + nums[k]\n\n# Test cases\nassert max_sum_increasing_subseq([1, 101, 2, 3, 100, 4, 5 ], 7, 4, 6) == 11\nassert max_sum_increasing_subseq([1, 101, 2, 3, 100, 4, 5 ], 8, 4, 6) == 11\nassert max_sum_increasing_subseq([1, 101, 2, 3, 100, 4, 5 ], 9, 4, 6) == 11\nassert max_sum_increasing_subseq([1, 101, 2, 3, 100, 4, 5 ], 10, 4, 6) == 11\nassert max_sum_increasing_subseq([1, 101, 2, 3, 100, 4, 5 ], 11, 4, 6) == 11\nassert max_sum_increasing_subseq([1, 101, 2, 3, 100, 4, 5 ], 12, 4, 6) == 11\nassert max_sum_increasing_subseq([1, 101, 2, 3, 100, 4, 5 ], 13, 4, 6) == 11\nassert max_sum_increasing_subseq([1, 101, 2, 3, 100, 4, 5 ], 14, 4, 6) == 11\nassert max_sum_increasing_subseq([1, 101, 2, 3, 100, 4, 5 ], 15, 4, 6) == 11\nassert max_sum_increasing_subseq([1, 101, 2, 3, 100, 4, 5 ], 16, 4, 6) == 11\nassert max_sum_increasing_subseq([1, 101, 2, 3, 100, 4, 5 ], 17, 4, 6) == 11\nassert max_sum_increasing_subseq([1, 101, 2, 3, 100, 4, 5 ], 18, 4, 6) == 11\nassert max_sum_increasing_subseq([1, 101, 2, 3, 100, 4, 5 ], 19, 4, 6", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/286": [{"task_id": "Mbpp/286", "solution": "\"\"\"\nWrite a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\nassert max_sub_array_sum_repeated([10, 20, -30, -1], 4, 3) == 30\n\"\"\"\ndef max_sub_array_sum_repeated(arr, n, k):\n    # Calculate the total length of the repeated array\n    total_length = n * k\n    \n    # Initialize variables to store the maximum sum and the current sum\n    max_sum = float('-inf')\n    current_sum = 0\n    \n    # Iterate through each element in the repeated array\n    for i in range(total_length):\n        # Add the current element to the current sum\n        current_sum += arr[i % n]\n        \n        # Update the maximum sum if the current sum is greater than the maximum sum\n        if current_sum > max_sum:\n            max_sum = current_sum\n        \n        # Reset the current sum if it becomes negative\n        if current_sum < 0:\n            current_sum = 0\n    \n    return max_sum\n\n# Test the function with provided data points\nassert max_sub_array_sum_repeated([10, 20, -30, -1], 4, 3) == 30", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/391": [{"task_id": "Mbpp/391", "solution": "\"\"\"\nWrite a function to convert more than one list to nested dictionary.\nassert convert_list_dictionary([\"S001\", \"S002\", \"S003\", \"S004\"],[\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"] ,[85, 98, 89, 92])==[{'S001': {'Adina Park': 85}}, {'S002': {'Leyton Marsh': 98}}, {'S003': {'Duncan Boyle': 89}}, {'S004': {'Saim Richards': 92}}]\n\"\"\"\ndef convert_list_dictionary(lists):\n    result = []\n    for i in range(len(lists)):\n        result.append({lists[i][0]: lists[i][1]})\n    return result\n\n# Test case\nassert convert_list_dictionary([\"S001\", \"S002\", \"S003\", \"S004\"], [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], [85, 98, 89, 92]) == [{'S001': 'Adina Park'}, {'S002': 'Leyton Marsh'}, {'S003': 'Duncan Boyle'}, {'S004': 'Saim Richards'}]", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/266": [{"task_id": "Mbpp/266", "solution": "\"\"\"\nWrite a function to find the lateral surface area of a cube given its side length.\nassert lateralsurface_cube(5)==100\n\"\"\"\ndef lateralsurface_cube(side_length):\n    \"\"\"\n    Calculate the lateral surface area of a cube.\n\n    Parameters:\n    side_length (float): The length of one side of the cube.\n\n    Returns:\n    float: The lateral surface area of the cube.\n    \"\"\"\n    # Lateral surface area formula for a cube: 4 * side_length^2\n    return 4 * side_length ** 2\n\n# Test cases to verify the correctness of the function\nassert lateralsurface_cube(5) == 100\nassert lateralsurface_cube(3) == 54\nassert lateralsurface_cube(7) == 294", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/278": [{"task_id": "Mbpp/278", "solution": "\"\"\"\nWrite a function to find the number of elements that occurs before the tuple element in the given tuple.\nassert count_first_elements((1, 5, 7, (4, 6), 10) ) == 3\n\"\"\"\ndef count_first_elements(tup):\n    # Initialize a counter for the first elements\n    count = 0\n    # Iterate through each element in the tuple\n    for element in tup:\n        # Check if the current element is not a tuple itself\n        if isinstance(element, tuple):\n            # If it's a tuple, increment the counter\n            count += 1\n    # Return the total count of first elements\n    return count\n\n# Test cases to verify the correctness of the function\nassert count_first_elements((1, 5, 7, (4, 6), 10)) == 3\nassert count_first_elements((1, 2, 3, (4, 5, 6), 7, 8, 9, 10)) == 4\nassert count_first_elements(('a', 'b', ('c', 'd'), 'e')) == 2\nassert count_first_elements(('x', 'y', 'z')) == 0\nassert count_first_elements((1, 2, 3, 4, 5, 6, 7, 8, 9, 10)) == 10", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/284": [{"task_id": "Mbpp/284", "solution": "\"\"\"\nWrite a function that takes in a list and element and checks whether all items in the list are equal to the given element.\nassert check_element([\"green\", \"orange\", \"black\", \"white\"],'blue')==False\n\"\"\"\ndef check_element(lst, element):\n    return all(item == element for item in lst)\n\n# Test cases\nassert check_element([\"green\", \"orange\", \"black\", \"white\"], 'blue') == False\nassert check_element([10, 20, 30], 10) == True\nassert check_element([], 5) == True\nassert check_element(['apple', 'banana'], 'apple') == True", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/259": [{"task_id": "Mbpp/259", "solution": "\"\"\"\nWrite a function to maximize the given two tuples.\nassert maximize_elements(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((6, 7), (4, 9), (2, 9), (7, 10))\n\"\"\"\ndef maximize_elements(tuple1, tuple2):\n    # Initialize an empty list to store the result\n    result = []\n    \n    # Iterate over each element in the first tuple\n    for item1 in tuple1:\n        # Find the maximum value in the second tuple for this item from the first tuple\n        max_value = max(item2[0] if item1[0] > item2[0] else item2[1], item2[0] if item1[0] < item2[0] else item2[1])\n        \n        # Append the pair of the maximum values to the result list\n        result.append((max_value, max_value))\n    \n    # Return the result list\n    return result\n\n# Test the function with the provided data points\nassert maximize_elements(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((6, 7), (4, 9), (2, 9), (7, 10))", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/305": [{"task_id": "Mbpp/305", "solution": "\"\"\"\nWrite a function to return two words from a list of words starting with letter 'p'.\nassert start_withp([\"Python PHP\", \"Java JavaScript\", \"c c++\"])==('Python', 'PHP')\n\"\"\"\ndef start_withp(words):\n    # Filter the list to include only words starting with 'p'\n    filtered_words = [word for word in words if word.startswith('p')]\n    # Return the first two elements of the filtered list\n    return (filtered_words[0], filtered_words[1])\n\n# Test cases to verify the correctness of the function\nassert start_withp([\"Python PHP\", \"Java JavaScript\", \"c c++\"]) == ('Python', 'PHP')\nassert start_withp([\"apple banana\", \"pear orange\", \"grape grapefruit\"]) == ('apple', 'pear')\nassert start_withp([\"hello world\", \"python python\", \"java java\"]) == ('hello', 'python')\nassert start_withp([\"apple\", \"banana\", \"orange\"]) == ('apple', 'banana')\nassert start_withp([\"panda\", \"parrot\", \"penguin\"]) == ('panda', 'parrot')", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/281": [{"task_id": "Mbpp/281", "solution": "\"\"\"\nWrite a python function to check if the elements of a given list are unique or not.\nassert all_unique([1,2,3]) == True\n\"\"\"\n# Define the function to check if all elements in a list are unique\ndef all_unique(lst):\n    # Convert the list to a set to remove duplicates\n    return len(lst) == len(set(lst))\n\n# Test cases to verify the correctness of the function\nassert all_unique([1, 2, 3]) == True\nassert all_unique([1, 2, 2]) == False\nassert all_unique([]) == True\nassert all_unique([42]) == True\nassert all_unique([-1, -1, -1]) == True\nassert all_unique(['a', 'b', 'c']) == True\nassert all_unique(['a', 'b', 'a']) == False", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/392": [{"task_id": "Mbpp/392", "solution": "\"\"\"\nWrite a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nassert get_max_sum(60) == 106\n\"\"\"\ndef get_max_sum(n):\n    # Base cases for recursion\n    if n < 2:\n        return n\n    # Recursive case: calculate the sum of the function values at different points\n    return max(get_max_sum(n // 2), get_max_sum(n // 3), get_max_sum(n // 4), get_max_sum(n // 5))\n\n# Test the function with provided data point\nassert get_max_sum(60) == 106", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/396": [{"task_id": "Mbpp/396", "solution": "\"\"\"\nWrite a function to check whether the given string starts and ends with the same character or not.\nassert check_char(\"abba\") == \"Valid\"\n\"\"\"\n# Define the function to check if a string starts and ends with the same character\ndef check_char(s):\n    # Check if the first character is the same as the last character\n    return s[0] == s[-1]\n\n# Test cases to verify the correctness of the function\nassert check_char(\"abba\") == \"Valid\"  # The string \"abba\" starts and ends with the same character\nassert check_char(\"hello\") == \"Invalid\"  # The string \"hello\" does not start and end with the same character\nassert check_char(\"racecar\") == \"Valid\"  # The string \"racecar\" starts and ends with the same character\nassert check_char(\"python\") == \"Invalid\"  # The string \"python\" does not start and end with the same character", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/283": [{"task_id": "Mbpp/283", "solution": "\"\"\"\nWrite a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nassert validate(1234) == True\n\"\"\"\ndef validate(n):\n    # Convert the number to a string for easier manipulation\n    n_str = str(n)\n    \n    # Iterate over each character in the string representation of the number\n    for i in range(len(n_str)):\n        # Check if the current digit is greater than its index (i.e., the digit is not less than the index)\n        if int(n_str[i]) > i:\n            return False\n    \n    return True\n\n# Test cases to verify the correctness of the function\nassert validate(1234) == True\nassert validate(567890) == True\nassert validate(111111) == True\nassert validate(1234567890) == True\nassert validate(12345678901) == True\nassert validate(123456789012) == True\nassert validate(1234567890123) == True\nassert validate(12345678901234) == True\nassert validate(123456789012345) == True\nassert validate(1234567890123456) == True\nassert validate(12345678901234567) == True\nassert validate(123456789012345678) == True\nassert validate(1234567890123456789) == True\nassert validate(12345678901234567890) == True\nassert validate(123456789012345678901) == True\nassert validate(1234567890123456789012) == True\nassert validate(12345678901234567890123) == True\nassert validate(123456789012345678901234) == True\nassert validate(1234567890123456789012345) == True\nassert validate(12345678901234567890123456) == True\nassert validate(123456789012345678901234567) == True\nassert validate(1234567890123456789012345678) == True\nassert validate(12345678901234567890123456789) == True\nassert validate(123456789012345678901234567890) == True\nassert validate(1234567890123456789012345678901) == True\nassert validate(1234567890123456789012", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/273": [{"task_id": "Mbpp/273", "solution": "\"\"\"\nWrite a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\nassert substract_elements((10, 4, 5), (2, 5, 18)) == (8, -1, -13)\n\"\"\"\ndef substract_elements(tuple1, tuple2):\n    # Use list comprehension to subtract each element of tuple1 from the corresponding element of tuple2\n    result = [x - y for x, y in zip(tuple1, tuple2)]\n    return tuple(result)\n\n# Test cases\nassert substract_elements((10, 4, 5), (2, 5, 18)) == (8, -1, -13)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/296": [{"task_id": "Mbpp/296", "solution": "\"\"\"\nWrite a python function to count inversions in an array.\nassert get_Inv_Count([1,20,6,4,5]) == 5\n\"\"\"\ndef get_Inv_Count(arr):\n    # Initialize inversion count\n    inv_count = 0\n    \n    # Iterate through each element in the array\n    for i in range(len(arr)):\n        # For each element, iterate through all elements after it\n        for j in range(i + 1, len(arr)):\n            # If the current element is greater than any element after it, increment inversion count\n            if arr[i] > arr[j]:\n                inv_count += 1\n                \n    return inv_count\n\n# Test the function with provided data points\nassert get_Inv_Count([1,20,6,4,5]) == 5", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/292": [{"task_id": "Mbpp/292", "solution": "\"\"\"\nWrite a python function to find quotient of two numbers (rounded down to the nearest integer).\nassert find(10,3) == 3\n\"\"\"\ndef find(a, b):\n    # Use floor division to get the quotient rounded down to the nearest integer\n    return a // b\n\n# Test cases to verify the correctness of the function\nassert find(10, 3) == 3\nassert find(25, 4) == 6\nassert find(-10, 3) == -4\nassert find(0, 5) == 0\nassert find(5, -5) == -1", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/405": [{"task_id": "Mbpp/405", "solution": "\"\"\"\nWrite a function to check whether an element exists within a tuple.\nassert check_tuplex((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"),'r')==True\n\"\"\"\n# Define the function to check if an element exists in a tuple\ndef check_tuplex(tup, element):\n    # Use the 'in' keyword to check for the presence of the element in the tuple\n    return element in tup\n\n# Test the function with provided data points\nassert check_tuplex((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"), 'r') == True", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/311": [{"task_id": "Mbpp/311", "solution": "\"\"\"\nWrite a python function to set the left most unset bit.\nassert set_left_most_unset_bit(10) == 14\n\"\"\"\ndef set_left_most_unset_bit(n):\n    # Initialize the result as n itself\n    result = n\n    \n    # Loop until we find the first unset bit\n    while (result & 1) == 1:\n        # Right shift the result by one position\n        result >>= 1\n    \n    # Add 1 to the result to set the leftmost unset bit\n    return result + 1\n\n# Test cases to verify the correctness of the function\nassert set_left_most_unset_bit(10) == 14\nassert set_left_most_unset_bit(7) == 9\nassert set_left_most_unset_bit(8) == 9\nassert set_left_most_unset_bit(255) == 256\nassert set_left_most_unset_bit(0) == 1", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/300": [{"task_id": "Mbpp/300", "solution": "\"\"\"\nWrite a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\nassert math.isclose(count_binary_seq(1), 2.0, rel_tol=0.001)\n\"\"\"\nimport math\n\ndef count_binary_seq(n):\n    # Calculate the number of ways to have an equal number of '1's and '0's in the first half of the sequence\n    # This can be calculated using the binomial coefficient formula: C(n/2, n/2) = n!/((n/2)!^2)\n    if n % 2 != 0:\n        return 0\n    else:\n        return math.factorial(n) // (math.factorial(n//2)**2)\n\n# Test cases\nassert math.isclose(count_binary_seq(1), 2.0, rel_tol=0.001)\nassert math.isclose(count_binary_seq(2), 6.0, rel_tol=0.001)\nassert math.isclose(count_binary_seq(3), 18.0, rel_tol=0.001)\nassert math.isclose(count_binary_seq(4), 54.0, rel_tol=0.001)\nassert math.isclose(count_binary_seq(5), 162.0, rel_tol=0.001)\nassert math.isclose(count_binary_seq(6), 432.0, rel_tol=0.001)\nassert math.isclose(count_binary_seq(7), 1296.0, rel_tol=0.001)\nassert math.isclose(count_binary_seq(8), 3456.0, rel_tol=0.001)\nassert math.isclose(count_binary_seq(9), 10368.0, rel_tol=0.001)\nassert math.isclose(count_binary_seq(10), 30720.0, rel_tol=0.001)", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/261": [{"task_id": "Mbpp/261", "solution": "\"\"\"\nWrite a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\nassert division_elements((10, 4, 6, 9),(5, 2, 3, 3)) == (2, 2, 2, 3)\n\"\"\"\ndef division_elements(tuple1, tuple2):\n    # Ensure both tuples have the same length\n    if len(tuple1) != len(tuple2):\n        raise ValueError(\"Both tuples must be of the same length.\")\n    \n    # Perform element-wise division\n    result = tuple(x / y for x, y in zip(tuple1, tuple2))\n    \n    return result\n\n# Test the function with provided data points\nassert division_elements((10, 4, 6, 9), (5, 2, 3, 3)) == (2, 2, 2, 3)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/257": [{"task_id": "Mbpp/257", "solution": "\"\"\"\nWrite a function that takes in two numbers and returns a tuple with the second number and then the first number.\nassert swap_numbers(10,20)==(20,10)\n\"\"\"\n# Define the function to swap the order of two numbers\ndef swap_numbers(x, y):\n    # Return a tuple containing the second number followed by the first number\n    return (y, x)\n\n# Test the function with provided data points\nassert swap_numbers(10, 20) == (20, 10)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/299": [{"task_id": "Mbpp/299", "solution": "\"\"\"\nWrite a function to calculate the maximum aggregate from the list of tuples.\nassert max_aggregate([('Juan Whelan',90),('Sabah Colley',88),('Peter Nichols',7),('Juan Whelan',122),('Sabah Colley',84)])==('Juan Whelan', 212)\n\"\"\"\ndef max_aggregate(tuples):\n    # Initialize variables to store the name and highest score\n    name = \"\"\n    highest_score = 0\n    \n    # Iterate through each tuple in the list\n    for name, score in tuples:\n        # Update the name and highest score if a higher score is found\n        if score > highest_score:\n            highest_score = score\n            name = name\n    \n    # Return the name and highest score as a tuple\n    return (name, highest_score)\n\n# Test the function with provided data points\nassert max_aggregate([('Juan Whelan',90),('Sabah Colley',88),('Peter Nichols',7),('Juan Whelan',122),('Sabah Colley',84)]) == ('Juan Whelan', 212)", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/398": [{"task_id": "Mbpp/398", "solution": "\"\"\"\nWrite a function to compute the sum of digits of each number of a given list.\nassert sum_of_digits([10,2,56])==14\n\"\"\"\ndef sum_of_digits(numbers):\n    # Initialize the sum to zero\n    total_sum = 0\n    \n    # Iterate over each number in the list\n    for num in numbers:\n        # Convert the number to a string to easily iterate over its digits\n        num_str = str(num)\n        \n        # Sum up all the digits in the current number\n        for digit in num_str:\n            total_sum += int(digit)\n    \n    return total_sum\n\n# Test cases to verify the correctness of the function\nassert sum_of_digits([10,2,56]) == 14\nassert sum_of_digits([1,23,4567]) == 28\nassert sum_of_digits([999,888,777]) == 27", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/279": [{"task_id": "Mbpp/279", "solution": "\"\"\"\nWrite a function to find the nth decagonal number.\nassert is_num_decagonal(3) == 27\n\"\"\"\ndef is_num_decagonal(n):\n    \"\"\"\n    Calculate the nth decagonal number.\n\n    Args:\n    n (int): The position of the decagonal number.\n\n    Returns:\n    int: The nth decagonal number.\n    \"\"\"\n    return n * (3*n - 1)\n\n# Test cases to verify the correctness of the function\nassert is_num_decagonal(3) == 27\nassert is_num_decagonal(4) == 56\nassert is_num_decagonal(5) == 78\nassert is_num_decagonal(6) == 102\nassert is_num_decagonal(7) == 132\nassert is_num_decagonal(8) == 168\nassert is_num_decagonal(9) == 204\nassert is_num_decagonal(10) == 240\nassert is_num_decagonal(11) == 280\nassert is_num_decagonal(12) == 320\nassert is_num_decagonal(13) == 360\nassert is_num_decagonal(14) == 400\nassert is_num_decagonal(15) == 440\nassert is_num_decagonal(16) == 480\nassert is_num_decagonal(17) == 520\nassert is_num_decagonal(18) == 560\nassert is_num_decagonal(19) == 600\nassert is_num_decagonal(20) == 640\nassert is_num_decagonal(21) == 680\nassert is_num_decagonal(22) == 720\nassert is_num_decagonal(23) == 760\nassert is_num_decagonal(24) == 800\nassert is_num_decagonal(25) == 840\nassert is_num_decagonal(26) == 880\nassert is_num_decagonal(27) == 920\nassert is_num_decagonal(28) == 960\nassert is_num_decagonal(29) == 1000\nassert is_num_decagonal(30) == 1040\nassert is_num_decagonal(31) == 1080\nassert is_num_decagonal(32) == 1120\nassert is_num_decagonal(33) == 1160\nassert is_num_decagonal(34) == 1200\nassert is_num_decagonal(35) == 1240\nassert is_num_decagonal(36) == 1280\nassert is_num_decagonal(37) == 1320\nassert is_num_decagonal(38) == 1360\nassert is_num_decagonal(39) == 1400\nassert is_num_decagonal(40) == 1440\nassert is_num_decagonal(41) == 1480\nassert is_num_decagonal(42) == 1520\nassert is_num_decagonal(43) == 1560\nassert is_num_decagonal(44) == 1600\nassert is_num_decagonal(45) == 1640\nassert is_num_decagonal(46) == 1680\nassert is_num_decagonal(47) == 1720\nassert is_num_decagonal(48) == 1760", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/293": [{"task_id": "Mbpp/293", "solution": "\"\"\"\nWrite a function to find the third side of a right angled triangle.\nassert otherside_rightangle(7,8)==10.63014581273465\n\"\"\"\nimport math\n\ndef otherside_rightangle(a, b):\n    \"\"\"\n    Calculate the length of the third side of a right-angled triangle given the lengths of the other two sides.\n\n    Parameters:\n    a (float): Length of one side of the right-angled triangle.\n    b (float): Length of another side of the right-angled triangle.\n\n    Returns:\n    float: The length of the third side of the right-angled triangle.\n    \"\"\"\n    return math.sqrt(a**2 + b**2)\n\n# Test cases to verify the correctness of the function\nassert otherside_rightangle(7, 8) == 10.63014581273465", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/400": [{"task_id": "Mbpp/400", "solution": "\"\"\"\nWrite a function to extract the number of unique tuples in the given list.\nassert extract_freq([(3, 4), (1, 2), (4, 3), (5, 6)] ) == 3\n\"\"\"\ndef extract_freq(lst):\n    # Use set to remove duplicates and then convert back to tuple list\n    return len(set(tuple(item) for item in lst))\n\n# Test cases\nassert extract_freq([(3, 4), (1, 2), (4, 3), (5, 6)]) == 3", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/301": [{"task_id": "Mbpp/301", "solution": "\"\"\"\nWrite a function to find the depth of a dictionary.\nassert dict_depth({'a':1, 'b': {'c': {'d': {}}}})==4\n\"\"\"\ndef dict_depth(d):\n    if isinstance(d, dict):\n        return 1 + max(dict_depth(v) for v in d.values())\n    else:\n        return 0\n\n# Test cases\nassert dict_depth({'a':1, 'b': {'c': {'d': {}}}})==4", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/294": [{"task_id": "Mbpp/294", "solution": "\"\"\"\nWrite a function to find the maximum value in a given heterogeneous list.\nassert max_val(['Python', 3, 2, 4, 5, 'version'])==5\n\"\"\"\ndef max_val(heterogeneous_list):\n    # Initialize the maximum value as the first element of the list\n    max_value = heterogeneous_list[0]\n    \n    # Iterate through each item in the heterogeneous list\n    for item in heterogeneous_list:\n        # Update the maximum value if the current item is greater than the previous maximum\n        if item > max_value:\n            max_value = item\n    \n    # Return the maximum value found\n    return max_value\n\n# Test cases to verify the correctness of the function\nassert max_val(['Python', 3, 2, 4, 5, 'version']) == 5\nassert max_val([1, 2, 3, 4, 5]) == 5\nassert max_val([-1, -2, -3, -4, -5]) == -1\nassert max_val(['apple', 'banana', 'cherry']) == 'cherry'", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/277": [{"task_id": "Mbpp/277", "solution": "\"\"\"\nWrite a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\nassert dict_filter({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190},170)=={'Cierra Vega': 175, 'Alden Cantrell': 180, 'Pierre Cox': 190}\n\"\"\"\ndef dict_filter(d, n):\n    return {k: v for k, v in d.items() if v >= n}\n\n# Test cases\nassert dict_filter({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190},170) == {'Cierra Vega': 175, 'Alden Cantrell': 180, 'Pierre Cox': 190}", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/262": [{"task_id": "Mbpp/262", "solution": "\"\"\"\nWrite a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\nassert split_two_parts([1,1,2,3,4,4,5,1],3)==([1, 1, 2], [3, 4, 4, 5, 1])\n\"\"\"\ndef split_two_parts(lst, L):\n    # Splitting the list into two parts\n    first_part = lst[:L]\n    second_part = lst[L:]\n    return (first_part, second_part)\n\n# Test cases to verify the correctness of the function\nassert split_two_parts([1,1,2,3,4,4,5,1],3) == ([1, 1, 2], [3, 4, 4, 5, 1]), \"Test case 1 failed\"\nassert split_two_parts([10, 20, 30, 40, 50], 2) == ([10, 20], [30, 40, 50]), \"Test case 2 failed\"\nassert split_two_parts([], 5) == ([], []), \"Test case 3 failed\"", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/388": [{"task_id": "Mbpp/388", "solution": "\"\"\"\nWrite a python function to find the highest power of 2 that is less than or equal to n.\nassert highest_Power_of_2(10) == 8\n\"\"\"\ndef highest_Power_of_2(n):\n    \"\"\"\n    Find the highest power of 2 that is less than or equal to n.\n\n    Args:\n    n (int): The upper limit for finding the power of 2.\n\n    Returns:\n    int: The highest power of 2 that is less than or equal to n.\n    \"\"\"\n    # Initialize the power of 2 to 1\n    power = 1\n    \n    # Loop until the power of 2 exceeds n\n    while power <= n:\n        # Double the power of 2\n        power *= 2\n    \n    # Return the final value of power which is the highest power of 2 less than or equal to n\n    return power // 2\n\n# Test cases to verify the correctness of the function\nassert highest_Power_of_2(10) == 8\nassert highest_Power_of_2(15) == 8\nassert highest_Power_of_2(30) == 32", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/271": [{"task_id": "Mbpp/271", "solution": "\"\"\"\nWrite a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\nassert even_Power_Sum(2) == 1056\n\"\"\"\ndef even_Power_Sum(n):\n    # Initialize the sum to zero\n    total_sum = 0\n    \n    # Iterate over the first n even natural numbers\n    for i in range(2, 2*n+1, 2):\n        # Raise each number to the fifth power and add it to the total sum\n        total_sum += i**5\n    \n    return total_sum\n\n# Test cases to verify the correctness of the function\nassert even_Power_Sum(2) == 1056\nassert even_Power_Sum(3) == 4896\nassert even_Power_Sum(4) == 17276\nassert even_Power_Sum(5) == 40960\nassert even_Power_Sum(6) == 100000\nassert even_Power_Sum(7) == 196830\nassert even_Power_Sum(8) == 327680\nassert even_Power_Sum(9) == 590490\nassert even_Power_Sum(10) == 1024000", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/265": [{"task_id": "Mbpp/265", "solution": "\"\"\"\nWrite a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\nassert list_split(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n'],3)==[['a', 'd', 'g', 'j', 'm'], ['b', 'e', 'h', 'k', 'n'], ['c', 'f', 'i', 'l']]\n\"\"\"\ndef list_split(lst, n):\n    return [lst[i:i+n] for i in range(0, len(lst), n)]\n\n# Test the function\nassert list_split(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n'], 3) == [['a', 'd', 'g', 'j', 'm'], ['b', 'e', 'h', 'k', 'n'], ['c', 'f', 'i', 'l']]", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/276": [{"task_id": "Mbpp/276", "solution": "\"\"\"\nWrite a function that takes in the radius and height of a cylinder and returns the the volume.\nassert math.isclose(volume_cylinder(10,5), 1570.7500000000002, rel_tol=0.001)\n\"\"\"\nimport math\n\ndef volume_cylinder(radius, height):\n    return math.pi * radius ** 2 * height\n\n# Test the function with provided data points\nassert math.isclose(volume_cylinder(10,5), 1570.7500000000002, rel_tol=0.001)", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[2.951124891044273, 9]]}], "Mbpp/264": [{"task_id": "Mbpp/264", "solution": "\"\"\"\nWrite a function to calculate a dog's age in dog's years.\nassert dog_age(12)==61\n\"\"\"\ndef dog_age(human_years):\n    # The first year of a dog's life is 10.5 human years.\n    if human_years == 1:\n        return 10.5\n    elif human_years == 2:\n        return 21\n    else:\n        # Each additional year after the first two is 4 human years.\n        return 21 + (human_years - 2) * 4\n\n# Test cases\nassert dog_age(12) == 61", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[0]]}], "Mbpp/282": [{"task_id": "Mbpp/282", "solution": "\"\"\"\nWrite a function to subtract two lists element-wise.\nassert sub_list([1, 2, 3],[4,5,6])==[-3,-3,-3]\n\"\"\"\ndef sub_list(list1, list2):\n    # Subtract each element of list2 from list1\n    return [a - b for a, b in zip(list1, list2)]\n\n# Test the function\nassert sub_list([1, 2, 3], [4, 5, 6]) == [-3, -3, -3]", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/280": [{"task_id": "Mbpp/280", "solution": "\"\"\"\nWrite a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\nassert sequential_search([11,23,58,31,56,77,43,12,65,19],31) == (True, 3)\n\"\"\"\ndef sequential_search(arr, element):\n    for i in range(len(arr)):\n        if arr[i] == element:\n            return True, i\n    return False, -1\n\n# Test cases to verify the correctness of the function\nassert sequential_search([11,23,58,31,56,77,43,12,65,19],31) == (True, 3)\nassert sequential_search([11,23,58,31,56,77,43,12,65,19],10) == (False, -1)\nassert sequential_search([], 5) == (False, -1)\nassert sequential_search([5,5,5,5,5], 5) == (True, 0)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/270": [{"task_id": "Mbpp/270", "solution": "\"\"\"\nWrite a python function to find the sum of even numbers at even positions of a list.\nassert sum_even_and_even_index([5, 6, 12, 1, 18, 8]) == 30\n\"\"\"\ndef sum_even_and_even_index(lst):\n    # Initialize sum to zero\n    total_sum = 0\n    \n    # Iterate over the list using enumerate to get both index and value\n    for index, value in enumerate(lst):\n        # Check if the index is even and the value is even\n        if index % 2 == 0 and value % 2 == 0:\n            # Add the value to the total sum\n            total_sum += value\n    \n    # Return the final sum\n    return total_sum\n\n# Test the function with provided data points\nassert sum_even_and_even_index([5, 6, 12, 1, 18, 8]) == 30", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/389": [{"task_id": "Mbpp/389", "solution": "\"\"\"\nWrite a function to find the n'th lucas number.\nassert find_lucas(9) == 76\n\"\"\"\ndef find_lucas(n):\n    if n <= 0:\n        return 0\n    elif n == 1 or n == 2:\n        return 1\n    else:\n        lucas_1 = 1\n        lucas_2 = 1\n        for _ in range(3, n + 1):\n            next_lucas = lucas_1 + lucas_2\n            lucas_1 = lucas_2\n            lucas_2 = next_lucas\n        return lucas_2\n\n# Test cases\nassert find_lucas(9) == 76\nassert find_lucas(1) == 1\nassert find_lucas(2) == 1\nassert find_lucas(3) == 2\nassert find_lucas(4) == 4\nassert find_lucas(5) == 8\nassert find_lucas(6) == 15\nassert find_lucas(7) == 29\nassert find_lucas(8) == 61\nassert find_lucas(9) == 76", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/285": [{"task_id": "Mbpp/285", "solution": "\"\"\"\nWrite a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\nassert text_match_two_three(\"ac\")==(False)\n\"\"\"\ndef text_match_two_three(text):\n    # Check if the string starts with 'a', followed by 2 to 3 'b' characters\n    return text.startswith('a') and (text[1] == 'b' and text[2:4] == 'bb' or text[1:] == 'bbb')\n\n# Test cases\nassert text_match_two_three(\"ac\") == False\nassert text_match_two_three(\"aab\") == True\nassert text_match_two_three(\"abb\") == True\nassert text_match_two_three(\"abc\") == False\nassert text_match_two_three(\"abbc\") == True\nassert text_match_two_three(\"abccc\") == True\nassert text_match_two_three(\"abcd\") == False\nassert text_match_two_three(\"abcde\") == False\nassert text_match_two_three(\"abcdefg\") == False\nassert text_match_two_three(\"abcdefghi\") == False\nassert text_match_two_three(\"abcdefghj\") == False\nassert text_match_two_three(\"abcdefghjk\") == False\nassert text_match_two_three(\"abcdefghl\") == False\nassert text_match_two_three(\"abcdefghm\") == False\nassert text_match_two_three(\"abcdefghn\") == False\nassert text_match_two_three(\"abcdefgho\") == False\nassert text_match_two_three(\"abcdefghp\") == False\nassert text_match_two_three(\"abcdefghq\") == False\nassert text_match_two_three(\"abcdefghr\") == False\nassert text_match_two_three(\"abcdefghs\") == False\nassert text_match_two_three(\"abcdefght\") == False\nassert text_match_two_three(\"abcdefghu\") == False\nassert text_match_two_three(\"abcdefghv\") == False\nassert text_match_two_three(\"abcdefghw\") == False\nassert text_match_two_three(\"abcdefghx\") == False\nassert text_match_two_three(\"abcdefghy\") == False\nassert text_match_two_three(\"abcdefghz\") == False\nassert text_match_two_three(\"abcdefghA\") == False\nassert text_match_two_three(\"abcdefghB\") == False\nassert text_match_two_three(\"abcdefghC\") == False\nassert text_match_two_three(\"abcdefghD\") == False\nassert text_match_two_three(\"abcdefghE\") == False\nassert text_match_two_three(\"abcdefghF\") == False\nassert text_match_two_three(\"abcdefghG\") == False\nassert text_match_two_three(\"abcdefghH\") == False\nassert text_match_two_three(\"abcdefghI\") == False\nassert text_match_two_three(\"abcdefghJ\") == False\nassert text_match_two_three(\"abcdefghK\") == False\nassert text_match_two_three(\"abcdefghL\") == False\nassert text_match_two_three(\"abcdefghM\") == False\nassert text_match_two_three(\"abcdefghN\") == False\nassert text_match_two_three(\"abcdefghO\") == False\nassert text_match_two_three(\"abcdefghP\") == False\nassert text_match_two_three(\"abcdefghQ\") == False\nassert text_match_two_three(\"abcdefghR\") == False\nassert text_match_two_three(\"abcdefghS\") == False\nassert text_match_two_three(\"abcdefghT\") == False\nassert text_match_two_three(\"abcdefghU\") == False\nassert text_match_two_three(\"abcdefghV\") == False\nassert text_match_two_three(\"abcdefghW\") == False\nassert text_match_two_three(\"abcdefghX\") == False\nassert text_match_two_three(\"abcdefghY\") == False\nassert text_match_two_three(\"abcdefghZ\") == False", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/394": [{"task_id": "Mbpp/394", "solution": "\"\"\"\nWrite a function to check if given tuple contains no duplicates.\nassert check_distinct((1, 4, 5, 6, 1, 4)) == False\n\"\"\"\ndef check_distinct(input_tuple):\n    # Convert the tuple into a set to remove duplicates\n    unique_set = set(input_tuple)\n    # Check if the length of the set is equal to the original tuple's length\n    return len(unique_set) == len(input_tuple)\n\n# Test cases\nassert check_distinct((1, 4, 5, 6, 1, 4)) == False\nassert check_distinct(('a', 'b', 'c', 'd')) == True\nassert check_distinct((1, 2, 3, 4, 5, 6, 7, 8, 9, 0)) == True\nassert check_distinct((1, 2, 2, 3, 4, 5, 6, 7, 8, 9, 0)) == False", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/409": [{"task_id": "Mbpp/409", "solution": "\"\"\"\nWrite a function to find the minimum product from the pairs of tuples within a given list.\nassert min_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)] )==8\n\"\"\"\ndef min_product_tuple(tuples):\n    # Calculate the product for each tuple and return the minimum product\n    return min([x * y for x, y in tuples])\n\n# Test cases to verify the correctness of the solution\nassert min_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)]) == 8\nassert min_product_tuple([(5, 3), (10, 2), (1, 100), (2, 3)]) == 2\nassert min_product_tuple([(1, 1), (2, 2), (3, 3), (4, 4)]) == 1", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/308": [{"task_id": "Mbpp/308", "solution": "\"\"\"\nWrite a function to find the specified number of largest products from two given lists, selecting one factor from each list.\nassert large_product([1, 2, 3, 4, 5, 6],[3, 6, 8, 9, 10, 6],3)==[60, 54, 50]\n\"\"\"\ndef large_product(list1, list2, n):\n    # Sort both lists in descending order\n    list1.sort(reverse=True)\n    list2.sort(reverse=True)\n    \n    # Select the first n elements from both lists\n    selected_list1 = list1[:n]\n    selected_list2 = list2[:n]\n    \n    # Calculate the product for each pair of selected elements\n    result = [x * y for x, y in zip(selected_list1, selected_list2)]\n    \n    return result\n\n# Test cases\nassert large_product([1, 2, 3, 4, 5, 6],[3, 6, 8, 9, 10, 6],3) == [60, 54, 50]", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/274": [{"task_id": "Mbpp/274", "solution": "\"\"\"\nWrite a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\nassert even_binomial_Coeff_Sum(4) == 8\n\"\"\"\nimport math\n\ndef even_binomial_Coeff_Sum(n):\n    # Calculate the sum of even index binomial coefficients using the formula\n    return (1 << n) - 1\n\n# Test cases to verify the correctness of the function\nassert even_binomial_Coeff_Sum(4) == 8\nassert even_binomial_Coeff_Sum(5) == 16\nassert even_binomial_Coeff_Sum(0) == 1\nassert even_binomial_Coeff_Sum(1) == 1", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/272": [{"task_id": "Mbpp/272", "solution": "\"\"\"\nWrite a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\nassert rear_extract([(1, 'Rash', 21), (2, 'Varsha', 20), (3, 'Kil', 19)]) == [21, 20, 19]\n\"\"\"\ndef rear_extract(tuples_list):\n    # Use list comprehension to extract the second element from each tuple\n    return [t[1] for t in tuples_list]\n\n# Test cases to verify the correctness of the solution\nassert rear_extract([(1, 'Rash', 21), (2, 'Varsha', 20), (3, 'Kil', 19)]) == [21, 20, 19]", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/310": [{"task_id": "Mbpp/310", "solution": "\"\"\"\nWrite a function to convert a given string to a tuple of characters.\nassert string_to_tuple(\"python 3.0\")==('p', 'y', 't', 'h', 'o', 'n', '3', '.', '0')\n\"\"\"\ndef string_to_tuple(s):\n    return tuple(s)\n\n# Test cases\nassert string_to_tuple(\"python 3.0\") == ('p', 'y', 't', 'h', 'o', 'n', '3', '.', '0')", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/407": [{"task_id": "Mbpp/407", "solution": "\"\"\"\nWrite a function to create the next bigger number by rearranging the digits of a given number.\nassert rearrange_bigger(12)==21\n\"\"\"\ndef rearrange_bigger(num):\n    # Convert the number to a list of its digits\n    digits = list(str(num))\n    \n    # Find the first index from the right where the digit is less than the one before it\n    for i in range(len(digits) - 2, -1, -1):\n        if digits[i] < digits[i + 1]:\n            break\n    \n    # If no such digit is found, return None (no greater number can be formed)\n    if i == -1:\n        return None\n    \n    # Find the smallest digit on the right side of 'i' that is greater than 'digits[i]'\n    min_index = len(digits) - 1\n    for j in range(i + 1, len(digits)):\n        if digits[j] > digits[i] and digits[j] < digits[min_index]:\n            min_index = j\n    \n    # Swap 'digits[i]' and 'digits[min_index]'\n    digits[i], digits[min_index] = digits[min_index], digits[i]\n    \n    # Sort the remaining digits to get the next larger number\n    digits.sort()\n    \n    # Convert the list back to an integer and return\n    return int(''.join(digits))\n\n# Test cases\nassert rearrange_bigger(12) == 21\nassert rearrange_bigger(31) == 41\nassert rearrange_bigger(159) == 951\nassert rearrange_bigger(987654321) == 987654321\nassert rearrange_bigger(0) == None\nassert rearrange_bigger(111) == None\nassert rearrange_bigger(222) == None", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/297": [{"task_id": "Mbpp/297", "solution": "\"\"\"\nWrite a function to flatten a given nested list structure.\nassert flatten_list([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]])==[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]\n\"\"\"\ndef flatten_list(nested_list):\n    # Initialize an empty list to store the flattened result\n    flat_list = []\n    # Iterate through each element in the nested list\n    for item in nested_list:\n        # If the item is a list itself, recursively call the function to flatten it\n        if isinstance(item, list):\n            flat_list.extend(flatten_list(item))\n        else:\n            # Otherwise, add the item directly to the flat list\n            flat_list.append(item)\n    return flat_list\n\n# Test the function with provided data points\nassert flatten_list([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/269": [{"task_id": "Mbpp/269", "solution": "\"\"\"\nWrite a function to find the ascii value of a character.\nassert ascii_value('A')==65\n\"\"\"\ndef ascii_value(char):\n    return ord(char)\n\n# Test cases\nassert ascii_value('A') == 65", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/309": [{"task_id": "Mbpp/309", "solution": "\"\"\"\nWrite a python function to find the maximum of two numbers.\nassert maximum(5,10) == 10\n\"\"\"\ndef maximum(x, y):\n    \"\"\"\n    Find the maximum of two numbers.\n\n    Args:\n    x (int): The first number.\n    y (int): The second number.\n\n    Returns:\n    int: The maximum of the two numbers.\n    \"\"\"\n    return max(x, y)\n\n# Test cases\nassert maximum(5, 10) == 10\nassert maximum(-2, -3) == -2\nassert maximum(0, 0) == 0", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/312": [{"task_id": "Mbpp/312", "solution": "\"\"\"\nWrite a function to find the volume of a cone.\nassert math.isclose(volume_cone(5,12), 314.15926535897927, rel_tol=0.001)\n\"\"\"\nimport math\n\ndef volume_cone(radius, height):\n    \"\"\"\n    Calculate the volume of a cone given its radius and height.\n\n    Args:\n    radius (float): The radius of the base of the cone.\n    height (float): The height of the cone.\n\n    Returns:\n    float: The volume of the cone.\n    \"\"\"\n    return (1/3) * math.pi * radius**2 * height\n\n# Test the function with provided data points\nassert math.isclose(volume_cone(5, 12), 314.15926535897927, rel_tol=0.001)\n", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[19, 17]], "plus_fail_tests": [[2.2, 4.7]]}], "Mbpp/395": [{"task_id": "Mbpp/395", "solution": "\"\"\"\nWrite a python function to find the first non-repeated character in a given string.\nassert first_non_repeating_character(\"abcabc\") == None\n\"\"\"\ndef first_non_repeating_character(s):\n    # Create a dictionary to store characters and their counts\n    char_count = {}\n    \n    # Iterate through each character in the string\n    for char in s:\n        if char in char_count:\n            # If the character is already in the dictionary, increment its count\n            char_count[char] += 1\n        else:\n            # If the character is not in the dictionary, add it with a count of 1\n            char_count[char] = 1\n    \n    # Iterate through the string again\n    for char in s:\n        # If the character's count is 1, return it as the first non-repeating character\n        if char_count[char] == 1:\n            return char\n    \n    # If no non-repeating character is found, return None\n    return None\n\n# Test cases to verify the correctness of the function\nassert first_non_repeating_character(\"abcabc\") == None\nassert first_non_repeating_character(\"aabccba\") == 'b'\nassert first_non_repeating_character(\"aabbcc\") == 'c'\nassert first_non_repeating_character(\"\") == None", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/295": [{"task_id": "Mbpp/295", "solution": "\"\"\"\nWrite a function to return the sum of all divisors of a number.\nassert sum_div(8)==7\n\"\"\"\n# Define the function to calculate the sum of divisors\ndef sum_div(n):\n    # Initialize the sum to 0\n    total_sum = 0\n    \n    # Iterate through possible divisors from 1 to n-1\n    for i in range(1, n):\n        # If i is a divisor of n, add it to the total sum\n        if n % i == 0:\n            total_sum += i\n    \n    # Return the total sum of divisors\n    return total_sum\n\n# Test the function with the provided assertion\nassert sum_div(8) == 7", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/260": [{"task_id": "Mbpp/260", "solution": "\"\"\"\nWrite a function to find the nth newman\u2013shanks\u2013williams prime number.\nassert newman_prime(3) == 7\n\"\"\"\ndef newman_prime(n):\n    \"\"\"\n    Find the nth Newman-Shanks-Williams prime number.\n\n    Args:\n    n (int): The position of the prime number to find.\n\n    Returns:\n    int: The nth Newman-Shanks-Williams prime number.\n    \"\"\"\n    def is_newman_prime(num):\n        \"\"\"Check if a number is a Newman-Shanks-Williams prime.\"\"\"\n        while num > 1:\n            if num % 2 == 0:\n                return False\n            num = num // 5\n        return True\n\n    count = 0\n    num = 2\n    while count < n:\n        if is_newman_prime(num):\n            count += 1\n        num += 1\n    return num - 1\n\n# Test cases\nassert newman_prime(3) == 7", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[4]], "plus_fail_tests": []}], "Mbpp/406": [{"task_id": "Mbpp/406", "solution": "\"\"\"\nWrite a python function to find whether the parity of a given number is odd.\nassert find_Parity(12) == False\n\"\"\"\n# Define the function to check if the parity of a number is odd\ndef find_Parity(number):\n    # Check if the number is even or odd using the modulus operator\n    return number % 2 != 0\n\n# Test cases to verify the correctness of the function\nassert find_Parity(12) == False\nassert find_Parity(7) == True", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/397": [{"task_id": "Mbpp/397", "solution": "\"\"\"\nWrite a function to find the median of three numbers.\nassert median_numbers(25,55,65)==55.0\n\"\"\"\ndef median_numbers(num1, num2, num3):\n    \"\"\"\n    Find the median of three numbers.\n\n    Args:\n    num1 (float): The first number.\n    num2 (float): The second number.\n    num3 (float): The third number.\n\n    Returns:\n    float: The median of the three numbers.\n    \"\"\"\n    # Sort the list of numbers\n    numbers = sorted([num1, num2, num3])\n    \n    # Return the middle element after sorting\n    return numbers[1]\n\n# Test cases\nassert median_numbers(25, 55, 65) == 55.0", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/268": [{"task_id": "Mbpp/268", "solution": "\"\"\"\nWrite a function to find the n'th star number.\nassert find_star_num(3) == 37\n\"\"\"\ndef find_star_num(n):\n    \"\"\"\n    Calculate the nth star number.\n    \n    Args:\n    n (int): The position of the star number in the sequence.\n    \n    Returns:\n    int: The nth star number.\n    \"\"\"\n    return n * (2 * n - 1)\n\n# Test cases to verify the correctness of the function\nassert find_star_num(3) == 37\nassert find_star_num(4) == 65\nassert find_star_num(5) == 101\nassert find_star_num(6) == 149\nassert find_star_num(7) == 209\nassert find_star_num(8) == 269\nassert find_star_num(9) == 337\nassert find_star_num(10) == 419", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/290": [{"task_id": "Mbpp/290", "solution": "\"\"\"\nWrite a function to find the list of maximum length in a list of lists.\nassert max_length([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(3, [13, 15, 17])\n\"\"\"\ndef max_length(list_of_lists):\n    # Find the maximum length of any sublist within the given list of lists\n    max_len = max([len(sublist) for sublist in list_of_lists])\n    # Return the maximum length and the corresponding sublist\n    return (max_len, [sublist for sublist in list_of_lists if len(sublist) == max_len])\n\n# Test the function with provided data points\nassert max_length([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(3, [13, 15, 17])", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/404": [{"task_id": "Mbpp/404", "solution": "\"\"\"\nWrite a python function to find the minimum of two numbers.\nassert minimum(1,2) == 1\n\"\"\"\ndef minimum(a, b):\n    \"\"\"\n    Write a python function to find the minimum of two numbers.\n    assert minimum(1,2) == 1\n    \"\"\"\n    return min(a, b)\n\n# Test cases\nassert minimum(1, 2) == 1\nassert minimum(-5, -3) == -3\nassert minimum(0, 0) == 0\nassert minimum(100, 50) == 50\nassert minimum(-100, -200) == -100", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/418": [{"task_id": "Mbpp/418", "solution": "\"\"\"\nWrite a python function to find the element of a list having maximum length.\nassert Find_Max([['A'],['A','B'],['A','B','C']]) == ['A','B','C']\n\"\"\"\ndef Find_Max(lst):\n    # Initialize an empty list to store the longest elements\n    max_elements = []\n    \n    # Iterate through each sublist in the input list\n    for sub_list in lst:\n        # Check if the current sublist has more elements than the previous ones\n        if len(sub_list) > len(max_elements):\n            # If so, clear the existing list and add the new sublist\n            max_elements = sub_list\n    \n    # Return the list of elements with the maximum length\n    return max_elements\n\n# Test the function with the provided data point\nassert Find_Max([['A'],['A','B'],['A','B','C']]) == ['A','B','C']", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/413": [{"task_id": "Mbpp/413", "solution": "\"\"\"\nWrite a function to extract the nth element from a given list of tuples.\nassert extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,0)==['Greyson Fulton', 'Brady Kent', 'Wyatt Knott', 'Beau Turnbull']\n\"\"\"\ndef extract_nth_element(tuples_list, n):\n    # Extract the nth element from each tuple in the list\n    return [t[n] for t in tuples_list]\n\n# Test cases to verify the correctness of the function\nassert extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)], 0) == ['Greyson Fulton', 'Brady Kent', 'Wyatt Knott', 'Beau Turnbull']\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/410": [{"task_id": "Mbpp/410", "solution": "\"\"\"\nWrite a function to find the minimum value in a given heterogeneous list.\nassert min_val(['Python', 3, 2, 4, 5, 'version'])==2\n\"\"\"\ndef min_val(heterogeneous_list):\n    # Initialize the minimum value as the first element of the list\n    min_value = heterogeneous_list[0]\n    \n    # Iterate through each element in the heterogeneous list\n    for item in heterogeneous_list:\n        # Update the minimum value if a smaller item is found\n        if isinstance(item, (int, float)) and item < min_value:\n            min_value = item\n    \n    return min_value\n\n# Test cases to verify the correctness of the function\nassert min_val(['Python', 3, 2, 4, 5, 'version']) == 2\nassert min_val([10, 'hello', 20, -5, 30]) == -5\nassert min_val(['apple', 'banana', 'cherry']) == 'apple'\nassert min_val([True, False, True, True]) == False", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/412": [{"task_id": "Mbpp/412", "solution": "\"\"\"\nWrite a python function to remove odd numbers from a given list.\nassert remove_odd([1,2,3]) == [2]\n\"\"\"\ndef remove_odd(lst):\n    return [num for num in lst if num % 2 == 0]\n\n# Test cases\nassert remove_odd([1,2,3]) == [2]\nassert remove_odd([4,5,6,7]) == [4,6]\nassert remove_odd([]) == []\nassert remove_odd([10,20,30,40]) == [20,40]", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/420": [{"task_id": "Mbpp/420", "solution": "\"\"\"\nWrite a python function to find the cube sum of first n even natural numbers.\nassert cube_Sum(2) == 72\n\"\"\"\ndef cube_Sum(n):\n    # Calculate the sum of first n even natural numbers\n    return (n * (n + 1) * (2 * n + 1)) // 6\n\n# Test cases to verify the correctness of the function\nassert cube_Sum(2) == 72", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/415": [{"task_id": "Mbpp/415", "solution": "\"\"\"\nWrite a python function to find a pair with highest product from a given array of integers.\nassert max_Product([1,2,3,4,7,0,8,4]) == (7,8)\n\"\"\"\ndef max_Product(arr):\n    # Initialize variables to store the maximum product and its corresponding elements\n    max_product = arr[0] * arr[1]\n    second_max_product = arr[0] * arr[2]\n    \n    # Iterate through the array starting from the third element\n    for i in range(2, len(arr)):\n        # Update max_product if current element is greater than both max_product and second_max_product\n        if arr[i] > max_product:\n            second_max_product = max_product\n            max_product = arr[i]\n        \n        # Update second_max_product if current element is not as large as max_product but is larger than second_max_product\n        elif arr[i] > second_max_product:\n            second_max_product = arr[i]\n    \n    return (max_product, second_max_product)\n\n# Test cases to verify the correctness of the function\nassert max_Product([1,2,3,4,7,0,8,4]) == (7, 8)\nassert max_Product([-1,-2,-3,0]) == (-1, -2)\nassert max_Product([5,5,5,5]) == (5, 5)\nassert max_Product([]) == None", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/414": [{"task_id": "Mbpp/414", "solution": "\"\"\"\nWrite a python function to check whether any value in a sequence exists in a sequence or not.\nassert overlapping([1,2,3,4,5],[6,7,8,9]) == False\n\"\"\"\ndef overlapping(seq1, seq2):\n    # Iterate over each element in seq1\n    for item in seq1:\n        # Check if item is present in seq2\n        if item in seq2:\n            return True  # Return True if found\n    return False  # Return False otherwise\n\n# Test cases\nassert overlapping([1,2,3,4,5], [6,7,8,9]) == False\nassert overlapping([1,2,3,4,5], [1,2,3,4,5]) == True\nassert overlapping([1,2,3,4,5], [10,11,12,13]) == False\nassert overlapping([1,2,3,4,5], [1,2,3,4,5,6]) == True\nassert overlapping([1,2,3,4,5], []) == False\nassert overlapping([], [1,2,3,4,5]) == False\nassert overlapping([], []) == True", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/421": [{"task_id": "Mbpp/421", "solution": "\"\"\"\nWrite a function to concatenate each element of tuple by the delimiter.\nassert concatenate_tuple((\"ID\", \"is\", 4, \"UTS\") ) == 'ID-is-4-UTS'\n\"\"\"\ndef concatenate_tuple(input_tuple):\n    # Joining elements of the tuple using the specified delimiter\n    result = ''.join(map(str, input_tuple))\n    return result\n\n# Test the function\nassert concatenate_tuple((\"ID\", \"is\", 4, \"UTS\")) == 'ID-is-4-UTS'", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/419": [{"task_id": "Mbpp/419", "solution": "\"\"\"\nWrite a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\nassert round_and_sum([22.4, 4.0, -16.22, -9.10, 11.00, -12.22, 14.20, -5.20, 17.50])==243\n\"\"\"\ndef round_and_sum(numbers):\n    # Round each number in the list\n    rounded_numbers = [round(num) for num in numbers]\n    \n    # Calculate the total sum of the rounded numbers\n    total_sum = sum(rounded_numbers)\n    \n    # Calculate the length of the list\n    list_length = len(numbers)\n    \n    # Return the product of the total sum and the length of the list\n    return total_sum * list_length\n\n# Test the function with provided data points\nassert round_and_sum([22.4, 4.0, -16.22, -9.10, 11.00, -12.22, 14.20, -5.20, 17.50]) == 243", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/436": [{"task_id": "Mbpp/436", "solution": "\"\"\"\nWrite a python function to return the negative numbers in a list.\nassert neg_nos([-1,4,5,-6]) == [-1,-6]\n\"\"\"\ndef neg_nos(nums):\n    \"\"\"\n    Return a list of negative numbers from the input list.\n    \n    Args:\n    nums (list): A list of integers.\n    \n    Returns:\n    list: A list containing only the negative numbers from the input list.\n    \"\"\"\n    return [num for num in nums if num < 0]\n\n# Test cases\nassert neg_nos([-1,4,5,-6]) == [-1,-6]\nassert neg_nos([0,2,3,4]) == []\nassert neg_nos([]) == []\nassert neg_nos([1,1,1,1]) == []", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/431": [{"task_id": "Mbpp/431", "solution": "\"\"\"\nWrite a function that takes two lists and returns true if they have at least one common element.\nassert common_element([1,2,3,4,5], [5,6,7,8,9])==True\n\"\"\"\ndef common_element(list1, list2):\n    # Convert both lists to sets for efficient membership checking\n    set1 = set(list1)\n    set2 = set(list2)\n    \n    # Check if there is any common element between the two sets\n    return bool(set1.intersection(set2))\n\n# Test cases to verify the correctness of the function\nassert common_element([1,2,3,4,5], [5,6,7,8,9]) == True\nassert common_element(['apple', 'banana', 'cherry'], ['date', 'fig', 'grape']) == False\nassert common_element([0, 1, 2, 3, 4], [5, 6, 7, 8, 9]) == False\nassert common_element([], []) == False", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[[1, 2, 3, [4, 5]], [[4, 5], 6, 7, 8]]]}], "Mbpp/438": [{"task_id": "Mbpp/438", "solution": "\"\"\"\nWrite a function to count bidirectional tuple pairs.\nassert count_bidirectional([(5, 6), (1, 2), (6, 5), (9, 1), (6, 5), (2, 1)] ) == 3\n\"\"\"\ndef count_bidirectional(tuples_list):\n    # Create a set of tuples for faster lookup\n    unique_tuples = set(tuples_list)\n    \n    # Initialize a counter for bidirectional pairs\n    bidirectional_count = 0\n    \n    # Iterate over each tuple in the list\n    for tup in tuples_list:\n        # Check if the reverse tuple exists in the set\n        if (tup[1], tup[0]) in unique_tuples:\n            bidirectional_count += 1\n    \n    return bidirectional_count\n\n# Test the function with the provided data point\nassert count_bidirectional([(5, 6), (1, 2), (6, 5), (9, 1), (6, 5), (2, 1)]) == 3", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/468": [{"task_id": "Mbpp/468", "solution": "\"\"\"\nWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nassert max_product([3, 100, 4, 5, 150, 6]) == 3000\n\"\"\"\ndef max_product(nums):\n    # Initialize variables to store the current maximum product and the previous maximum product\n    current_max = nums[0]\n    prev_max = nums[0]\n    \n    # Iterate through the array starting from the second element\n    for num in nums[1:]:\n        # If the current number is greater than the previous maximum product,\n        # update the previous maximum product to be the current number\n        if num > prev_max:\n            prev_max = num\n        \n        # Calculate the potential new maximum product by multiplying the current number\n        # with the previous maximum product (if it's greater than 1)\n        new_max = num * prev_max\n        \n        # Update the current maximum product to be the maximum of the current maximum product\n        # and the new maximum product\n        current_max = max(current_max, new_max)\n    \n    return current_max\n\n# Test cases to verify the correctness of the function\nassert max_product([3, 100, 4, 5, 150, 6]) == 3000\nassert max_product([1, 2, 3, 4, 5]) == 24\nassert max_product([-1, -2, -3, -4, -5]) == 60\nassert max_product([]) == 1", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/433": [{"task_id": "Mbpp/433", "solution": "\"\"\"\nWrite a function to check whether the entered number is greater than the elements of the given array.\nassert check_greater([1, 2, 3, 4, 5], 4) == False\n\"\"\"\ndef check_greater(arr, num):\n    # Iterate through each element in the array\n    for element in arr:\n        # Check if the current element is greater than the input number\n        if element > num:\n            return True\n    # If no element is found that is greater than the input number, return False\n    return False\n\n# Test cases to verify the correctness of the function\nassert check_greater([1, 2, 3, 4, 5], 4) == False\nassert check_greater([10, 20, 30, 40, 50], 35) == True\nassert check_greater([-1, -2, -3, -4, -5], -6) == True\nassert check_greater([100, 200, 300, 400, 500], 500) == True\nassert check_greater([1, 2, 3, 4, 5], 1) == True", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/461": [{"task_id": "Mbpp/461", "solution": "\"\"\"\nWrite a python function to count the upper case characters in a given string.\nassert upper_ctr('PYthon') == 1\n\"\"\"\ndef upper_ctr(s):\n    return sum(1 for c in s if c.isupper())\n\n# Test cases\nassert upper_ctr('PYthon') == 1\nassert upper_ctr('Hello World') == 2\nassert upper_ctr('No uppercase letters here') == 0\nassert upper_ctr('All uppercase letters') == 8", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/424": [{"task_id": "Mbpp/424", "solution": "\"\"\"\nWrite a function to extract only the rear index element of each string in the given tuple.\nassert extract_rear(('Mers', 'for', 'Vers') ) == ['s', 'r', 's']\n\"\"\"\ndef extract_rear(strings):\n    # Using list comprehension to extract the last character from each string\n    return [s[-1] for s in strings]\n\n# Test the function with provided data points\nassert extract_rear(('Mers', 'for', 'Vers')) == ['s', 'r', 's']", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/437": [{"task_id": "Mbpp/437", "solution": "\"\"\"\nWrite a function to remove odd characters in a string.\nassert remove_odd(\"python\")==(\"yhn\")\n\"\"\"\ndef remove_odd(s):\n    # Initialize an empty string to store even characters\n    result = \"\"\n    \n    # Iterate over each character in the input string\n    for char in s:\n        # Check if the character is even (i.e., not divisible by 2)\n        if ord(char) % 2 == 0:\n            # Append the even character to the result string\n            result += char\n    \n    # Return the resulting string containing only even characters\n    return result\n\n# Test cases to verify the correctness of the function\nassert remove_odd(\"python\") == (\"yhn\")\nassert remove_odd(\"hello world\") == (\"e o d\")\nassert remove_odd(\"123456789\") == (\"2468\")\nassert remove_odd(\"\") == \"\"\nassert remove_odd(\"a\") == \"a\"\nassert remove_odd(\"b\") == \"b\"", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/432": [{"task_id": "Mbpp/432", "solution": "\"\"\"\nWrite a function to find the median length of a trapezium.\nassert median_trapezium(15,25,35)==20\n\"\"\"\ndef median_trapezium(a, b, c):\n    \"\"\"\n    Calculate the median length of a trapezium given its three sides.\n\n    Args:\n    a (float): Length of side 'a' of the trapezium.\n    b (float): Length of side 'b' of the trapezium.\n    c (float): Length of side 'c' of the trapezium.\n\n    Returns:\n    float: The median length of the trapezium.\n    \"\"\"\n    # Calculate the median length using the formula for the median of a trapezium\n    median = (a + b) / 2\n    return median\n\n# Test cases to verify the correctness of the function\nassert median_trapezium(15, 25, 35) == 20", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/426": [{"task_id": "Mbpp/426", "solution": "\"\"\"\nWrite a function to filter odd numbers.\nassert filter_oddnumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1,3,5,7,9]\n\"\"\"\ndef filter_oddnumbers(numbers):\n    # Filter out even numbers from the list\n    return [num for num in numbers if num % 2 != 0]\n\n# Test the function\nassert filter_oddnumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 3, 5, 7, 9]", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/458": [{"task_id": "Mbpp/458", "solution": "\"\"\"\nWrite a function to find the area of a rectangle.\nassert rectangle_area(10,20)==200\n\"\"\"\ndef rectangle_area(width, height):\n    return width * height\n\n# Test cases\nassert rectangle_area(10, 20) == 200\nassert rectangle_area(5, 7) == 35\nassert rectangle_area(8, 9) == 72", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/422": [{"task_id": "Mbpp/422", "solution": "\"\"\"\nWrite a python function to find the average of cubes of first n natural numbers.\nassert find_Average_Of_Cube(2) == 4.5\n\"\"\"\ndef find_Average_Of_Cube(n):\n    # Calculate the sum of cubes of first n natural numbers using formula (n*n*(n+1)*(2n+1))/6\n    sum_of_cubes = n * (n + 1) * (2 * n + 1) // 6\n    \n    # Calculate the average of these cubes\n    average_of_cubes = sum_of_cubes / n\n    \n    return average_of_cubes\n\n# Test the function with provided data points\nassert find_Average_Of_Cube(2) == 4.5", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/439": [{"task_id": "Mbpp/439", "solution": "\"\"\"\nWrite a function to join a list of multiple integers into a single integer.\nassert multiple_to_single([11, 33, 50])==113350\n\"\"\"\ndef multiple_to_single(numbers):\n    # Convert each number in the list to a string and concatenate them\n    result = ''.join(map(str, numbers))\n    # Convert the resulting string back to an integer\n    return int(result)\n\n# Test cases to verify the correctness of the function\nassert multiple_to_single([11, 33, 50]) == 113350", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/459": [{"task_id": "Mbpp/459", "solution": "\"\"\"\nWrite a function to remove uppercase substrings from a given string.\nassert remove_uppercase('cAstyoUrFavoRitETVshoWs') == 'cstyoravoitshos'\n\"\"\"\ndef remove_uppercase(s):\n    # Use list comprehension to filter out uppercase characters\n    return ''.join([char for char in s if not char.isupper()])\n\n# Test cases to verify the correctness of the function\nassert remove_uppercase('cAstyoUrFavoRitETVshoWs') == 'cstyoravoitshos'\nassert remove_uppercase('Python3.8') == 'ython3.8'\nassert remove_upper_case('1234567890') == ''\nassert remove_upper_case('NoUppercaseHere') == 'NoUppercaseHere'\nassert remove_uppercase('UPPERlower') == 'lower'", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/429": [{"task_id": "Mbpp/429", "solution": "\"\"\"\nWrite a function to extract the elementwise and tuples from the given two tuples.\nassert and_tuples((10, 4, 6, 9), (5, 2, 3, 3)) == (0, 0, 2, 1)\n\"\"\"\ndef assert_and_tuples(tup1, tup2):\n    # Extracting elements and tuples using tuple unpacking\n    result = tuple(x - y for x, y in zip(tup1, tup2))\n    return result\n\n# Test case\nassert assert_and_tuples((10, 4, 6, 9), (5, 2, 3, 3)) == (0, 0, 2, 1)", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/435": [{"task_id": "Mbpp/435", "solution": "\"\"\"\nWrite a python function to find the last digit of a given number.\nassert last_Digit(123) == 3\n\"\"\"\n# Define the function to find the last digit of a number\ndef last_Digit(number):\n    # Return the last digit using modulo operation\n    return number % 10\n\n# Test cases to verify the correctness of the function\nassert last_Digit(123) == 3\nassert last_Digit(456789) == 9\nassert last_Digit(-1000) == 0\nassert last_Digit(0) == 0", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/427": [{"task_id": "Mbpp/427", "solution": "\"\"\"\nWrite a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nassert change_date_format(\"2026-01-02\") == '02-01-2026'\n\"\"\"\ndef change_date_format(date_str):\n    # Split the input string into year, month, and day\n    year, month, day = map(int, date_str.split('-'))\n    # Format the date as dd-mm-yyyy\n    return f\"{day}-{month}-{year}\"\n\n# Test cases to verify the correctness of the function\nassert change_date_format(\"2026-01-02\") == '02-01-2026'\nassert change_date_format(\"2027-12-31\") == '31-12-2027'\nassert change_date_format(\"2020-04-05\") == '05-04-2020'", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/440": [{"task_id": "Mbpp/440", "solution": "\"\"\"\nWrite a function to find the first adverb and their positions in a given sentence.\nassert find_adverb_position(\"clearly!! we can see the sky\")==(0, 7, 'clearly')\n\"\"\"\ndef find_adverb_position(sentence):\n    # Split the sentence into words\n    words = sentence.split()\n    # Find the index of the first word that starts with an uppercase letter\n    for i, word in enumerate(words):\n        if word[0].isupper():\n            return (i, len(word), word)\n    return None\n\n# Test the function with provided data points\nassert find_adverb_position(\"clearly!! we can see the sky\") == (0, 7, 'clearly')", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/428": [{"task_id": "Mbpp/428", "solution": "\"\"\"\nWrite a function to sort the given array by using shell sort.\nassert shell_sort([12, 23, 4, 5, 3, 2, 12, 81, 56, 95]) == [2, 3, 4, 5, 12, 12, 23, 56, 81, 95]\n\"\"\"\ndef shell_sort(arr):\n    # Calculate the initial gap sequence\n    n = len(arr)\n    gap = n // 2\n\n    while gap > 0:\n        # Perform the insertion sort for each gap\n        for i in range(gap, n):\n            temp = arr[i]\n            j = i\n            # Shift elements of arr[0..i] that are greater than temp\n            while (j >= gap and arr[j - gap] > temp):\n                arr[j] = arr[j - gap]\n                j -= gap\n            # Insert temp into its position\n            arr[j] = temp\n        # Reduce the gap size\n        gap //= 2\n\n# Test the function with provided data points\nassert shell_sort([12, 23, 4, 5, 3, 2, 12, 81, 56, 95]) == [2, 3, 4, 5, 12, 12, 23, 56, 81, 95]", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/478": [{"task_id": "Mbpp/478", "solution": "\"\"\"\nWrite a function to remove lowercase substrings from a given string.\nassert remove_lowercase(\"PYTHon\")==('PYTH')\n\"\"\"\ndef remove_lowercase(s):\n    return ''.join([char for char in s if not char.islower()])\n\n# Test cases\nassert remove_lowercase(\"PYTHon\") == ('PYTH')\nassert remove_lowercase(\"PyThOn\") == ('PYTH')\nassert remove_lowercase(\"pythON\") == ('PYTH')\nassert remove_lowercase(\"PYTHON\") == ('PYTH')\nassert remove_lowercase(\"pYtHoN\") == ('PYT')\nassert remove_lowercase(\"PythoN\") == ('PYT')\nassert remove_lowercase(\"Python\") == ('PYT')\nassert remove_lowercase(\"pythoN\") == ('PYT')\nassert remove_lowercase(\"PythoN\") == ('PYT')\nassert remove_lowercase(\"Python\") == ('PYT')\nassert remove_lowercase(\"pythoN\") == ('PYT')\nassert remove_lowercase(\"PythoN\") == ('PYT')\nassert remove_lowercase(\"Python\") == ('PYT')\nassert remove_lowercase(\"pythoN\") == ('PYT')\nassert remove_lowercase(\"PythoN\") == ('PYT')\nassert remove_lowercase(\"Python\") == ('PYT')\nassert remove_lowercase(\"pythoN\") == ('PYT')\nassert remove_lowercase(\"PythoN\") == ('PYT')\nassert remove_lowercase(\"Python\") == ('PYT')\nassert remove_lowercase(\"pythoN\") == ('PYT')\nassert remove_lowercase(\"PythoN\") == ('PYT')\nassert remove_lowercase(\"Python\") == ('PYT')\nassert remove_lowercase(\"pythoN\") == ('PYT')\nassert remove_lowercase(\"PythoN\") == ('PYT')\nassert remove_lowercase(\"Python\") == ('PYT')\nassert remove_lowercase(\"pythoN\") == ('PYT')\nassert remove_lowercase(\"PythoN\") == ('PYT')\nassert remove_lowercase(\"Python\") == ('PYT')\nassert remove_lowercase(\"pythoN\") == ('PYT')\nassert remove_lowercase(\"PythoN\") == ('PYT')\nassert remove_lowercase(\"Python\") == ('PYT')\nassert remove_lowercase(\"pythoN\") == ('PYT')\nassert remove_lowercase(\"PythoN\") == ('PYT')\nassert remove_lowercase(\"Python\") == ('PYT')\nassert remove_lowercase(\"pythoN\") == ('PYT')\nassert remove_lowercase(\"PythoN\") == ('PYT')\nassert remove_lowercase(\"Python\") == ('PYT')\nassert remove_lowercase(\"pythoN\") == ('PYT')\nassert remove_lowercase(\"PythoN\") == ('PYT')\nassert remove_lowercase(\"Python\") == ('PYT')\nassert remove_lowercase(\"pythoN\") == ('PYT')\nassert remove_lowercase(\"PythoN\") == ('PYT')\nassert remove_lowercase(\"Python\") == ('PYT')\nassert remove_lowercase(\"pythoN\") == ('PYT')\nassert remove_lowercase(\"PythoN\") == ('PYT')\nassert remove_lowercase(\"Python\") == ('PYT')\nassert remove_lowercase(\"pythoN\") == ('PYT')\nassert remove_lowercase(\"PythoN\") == ('PYT')\nassert remove_lowercase(\"Python\") == ('PYT')\nassert remove_lowercase(\"pythoN\") == ('PYT')\nassert remove_lowercase(\"PythoN\") == ('PYT')\nassert remove_lowercase(\"Python\") == ('PYT')\nassert remove_lowercase(\"pythoN\") == ('PYT')\nassert remove_lowercase(\"PythoN\") == ('PYT')\nassert remove_lowercase(\"Python\") == ('PYT')\nassert remove_lowercase(\"pythoN\") == ('PYT')\nassert remove_lowercase(\"PythoN\") == ('PYT')\n", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/447": [{"task_id": "Mbpp/447", "solution": "\"\"\"\nWrite a function to find cubes of individual elements in a list.\nassert cube_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]\n\"\"\"\ndef cube_nums(nums):\n    # Using list comprehension to cube each element in the input list\n    return [num ** 3 for num in nums]\n\n# Test the function with provided data points\nassert cube_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/463": [{"task_id": "Mbpp/463", "solution": "\"\"\"\nWrite a function to find the maximum product subarray of the given array.\nassert max_subarray_product([1, -2, -3, 0, 7, -8, -2]) == 112\n\"\"\"\ndef max_subarray_product(arr):\n    # Initialize variables for tracking the current maximum and minimum products\n    curr_max = curr_min = arr[0]\n    global_max = arr[0]\n\n    # Iterate through each element in the array starting from index 1\n    for num in arr[1:]:\n        # If the number is negative, swap the current max and min\n        if num < 0:\n            temp = curr_max\n            curr_max = curr_min\n            curr_min = temp\n\n        # Update the current maximum and minimum products\n        curr_max = max(num * curr_max, num)\n        curr_min = min(num * curr_min, num)\n\n        # Update the global maximum found so far\n        global_max = max(global_max, curr_max)\n\n    return global_max\n\n# Test the function with provided data points\nassert max_subarray_product([1, -2, -3, 0, 7, -8, -2]) == 112", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/446": [{"task_id": "Mbpp/446", "solution": "\"\"\"\nWrite a python function to count the occurence of all elements of list in a tuple.\nassert count_Occurrence(('a', 'a', 'c', 'b', 'd'),['a', 'b'] ) == 3\n\"\"\"\ndef count_Occurrence(lst, t):\n    \"\"\"\n    Count the occurrence of each element in the list within the given tuple.\n\n    Args:\n    lst (list): The list whose elements need to be counted.\n    t (tuple): The tuple containing elements to count occurrences of.\n\n    Returns:\n    dict: A dictionary where keys are the elements from the tuple and values are their counts in the list.\n    \"\"\"\n    # Initialize an empty dictionary to store the counts\n    counts = {}\n    \n    # Iterate over each element in the tuple\n    for item in t:\n        # If the item is already in the dictionary, increment its count\n        if item in counts:\n            counts[item] += 1\n        # Otherwise, add the item to the dictionary with a count of 1\n        else:\n            counts[item] = 1\n    \n    # Return the dictionary containing the counts of each element\n    return counts\n\n# Test the function with provided data points\nassert count_Occurrence(['a', 'a', 'c', 'b', 'd'], ['a', 'b']) == { 'a': 3, 'b': 2 }", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/556": [{"task_id": "Mbpp/556", "solution": "\"\"\"\nWrite a python function to count the number of pairs whose xor value is odd.\nassert find_Odd_Pair([5,4,7,2,1],5) == 6\n\"\"\"\ndef find_Odd_Pair(arr, n):\n    # Initialize counter for odd pair count\n    odd_count = 0\n    \n    # Iterate through each element in the array\n    for i in range(n):\n        for j in range(i+1, n):\n            # Check if the XOR of two elements is odd\n            if (arr[i] ^ arr[j]) % 2 != 0:\n                odd_count += 1\n    \n    return odd_count\n\n# Test cases", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/451": [{"task_id": "Mbpp/451", "solution": "\"\"\"\nWrite a function to remove all whitespaces from the given string.\nassert remove_whitespaces(' Google    Flutter ') == 'GoogleFlutter'\n\"\"\"\ndef remove_whitespaces(s):\n    # Use regular expression to replace one or more whitespace characters with an empty string\n    return ''.join(re.sub(r'\\s+', '', s))\n\n# Test cases\nassert remove_whitespaces(' Google    Flutter ') == 'GoogleFlutter'\nassert remove_whitespaces('  Leading and trailing spaces  ') == 'Leadingandtrailingspaces'\nassert remove_whitespaces('NoSpacesHere') == 'Nospaceshere'", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/455": [{"task_id": "Mbpp/455", "solution": "\"\"\"\nWrite a function to check whether the given month number contains 31 days or not.\nassert check_monthnumb_number(5)==True\n\"\"\"\ndef check_monthnumb_number(month_num):\n    # Check if the month number is between 1 and 12 (inclusive)\n    if 1 <= month_num <= 12:\n        # Return True if the month has 31 days\n        return True\n    else:\n        # Return False if the month does not have 31 days\n        return False\n\n# Test the function with the provided assertion\nassert check_monthnumb_number(5) == True", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[2]], "plus_fail_tests": [[11]]}], "Mbpp/430": [{"task_id": "Mbpp/430", "solution": "\"\"\"\nWrite a function to find the directrix of a parabola.\nassert parabola_directrix(5,3,2)==-198\n\"\"\"\ndef parabola_directrix(a, b, c):\n    \"\"\"\n    Calculate the directrix of a parabola given its coefficients a, b, and c.\n\n    Args:\n    a (float): The coefficient of x^2.\n    b (float): The coefficient of x.\n    c (float): The constant term.\n\n    Returns:\n    float: The directrix of the parabola.\n    \"\"\"\n    return -c / (4 * a)\n\n# Test cases to verify the correctness of the function\nassert parabola_directrix(5, 3, 2) == -198", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/425": [{"task_id": "Mbpp/425", "solution": "\"\"\"\nWrite a function to count the number of sublists containing a particular element.\nassert count_element_in_list([[1, 3], [5, 7], [1, 11], [1, 15, 7]],1)==3\n\"\"\"\ndef count_element_in_list(lst, element):\n    # Initialize a counter for the occurrences\n    count = 0\n    # Iterate through each sublist in the list\n    for sublist in lst:\n        # Check if the element exists in the current sublist\n        if element in sublist:\n            # Increment the counter if the element is found\n            count += 1\n    # Return the total count of occurrences\n    return count\n\n# Test cases to verify the correctness of the function\nassert count_element_in_list([[1, 3], [5, 7], [1, 11], [1, 15, 7]],1) == 3\nassert count_element_in_list([[], [1, 2, 3], [4, 5, 6], [7, 8, 9]], 5) == 1\nassert count_element_in_list([], 10) == 0", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/475": [{"task_id": "Mbpp/475", "solution": "\"\"\"\nWrite a function to sort a dictionary by value.\nassert sort_counter({'Math':81, 'Physics':83, 'Chemistry':87})==[('Chemistry', 87), ('Physics', 83), ('Math', 81)]\n\"\"\"\ndef sort_counter(d):\n    return sorted(d.items(), key=lambda x: x[1])\n\n# Test the function\nassert sort_counter({'Math':81, 'Physics':83, 'Chemistry':87}) == [('Chemistry', 87), ('Physics', 83), ('Math', 81)]\n", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/555": [{"task_id": "Mbpp/555", "solution": "\"\"\"\nWrite a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\nassert difference(3) == 30\n\"\"\"\ndef difference(n):\n    # Calculate the sum of cubes of the first n natural numbers\n    sum_of_cubes = sum([i**3 for i in range(1, n+1)])\n    \n    # Calculate the sum of the first n natural numbers\n    sum_of_natural_numbers = sum(range(1, n+1))\n    \n    # Return the difference between the two sums\n    return sum_of_cubes - sum_of_natural_numbers\n\n# Test cases to verify the correctness of the solution\nassert difference(3) == 30\nassert difference(4) == 92\nassert difference(5) == 168", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/450": [{"task_id": "Mbpp/450", "solution": "\"\"\"\nWrite a function to extract specified size of strings from a given list of string values.\nassert extract_string(['Python', 'list', 'exercises', 'practice', 'solution'] ,8)==['practice', 'solution']\n\"\"\"\n# Define the function to extract specified size of strings\ndef extract_string(string_list, size):\n    # Use list comprehension to filter strings based on their length\n    return [s for s in string_list if len(s) == size]\n\n# Test cases to verify the correctness of the function\nassert extract_string(['Python', 'list', 'exercises', 'practice', 'solution'], 8) == ['practice', 'solution']\n\n# Print the result to confirm the solution", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/460": [{"task_id": "Mbpp/460", "solution": "\"\"\"\nWrite a python function to get the first element of each sublist.\nassert Extract([[1, 2], [3, 4, 5], [6, 7, 8, 9]]) == [1, 3, 6]\n\"\"\"\ndef Extract(lst):\n    return [item[0] for item in lst]\n\n# Test cases\nassert Extract([[1, 2], [3, 4, 5], [6, 7, 8, 9]]) == [1, 3, 6]", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/456": [{"task_id": "Mbpp/456", "solution": "\"\"\"\nWrite a function to reverse each string in a given list of string values.\nassert reverse_string_list(['Red', 'Green', 'Blue', 'White', 'Black'])==['deR', 'neerG', 'eulB', 'etihW', 'kcalB']\n\"\"\"\ndef reverse_string_list(string_values):\n    # Reverse each string in the list using list comprehension\n    reversed_strings = [s[::-1] for s in string_values]\n    return reversed_strings\n\n# Test cases to verify the correctness of the solution\nassert reverse_string_list(['Red', 'Green', 'Blue', 'White', 'Black']) == ['deR', 'neerG', 'eulB', 'etihW', 'kcalB']", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/445": [{"task_id": "Mbpp/445", "solution": "\"\"\"\nWrite a function to perform index wise multiplication of tuple elements in the given two tuples.\nassert index_multiplication(((1, 3), (4, 5), (2, 9), (1, 10)),((6, 7), (3, 9), (1, 1), (7, 3)) ) == ((6, 21), (12, 45), (2, 9), (7, 30))\n\"\"\"\ndef index_multiplication(tuple1, tuple2):\n    # Initialize an empty list to store the result\n    result = []\n    \n    # Iterate over the indices of both tuples\n    for i in range(len(tuple1)):\n        # Multiply the elements at the same index from both tuples\n        product = tuple1[i] * tuple2[i]\n        # Append the product to the result list\n        result.append(product)\n    \n    # Return the resulting list\n    return tuple(result)\n\n# Test the function with provided data points\nassert index_multiplication(((1, 3), (4, 5), (2, 9), (1, 10)),((6, 7), (3, 9), (1, 1), (7, 3))) == ((6, 21), (12, 45), (2, 9), (7, 30))", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/473": [{"task_id": "Mbpp/473", "solution": "\"\"\"\nWrite a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\nassert tuple_intersection([(3, 4), (5, 6), (9, 10), (4, 5)] , [(5, 4), (3, 4), (6, 5), (9, 11)]) == {(4, 5), (3, 4), (5, 6)}\n\"\"\"\ndef tuple_intersection(tup1, tup2):\n    # Convert tuples to sets for easier intersection operation\n    set1 = set(tup1)\n    set2 = set(tup2)\n    \n    # Find the intersection of both sets\n    intersection_set = set1.intersection(set2)\n    \n    # Return the result as a tuple\n    return intersection_set\n\n# Test the function with provided data points\nassert tuple_intersection([(3, 4), (5, 6), (9, 10), (4, 5)], [(5, 4), (3, 4), (6, 5), (9, 11)]) == {(4, 5), (3, 4), (5, 6)}", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/457": [{"task_id": "Mbpp/457", "solution": "\"\"\"\nWrite a python function to find the sublist having minimum length.\nassert Find_Min([[1],[1,2],[1,2,3]]) == [1]\n\"\"\"\ndef Find_Min(lst):\n    # Initialize the minimum length as the length of the first sublist\n    min_length = len(lst[0])\n    \n    # Iterate through each sublist in the list\n    for sublist in lst:\n        # Update the minimum length if the current sublist's length is smaller\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n    \n    # Return the sublist with the minimum length\n    return lst[min_length-1]\n\n# Test cases to verify the correctness of the function\nassert Find_Min([[1],[1,2],[1,2,3]]) == [1], \"Test case 1 failed\"\nassert Find_Min([['a','b'],['c','d'],['e','f']]) == ['c','d'], \"Test case 2 failed\"\nassert Find_Min([[1,2,3,4,5],[6,7,8,9,10],[11,12,13,14,15]]) == [11,12,13,14,15], \"Test case 3 failed\"", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/465": [{"task_id": "Mbpp/465", "solution": "\"\"\"\nWrite a function to drop empty items from a given dictionary.\nassert drop_empty({'c1': 'Red', 'c2': 'Green', 'c3':None})=={'c1': 'Red', 'c2': 'Green'}\n\"\"\"\ndef drop_empty(d):\n    # Use dict comprehension to filter out None values\n    return {k: v for k, v in d.items() if v is not None}\n\n# Test the function with provided data points\nassert drop_empty({'c1': 'Red', 'c2': 'Green', 'c3': None}) == {'c1': 'Red', 'c2': 'Green'}", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/462": [{"task_id": "Mbpp/462", "solution": "\"\"\"\nWrite a function to find all possible combinations of the elements of a given list.\nassert combinations_list(['orange', 'red', 'green', 'blue'])==[[], ['orange'], ['red'], ['red', 'orange'], ['green'], ['green', 'orange'], ['green', 'red'], ['green', 'red', 'orange'], ['blue'], ['blue', 'orange'], ['blue', 'red'], ['blue', 'red', 'orange'], ['blue', 'green'], ['blue', 'green', 'orange'], ['blue', 'green', 'red'], ['blue', 'green', 'red', 'orange']]\n\"\"\"\ndef combinations_list(lst):\n    # Initialize an empty list to store the results\n    result = [[]]\n    \n    # Iterate over each element in the input list\n    for item in lst:\n        # Create a copy of the current result list to avoid modifying it during iteration\n        new_result = [x + [item] for x in result]\n        \n        # Append the new result to the main result list\n        result.extend(new_result)\n    \n    return result\n\n# Test the function with the provided data point\nassert combinations_list(['orange', 'red', 'green', 'blue']) == [\n    [], \n    ['orange'], \n    ['red'], \n    ['red', 'orange'], \n    ['green'], \n    ['green', 'orange'], \n    ['green', 'red'], \n    ['green', 'red', 'orange'], \n    ['blue'], \n    ['blue', 'orange'], \n    ['blue', 'red'], \n    ['blue', 'red', 'orange'], \n    ['blue', 'green'], \n    ['blue', 'green', 'orange'], \n    ['blue', 'green', 'red'], \n    ['blue', 'green', 'red', 'orange']\n]", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/472": [{"task_id": "Mbpp/472", "solution": "\"\"\"\nWrite a python function to check whether the given list contains consecutive numbers or not.\nassert check_Consecutive([1,2,3,4,5]) == True\n\"\"\"\ndef check_Consecutive(lst):\n    return all(lst[i] + 1 == lst[i+1] for i in range(len(lst)-1))\n\n# Test cases\nassert check_Consecutive([1,2,3,4,5]) == True\nassert check_Consecutive([1,3,5,7,9]) == True\nassert check_Consecutive([1,3,5,7,8]) == False\nassert check_Consecutive([10,11,12,13,14]) == True\nassert check_Consecutive([10,12,13,14,16]) == False\nassert check_Consecutive([]) == True\nassert check_Consecutive([1,2,3,4,5,6]) == True\nassert check_Consecutive([1,2,3,4,5,6,7]) == True\nassert check_Consecutive([1,2,3,4,5,6,7,8]) == False\nassert check_Consecutive([1,2,3,4,5,6,7,8,9]) == True\nassert check_Consecutive([1,2,3,4,5,6,7,8,9,10]) == True\nassert check_Consecutive([1,2,3,4,5,6,7,8,9,10,11]) == False\nassert check_Consecutive([1,2,3,4,5,6,7,8,9,10,11,12]) == True\nassert check_Consecutive([1,2,3,4,5,6,7,8,9,10,11,12,13]) == True\nassert check_Consecutive([1,2,3,4,5,6,7,8,9,10,11,12,13,14]) == True\nassert check_Consecutive([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]) == True\nassert check_Consecutive([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16]) == True\nassert check_Consecutive([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17]) == True\nassert check_Consecutive([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18]) == True\nassert check_Consecutive([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19]) == True\nassert check_Consecutive([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]) == True\nassert check_Consecutive([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/474": [{"task_id": "Mbpp/474", "solution": "\"\"\"\nWrite a function to replace characters in a string.\nassert replace_char(\"polygon\",'y','l')==(\"pollgon\")\n\"\"\"\ndef replace_char(s, old_char, new_char):\n    # Replace all occurrences of 'old_char' with 'new_char'\n    return s.replace(old_char, new_char)\n\n# Test cases\nassert replace_char(\"polygon\",'y','l') == (\"pollgon\")\nassert replace_char(\"hello world\",'o','a') == (\"hella warld\")\nassert replace_char(\"programming\",'m','n') == (\"progrramninng\")", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/442": [{"task_id": "Mbpp/442", "solution": "\"\"\"\nWrite a function to find the ration of positive numbers in an array of integers.\nassert positive_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8])==0.54\n\"\"\"\ndef positive_count(arr):\n    # Initialize count for positive numbers\n    count = 0\n    # Iterate through each number in the array\n    for num in arr:\n        # Check if the number is greater than zero\n        if num > 0:\n            # Increment the count\n            count += 1\n    # Calculate the ratio of positive numbers to total numbers\n    return count / len(arr)\n\n# Test the function with provided data points\nassert positive_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]) == 0.54", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/454": [{"task_id": "Mbpp/454", "solution": "\"\"\"\nWrite a function that matches a word containing 'z'.\nassert text_match_wordz(\"pythonz.\")==True\n\"\"\"\ndef text_match_wordz(text):\n    # Check if the text contains the word 'z'\n    return 'z' in text\n\n# Test cases to verify the correctness of the function\nassert text_match_wordz(\"pythonz.\") == True\nassert text_match_wordz(\"hello\") == False\nassert text_match_wordz(\"world\") == False\nassert text_match_wordz(\"python\") == False\nassert text_match_wordz(\"pythonz\") == True\nassert text_match_wordz(\"pythonzz\") == True\nassert text_match_wordz(\"pythonzzz\") == True\nassert text_match_wordz(\"pythonzzzz\") == True\nassert text_match_wordz(\"pythonzzzzz\") == True\nassert text_match_wordz(\"pythonzzzzzz\") == True\nassert text_match_wordz(\"pythonzzzzzzz\") == True\nassert text_match_wordz(\"pythonzzzzzzzz\") == True\nassert text_match_wordz(\"pythonzzzzzzzzz\") == True\nassert text_match_wordz(\"pythonzzzzzzzzzz\") == True\nassert text_match_wordz(\"pythonzzzzzzzzzzz\") == True\nassert text_match_wordz(\"pythonzzzzzzzzzzz\") == True\nassert text_match_wordz(\"pythonzzzzzzzzzzz\") == True\nassert text_match_wordz(\"pythonzzzzzzzzzzz\") == True\nassert text_match_wordz(\"pythonzzzzzzzzzzz\") == True\nassert text_match_wordz(\"pythonzzzzzzzzzzz\") == True\nassert text_match_wordz(\"pythonzzzzzzzzzzz\") == True\nassert text_match_wordz(\"pythonzzzzzzzzzzz\") == True\nassert text_match_wordz(\"pythonzzzzzzzzzzz\") == True\nassert text_match_wordz(\"pythonzzzzzzzzzzz\") == True\nassert text_match_wordz(\"pythonzzzzzzzzzzz\") == True\nassert text_match_wordz(\"pythonzzzzzzzzzzz\") == True\nassert text_match_wordz(\"pythonzzzzzzzzzzz\") == True\nassert text_match_wordz(\"pythonzzzzzzzzzzz\") == True\nassert text_match_wordz(\"pythonzzzzzzzzzzz\") == True\nassert text_match_wordz(\"pythonzzzzzzzzzzz\") == True\nassert text_match_wordz(\"pythonzzzzzzzzzzz\") == True\nassert text_match_wordz(\"pythonzzzzzzzzzzz\") == True\nassert text_match_wordz(\"pythonzzzzzzzzzzz\") == True\nassert text_match_wordz(\"pythonzzzzzzzzzzz\") == True\nassert text_match_wordz(\"pythonzzzzzzzzzzz\") == True\nassert text_match_wordz(\"pythonzzzzzzzzzzz\") == True\nassert text_match_wordz(\"pythonzzzzzzzzzzz\") == True\nassert text_match_wordz(\"pythonzzzzzzzzzzz\") == True\nassert text_match_wordz(\"pythonzzzzzzzzzzz\") == True\nassert text_match_wordz(\"pythonzzzzzzzzzzz\") == True\nassert text_match_wordz(\"pythonzzzzzzzzzzz\") == True\nassert text_match_wordz(\"pythonzzzzzzzzzzz\") == True\nassert text_match_wordz(\"pythonzzzzzzzzzzz\") == True\nassert text_match_wordz(\"pythonzzzzzzzzzzz\") == True\nassert text_match_wordz(\"pythonzzzzzzzzzzz\") == True\nassert text_match_wordz(\"pythonzzzzzzzzzzz\") == True\nassert", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/554": [{"task_id": "Mbpp/554", "solution": "\"\"\"\nWrite a python function which takes a list of integers and only returns the odd ones.\nassert Split([1,2,3,4,5,6]) == [1,3,5]\n\"\"\"\ndef Split(lst):\n    return [x for x in lst if x % 2 != 0]\n\n# Test cases to verify the correctness of the solution\nassert Split([1,2,3,4,5,6]) == [1,3,5]", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/557": [{"task_id": "Mbpp/557", "solution": "\"\"\"\nWrite a function to toggle the case of all characters in a string.\nassert toggle_string(\"Python\")==(\"pYTHON\")\n\"\"\"\ndef toggle_string(s):\n    return s.swapcase()\n\n# Test cases\nassert toggle_string(\"Python\") == \"pYTHON\"\nassert toggle_string(\"Hello\") == \"hELLO\"\nassert toggle_string(\"12345\") == \"12345\"\nassert toggle_string(\"\") == \"\"\nassert toggle_string(\"AaBbCc\") == \"aAbBcC\"", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/470": [{"task_id": "Mbpp/470", "solution": "\"\"\"\nWrite a function to find the pairwise addition of the neighboring elements of the given tuple.\nassert add_pairwise((1, 5, 7, 8, 10)) == (6, 12, 15, 18)\n\"\"\"\ndef add_pairwise(tup):\n    # Initialize an empty list to store the results\n    result = []\n    # Iterate through the tuple using a for loop\n    for i in range(len(tup) - 1):\n        # Add the sum of the current element and the next one to the result list\n        result.append(tup[i] + tup[i+1])\n    return tuple(result)\n\n# Test the function with the provided data point\nassert add_pairwise((1, 5, 7, 8, 10)) == (6, 12, 15, 18)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/448": [{"task_id": "Mbpp/448", "solution": "\"\"\"\nWrite a function to calculate the sum of perrin numbers.\nassert cal_sum(9) == 49\n\"\"\"\n# Define the function to calculate the sum of perrin numbers\ndef cal_sum(n):\n    # Initialize the first two Perrin numbers\n    p1, p2 = 0, 1\n    # Calculate the sum of the first n Perrin numbers\n    total_sum = 0\n    for _ in range(n):\n        total_sum += p1\n        p1, p2 = p2, p1 + p2\n    return total_sum\n\n# Test the function with the provided data point\nassert cal_sum(9) == 49", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/441": [{"task_id": "Mbpp/441", "solution": "\"\"\"\nWrite a function to find the surface area of a cube of a given size.\nassert surfacearea_cube(5)==150\n\"\"\"\ndef surfacearea_cube(side_length):\n    # Calculate the surface area of a cube\n    return 6 * side_length ** 2\n\n# Test cases\nassert surfacearea_cube(5) == 150", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[1000.99]]}], "Mbpp/476": [{"task_id": "Mbpp/476", "solution": "\"\"\"\nWrite a python function to find the sum of the largest and smallest value in a given array.\nassert big_sum([1,2,3]) == 4\n\"\"\"\ndef big_sum(arr):\n    \"\"\"\n    Find the sum of the largest and smallest value in a given array.\n\n    Args:\n    arr (list): A list of integers.\n\n    Returns:\n    int: The sum of the largest and smallest values in the array.\n    \"\"\"\n    # Sort the array to easily find the minimum and maximum values\n    sorted_arr = sorted(arr)\n    \n    # Calculate the sum of the first element (smallest) and the last element (largest)\n    return sorted_arr[0] + sorted_arr[-1]\n\n# Test cases to verify the correctness of the function\nassert big_sum([1,2,3]) == 4\nassert big_sum([-1,-2,-3]) == -6\nassert big_sum([5,5,5,5]) == 10\nassert big_sum([]) == 0\nassert big_sum([10]) == 10", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/558": [{"task_id": "Mbpp/558", "solution": "\"\"\"\nWrite a python function to find the sum of the per-digit difference between two integers.\nassert digit_distance_nums(1,2) == 1\n\"\"\"\ndef digit_distance_nums(num1, num2):\n    # Convert both numbers to strings to easily access each digit\n    str_num1 = str(num1)\n    str_num2 = str(num2)\n    \n    # Initialize the sum of differences\n    total_diff = 0\n    \n    # Iterate over the digits of both numbers\n    for i in range(len(str_num1)):\n        if i < len(str_num2):  # Check if there's a corresponding digit in the second number\n            diff = abs(int(str_num1[i]) - int(str_num2[i]))\n            total_diff += diff\n    \n    return total_diff\n\n# Test cases to verify the correctness of the function\nassert digit_distance_nums(1,2) == 1\nassert digit_distance_nums(9,10) == 1\nassert digit_distance_nums(15,23) == 8\nassert digit_distance_nums(14,27) == 3", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/471": [{"task_id": "Mbpp/471", "solution": "\"\"\"\nWrite a python function to find the product of the array multiplication modulo n.\nassert find_remainder([ 100, 10, 5, 25, 35, 14 ],11) ==9\n\"\"\"\ndef find_remainder(arr, n):\n    # Initialize the result as 1 (since multiplying any number by 1 gives itself)\n    result = 1\n    \n    # Iterate through each element in the array\n    for num in arr:\n        # Multiply the current result by the current number modulo n\n        result = (result * num) % n\n    \n    return result\n\n# Test the function with the provided data point\nassert find_remainder([ 100, 10, 5, 25, 35, 14 ],11) == 9", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/477": [{"task_id": "Mbpp/477", "solution": "\"\"\"\nWrite a python function to convert the given string to lower case.\nassert is_lower(\"InValid\") == \"invalid\"\n\"\"\"\n# Define the function to convert a string to lowercase\ndef to_lowercase(s):\n    # Use the built-in str.lower() method to convert the string to lowercase\n    return s.lower()\n\n# Test the function with the provided assert statement\nassert to_lowercase(\"InValid\") == \"invalid\"\n\n# Print a success message if the test passed", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/479": [{"task_id": "Mbpp/479", "solution": "\"\"\"\nWrite a python function to find the first digit of a given number.\nassert first_Digit(123) == 1\n\"\"\"\ndef first_Digit(number):\n    \"\"\"\n    Find the first digit of a given number.\n\n    Args:\n    number (int): The number from which to extract the first digit.\n\n    Returns:\n    int: The first digit of the given number.\n    \"\"\"\n    return int(str(number)[0])\n\n# Test cases to verify the correctness of the function\nassert first_Digit(123) == 1\nassert first_Digit(-456789) == 4\nassert first_Digit(0) == 0\nassert first_Digit(100000) == 1\nassert first_Digit(-100000) == -1", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/562": [{"task_id": "Mbpp/562", "solution": "\"\"\"\nWrite a python function to find the length of the longest sublists.\nassert Find_Max_Length([[1],[1,4],[5,6,7,8]]) == 4\n\"\"\"\ndef Find_Max_Length(lst):\n    # Initialize max_length to 0\n    max_length = 0\n    \n    # Iterate over each sublist in the list\n    for sublist in lst:\n        # Update max_length if the current sublist's length is greater than max_length\n        if len(sublist) > max_length:\n            max_length = len(sublist)\n    \n    # Return the maximum length found\n    return max_length\n\n# Test cases to verify the correctness of the function\nassert Find_Max_Length([[1],[1,4],[5,6,7,8]]) == 4\nassert Find_Max_Length([[2,3,4],[5,6,7,8,9]]) == 5\nassert Find_Max_Length([[1,2,3,4,5,6,7,8,9,10]]) == 10\nassert Find_Max_Length([]) == 0", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/564": [{"task_id": "Mbpp/564", "solution": "\"\"\"\nWrite a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\nassert count_Pairs([1,2,1],3) == 2\n\"\"\"\ndef count_Pairs(arr, n):\n    # Initialize counter for pairs\n    count = 0\n    \n    # Iterate over all possible pairs\n    for i in range(n-1):\n        for j in range(i+1, n):\n            if arr[i] != arr[j]:\n                count += 1\n                \n    return count\n\n# Test cases to verify correctness\nassert count_Pairs([1,2,1],3) == 2", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/568": [{"task_id": "Mbpp/568", "solution": "\"\"\"\nWrite a function to create a list of N empty dictionaries.\nassert empty_list(5)==[{},{},{},{},{}]\n\"\"\"\ndef empty_list(n):\n    \"\"\"\n    Create a list of N empty dictionaries.\n\n    Args:\n    n (int): The number of empty dictionaries to create.\n\n    Returns:\n    list: A list containing N empty dictionaries.\n    \"\"\"\n    return [{} for _ in range(n)]\n\n# Test the function\nassert empty_list(5) == [{},{},{},{},{}]", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/566": [{"task_id": "Mbpp/566", "solution": "\"\"\"\nWrite a function to get the sum of the digits of a non-negative integer.\nassert sum_digits(345)==12\n\"\"\"\ndef sum_digits(n):\n    \"\"\"\n    Calculate the sum of the digits of a given non-negative integer.\n\n    Args:\n    n (int): A non-negative integer whose digits will be summed.\n\n    Returns:\n    int: The sum of the digits of the input number.\n    \"\"\"\n    return sum(int(digit) for digit in str(n))\n\n# Test cases to verify the correctness of the function\nassert sum_digits(345) == 12\nassert sum_digits(98765) == 30\nassert sum_digits(0) == 0\nassert sum_digits(123456789) == 45", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/559": [{"task_id": "Mbpp/559", "solution": "\"\"\"\nWrite a function to find the sum of the largest contiguous sublist in the given list.\nassert max_sub_array_sum([-2, -3, 4, -1, -2, 1, 5, -3], 8) == 7\n\"\"\"\ndef max_sub_array_sum(nums):\n    # Initialize the maximum sum to be negative infinity\n    max_sum = float('-inf')\n    \n    # Iterate through each number in the list\n    for num in nums:\n        # Update the current sum to be the maximum of the current number or the sum including the current number\n        current_sum = max(num, current_sum + num)\n        \n        # Update the maximum sum if the current sum is greater than the maximum sum found so far\n        max_sum = max(max_sum, current_sum)\n    \n    return max_sum\n\n# Test the function with the provided data point\nassert max_sub_array_sum([-2, -3, 4, -1, -2, 1, 5, -3], 8) == 7", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/560": [{"task_id": "Mbpp/560", "solution": "\"\"\"\nWrite a function to find the union of the elements of two given tuples and output them in sorted order.\nassert union_elements((3, 4, 5, 6),(5, 7, 4, 10) ) == (3, 4, 5, 6, 7, 10)\n\"\"\"\n# Define the function to find the union of two tuples and sort the result\ndef union_elements(tuple1, tuple2):\n    # Use set intersection to find common elements between the two tuples\n    common_elements = set(tuple1).intersection(set(tuple2))\n    # Combine the common elements with the original tuples\n    union_set = tuple1 + tuple2 + common_elements\n    # Sort the resulting set to get the final sorted list\n    return sorted(union_set)\n\n# Test the function with provided data points\nassert union_elements((3, 4, 5, 6), (5, 7, 4, 10)) == (3, 4, 5, 6, 7, 10)", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/569": [{"task_id": "Mbpp/569", "solution": "\"\"\"\nWrite a function to sort each sublist of strings in a given list of lists.\nassert sort_sublists([['green', 'orange'], ['black', 'white'], ['white', 'black', 'orange']])==[['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]\n\"\"\"\ndef sort_sublists(lst):\n    # Use list comprehension to iterate over each sublist in the main list\n    return [sorted(sublist) for sublist in lst]\n\n# Test the function with provided data points\nassert sort_sublists([['green', 'orange'], ['black', 'white'], ['white', 'black', 'orange']]) == [['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']], \"Test case 1 failed\"\nassert sort_sublists([[3, 2, 1], [5, 4, 6]]) == [[1, 2, 3], [4, 5, 6]], \"Test case 2 failed\"\nassert sort_sublists([]) == [], \"Test case 3 failed\"", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/565": [{"task_id": "Mbpp/565", "solution": "\"\"\"\nWrite a python function to split a string into characters.\nassert split('python') == ['p','y','t','h','o','n']\n\"\"\"\ndef split(s):\n    return list(s)\n\n# Test cases\nassert split('python') == ['p', 'y', 't', 'h', 'o', 'n']\nassert split('hello') == ['h', 'e', 'l', 'l', 'o']\nassert split('') == []", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/563": [{"task_id": "Mbpp/563", "solution": "\"\"\"\nWrite a function to extract values between quotation marks from a string.\nassert extract_values('\"Python\", \"PHP\", \"Java\"')==['Python', 'PHP', 'Java']\n\"\"\"\ndef extract_values(s):\n    # Split the string into substrings based on comma\n    sub_strings = s.split(',')\n    \n    # Initialize an empty list to store extracted values\n    extracted_values = []\n    \n    # Iterate over each substring\n    for sub_string in sub_strings:\n        # Strip any leading or trailing whitespace and remove quotes\n        cleaned_sub_string = sub_string.strip().strip('\"')\n        \n        # Append the cleaned substring to the list of extracted values\n        extracted_values.append(cleaned_sub_string)\n    \n    return extracted_values\n\n# Test the function with provided data points\nassert extract_values('\"Python\", \"PHP\", \"Java\"') == ['Python', 'PHP', 'Java']", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/453": [{"task_id": "Mbpp/453", "solution": "\"\"\"\nWrite a python function to find the sum of even factors of a number.\nassert sumofFactors(18) == 26\n\"\"\"\ndef sumofFactors(n):\n    # Initialize sum to zero\n    sum = 0\n    \n    # Iterate through all numbers from 1 to n\n    for i in range(1, n + 1):\n        # Check if i is an even factor of n\n        if n % i == 0 and i % 2 == 0:\n            # Add i to the sum\n            sum += i\n            \n    return sum\n\n# Test the function with provided data points\nassert sumofFactors(18) == 26", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[1000003]]}], "Mbpp/591": [{"task_id": "Mbpp/591", "solution": "\"\"\"\nWrite a python function to interchange the first and last elements in a list.\nassert swap_List([12, 35, 9, 56, 24]) == [24, 35, 9, 56, 12]\n\"\"\"\ndef swap_List(lst):\n    # Check if the list has at least two elements\n    if len(lst) < 2:\n        return lst\n    # Swap the first and last elements\n    lst[0], lst[-1] = lst[-1], lst[0]\n    return lst\n\n# Test cases to verify the correctness of the function\nassert swap_List([12, 35, 9, 56, 24]) == [24, 35, 9, 56, 12]", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/586": [{"task_id": "Mbpp/586", "solution": "\"\"\"\nWrite a python function to split a list at the nth eelment and add the first part to the end.\nassert split_Arr([12,10,5,6,52,36],2) == [5,6,52,36,12,10]\n\"\"\"\ndef split_Arr(arr, n):\n    # Split the array at the nth element\n    return arr[:n] + arr[n:]\n\n# Test the function with provided data points\nassert split_Arr([12,10,5,6,52,36],2) == [5,6,52,36,12,10]\n", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/572": [{"task_id": "Mbpp/572", "solution": "\"\"\"\nWrite a python function to remove duplicate numbers from a given number of lists.\nassert two_unique_nums([1,2,3,2,3,4,5]) == [1, 4, 5]\n\"\"\"\ndef two_unique_nums(nums):\n    # Convert list to set to remove duplicates\n    unique_nums = set(nums)\n    # Convert set back to list\n    return list(unique_nums)\n\n# Test the function\nassert two_unique_nums([1,2,3,2,3,4,5]) == [1, 4, 5]", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/577": [{"task_id": "Mbpp/577", "solution": "\"\"\"\nWrite a python function to find the last digit in factorial of a given number.\nassert last_Digit_Factorial(4) == 4\n\"\"\"\ndef last_Digit_Factorial(n):\n    # Calculate factorial of n\n    fact = 1\n    for i in range(2, n+1):\n        fact *= i\n    \n    # Return the last digit of the factorial\n    return fact % 10\n\n# Test cases\nassert last_Digit_Factorial(4) == 4\nassert last_Digit_Factorial(5) == 0\nassert last_Digit_Factorial(6) == 6\nassert last_Digit_Factorial(7) == 0\nassert last_Digit_Factorial(8) == 4\nassert last_Digit_Factorial(9) == 0\nassert last_Digit_Factorial(10) == 0\nassert last_Digit_Factorial(11) == 0\nassert last_Digit_Factorial(12) == 0\nassert last_Digit_Factorial(13) == 0\nassert last_Digit_Factorial(14) == 0\nassert last_Digit_Factorial(15) == 0\nassert last_Digit_Factorial(16) == 0\nassert last_Digit_Factorial(17) == 0\nassert last_Digit_Factorial(18) == 0\nassert last_Digit_Factorial(19) == 0\nassert last_Digit_Factorial(20) == 0\nassert last_Digit_Factorial(21) == 0\nassert last_Digit_Factorial(22) == 0\nassert last_Digit_Factorial(23) == 0\nassert last_Digit_Factorial(24) == 0\nassert last_Digit_Factorial(25) == 0\nassert last_Digit_Factorial(26) == 0\nassert last_Digit_Factorial(27) == 0\nassert last_Digit_Factorial(28) == 0\nassert last_Digit_Factorial(29) == 0\nassert last_Digit_Factorial(30) == 0\nassert last_Digit_Factorial(31) == 0\nassert last_Digit_Factorial(32) == 0\nassert last_Digit_Factorial(33) == 0\nassert last_Digit_Factorial(34) == 0\nassert last_Digit_Factorial(35) == 0\nassert last_Digit_Factorial(36) == 0\nassert last_Digit_Factorial(37) == 0\nassert last_Digit_Factorial(38) == 0\nassert last_Digit_Factorial(39) == 0\nassert last_Digit_Factorial(40) == 0\nassert last_Digit_Factorial(41) == 0\nassert last_Digit_Factorial(42) == 0\nassert last_Digit_Factorial(43) == 0\nassert last_Digit_Factorial(44) == 0\nassert last_Digit_Factorial(45) == 0\nassert last_Digit_Factorial(46) == 0\nassert last_Digit_Factorial(47) == 0\nassert last_Digit_Factorial(48) == 0\nassert last_Digit_Factorial(49) == 0\nassert last_Digit_Factorial(50) == 0\nassert last_Digit_Factorial(", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/578": [{"task_id": "Mbpp/578", "solution": "\"\"\"\nWrite a function to interleave 3 lists of the same length into a single flat list.\nassert interleave_lists([1,2,3,4,5,6,7],[10,20,30,40,50,60,70],[100,200,300,400,500,600,700])==[1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700]\n\"\"\"\ndef interleave_lists(list1, list2, list3):\n    # Check if all lists have the same length\n    if len(list1) != len(list2) or len(list2) != len(list3):\n        raise ValueError(\"All input lists must be of the same length.\")\n    \n    # Interleave the lists using zip() and then flatten the result\n    interleaved_list = [item for sublist in zip(list1, list2, list3) for item in sublist]\n    \n    return interleaved_list\n\n# Test the function with provided data points\nassert interleave_lists([1,2,3,4,5,6,7],[10,20,30,40,50,60,70],[100,200,300,400,500,600,700]) == [1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700]", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/596": [{"task_id": "Mbpp/596", "solution": "\"\"\"\nWrite a function to find the size in bytes of the given tuple.\nassert tuple_size((\"A\", 1, \"B\", 2, \"C\", 3) ) == sys.getsizeof((\"A\", 1, \"B\", 2, \"C\", 3))\n\"\"\"\nimport sys\n\ndef tuple_size(input_tuple):\n    return sys.getsizeof(input_tuple)\n\n# Test cases\nassert tuple_size((\"A\", 1, \"B\", 2, \"C\", 3)) == sys.getsizeof((\"A\", 1, \"B\", 2, \"C\", 3))\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/573": [{"task_id": "Mbpp/573", "solution": "\"\"\"\nWrite a python function to calculate the product of the unique numbers in a given list.\nassert unique_product([10, 20, 30, 40, 20, 50, 60, 40]) ==  720000000\n\"\"\"\ndef unique_product(numbers):\n    # Use set to remove duplicates and then multiply the elements\n    return 1 * (set(numbers) - {0}).product()\n\n# Test cases to verify the solution\nassert unique_product([10, 20, 30, 40, 20, 50, 60, 40]) ==  720000000", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/567": [{"task_id": "Mbpp/567", "solution": "\"\"\"\nWrite a function to check whether a specified list is sorted or not.\nassert issort_list([1,2,4,6,8,10,12,14,16,17])==True\n\"\"\"\ndef issort_list(lst):\n    # Check if the list is empty or has only one element, which is considered sorted\n    if len(lst) <= 1:\n        return True\n    \n    # Iterate through the list starting from the second element\n    for i in range(1, len(lst)):\n        # If any element is greater than its predecessor, the list is not sorted\n        if lst[i] < lst[i-1]:\n            return False\n    \n    # If no elements are found to be out of order, the list is sorted\n    return True\n\n# Test the function with provided data points\nassert issort_list([1,2,4,6,8,10,12,14,16,17]) == True", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/579": [{"task_id": "Mbpp/579", "solution": "\"\"\"\nWrite a function to find the dissimilar elements in the given two tuples.\nassert find_dissimilar((3, 4, 5, 6), (5, 7, 4, 10)) == (3, 6, 7, 10)\n\"\"\"\ndef find_dissimilar(tup1, tup2):\n    # Convert tuples to sets to remove duplicates and then find the difference\n    set1 = set(tup1)\n    set2 = set(tup2)\n    \n    # Find the symmetric difference between the two sets\n    dissimilar_elements = set1.symmetric_difference(set2)\n    \n    return tuple(dissimilar_elements)\n\n# Test cases\nassert find_dissimilar((3, 4, 5, 6), (5, 7, 4, 10)) == (3, 6, 7, 10)\nassert find_dissimilar((1, 2, 3), (4, 5, 6)) == (1, 2, 3, 4, 5, 6)\nassert find_dissimilar((1, 2, 3, 4), (1, 2, 3, 4)) == ()", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[["a", "b", "c", "d", "e", "f", "g"], ["h", "i", "j", "k", "l", "m", "n"]]]}], "Mbpp/583": [{"task_id": "Mbpp/583", "solution": "\"\"\"\nWrite a function which returns nth catalan number.\nassert catalan_number(10)==16796\n\"\"\"\ndef catalan_number(n):\n    # Base case: C(0) = 1\n    if n == 0:\n        return 1\n    # Recursive formula: C(n) = (n+1) * C(n-1) / (n+2)\n    else:\n        return (n + 1) * catalan_number(n - 1) // (n + 2)\n\n# Test the function with provided data points\nassert catalan_number(10) == 16796", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/585": [{"task_id": "Mbpp/585", "solution": "\"\"\"\nWrite a function to find the n most expensive items in a given dataset.\nassert expensive_items([{'name': 'Item-1', 'price': 101.1},{'name': 'Item-2', 'price': 555.22}],1)==[{'name': 'Item-2', 'price': 555.22}]\n\"\"\"\ndef expensive_items(data, n):\n    # Sort the data based on price in descending order\n    sorted_data = sorted(data, key=lambda x: x['price'], reverse=True)\n    \n    # Return the first n elements of the sorted data\n    return sorted_data[:n]\n\n# Test cases\nassert expensive_items([{'name': 'Item-1', 'price': 101.1},{'name': 'Item-2', 'price': 555.22}],1) == [{'name': 'Item-2', 'price': 555.22}]\nassert expensive_items([{'name': 'Item-1', 'price': 101.1},{'name': 'Item-2', 'price': 555.22},{'name': 'Item-3', 'price': 456.78}],2) == [{'name': 'Item-2', 'price': 555.22}, {'name': 'Item-1', 'price': 101.1}]\nassert expensive_items([],3) == []", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/590": [{"task_id": "Mbpp/590", "solution": "\"\"\"\nWrite a function to convert polar coordinates to rectangular coordinates.\nassert polar_rect(3,4)==((5.0, 0.9272952180016122), (-2+2.4492935982947064e-16j))\n\"\"\"\nimport cmath\n\ndef polar_rect(r, theta):\n    # Convert polar coordinates (r, theta) to rectangular coordinates (x, y)\n    x = r * cmath.cos(theta)\n    y = r * cmath.sin(theta)\n    return (x, y)\n\n# Test cases\nassert polar_rect(3, 4) == ((5.0, 0.9272952180016122), (-2+2.4492935982947064e-16j))\n", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/588": [{"task_id": "Mbpp/588", "solution": "\"\"\"\nWrite a python function to find the difference between largest and smallest value in a given list.\nassert big_diff([1,2,3,4]) == 3\n\"\"\"\ndef big_diff(nums):\n    \"\"\"\n    Write a python function to find the difference between largest and smallest value in a given list.\n    \n    Args:\n    nums (list): A list of integers.\n    \n    Returns:\n    int: The difference between the largest and smallest values in the list.\n    \"\"\"\n    if not nums:\n        return 0\n    \n    min_val = max_val = nums[0]\n    for num in nums[1:]:\n        if num < min_val:\n            min_val = num\n        elif num > max_val:\n            max_val = num\n    \n    return max_val - min_val\n\n# Test cases\nassert big_diff([1,2,3,4]) == 3\nassert big_diff([]) == 0\nassert big_diff([-5, -1, -3, -7]) == 6\nassert big_diff([10, 20, 30, 40, 50]) == 40", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/587": [{"task_id": "Mbpp/587", "solution": "\"\"\"\nWrite a function to convert a list to a tuple.\nassert list_tuple([5, 10, 7, 4, 15, 3])==(5, 10, 7, 4, 15, 3)\n\"\"\"\ndef list_tuple(lst):\n    return tuple(lst)\n\n# Test the function\nassert list_tuple([5, 10, 7, 4, 15, 3]) == (5, 10, 7, 4, 15, 3)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/580": [{"task_id": "Mbpp/580", "solution": "\"\"\"\nWrite a function to remove uneven elements in the nested mixed tuple.\nassert extract_even((4, 5, (7, 6, (2, 4)), 6, 8)) == (4, (6, (2, 4)), 6, 8)\n\"\"\"\ndef extract_even(mixed_tuple):\n    # Initialize an empty list to store even elements\n    even_elements = []\n    \n    # Iterate through each element in the mixed tuple\n    for element in mixed_tuple:\n        # Check if the element is a tuple itself\n        if isinstance(element, tuple):\n            # Recursively call the function on the sub-tuple\n            even_elements.extend(extract_even(element))\n        else:\n            # Check if the element is an integer and even\n            if element % 2 == 0:\n                even_elements.append(element)\n    \n    return tuple(even_elements)\n\n# Test cases to verify the correctness of the function\nassert extract_even((4, 5, (7, 6, (2, 4)), 6, 8)) == (4, (6, (2, 4)), 6, 8)", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/581": [{"task_id": "Mbpp/581", "solution": "\"\"\"\nWrite a python function to find the surface area of a square pyramid with a given base edge and height.\nassert surface_Area(3,4) == 33\n\"\"\"\ndef surface_Area(base_edge, height):\n    # Calculate the slant height using Pythagorean theorem\n    slant_height = (base_edge**2 + height**2)**0.5\n    \n    # Calculate the surface area of the pyramid\n    surface_area = 0.5 * base_edge * slant_height\n    \n    return surface_area\n\n# Test cases to verify the correctness of the function\nassert surface_Area(3,4) == 33\nassert surface_Area(5,12) == 84\nassert surface_Area(7,10) == 169", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/603": [{"task_id": "Mbpp/603", "solution": "\"\"\"\nWrite a function to get all lucid numbers smaller than or equal to a given integer.\nassert get_ludic(10) == [1, 2, 3, 5, 7]\n\"\"\"\ndef get_ludic(n):\n    # Initialize an empty list to store lucid numbers\n    lucids = []\n    \n    # Iterate through numbers from 1 to n\n    for num in range(1, n + 1):\n        # Check if the number is a prime\n        if num > 1 and all(num % i != 0 for i in range(2, int(num**0.5) + 1)):\n            # If it's prime, add it to the list of lucid numbers\n            lucids.append(num)\n    \n    return lucids\n\n# Test cases to verify the correctness of the function\nassert get_ludic(10) == [1, 2, 3, 5, 7]\nassert get_ludic(15) == [1, 2, 3, 5, 7, 11, 13, 17]\nassert get_ludic(20) == [1, 2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 77, 83, 89, 97]", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/589": [{"task_id": "Mbpp/589", "solution": "\"\"\"\nWrite a function to find perfect squares between two given numbers.\nassert perfect_squares(1,30)==[1, 4, 9, 16, 25]\n\"\"\"\ndef perfect_squares(start, end):\n    \"\"\"\n    Find all perfect squares between two given numbers (inclusive).\n    \n    Parameters:\n    start (int): The starting number of the range.\n    end (int): The ending number of the range.\n    \n    Returns:\n    list: A list of perfect squares within the specified range.\n    \"\"\"\n    # Initialize an empty list to store the perfect squares\n    squares = []\n    \n    # Iterate through each number from start to end\n    for num in range(start, end + 1):\n        # Check if the square root of the number is an integer\n        if int(num**0.5) == num**0.5:\n            # If it is, add the square to the list\n            squares.append(num)\n    \n    return squares\n\n# Test cases to verify the correctness of the function\nassert perfect_squares(1,30)==[1, 4, 9, 16, 25], \"Test case 1 failed\"\nassert perfect_squares(1,5)==[1, 4, 9], \"Test case 2 failed\"\nassert perfect_squares(1,8)==[1, 4, 9, 16], \"Test case 3 failed\"\nassert perfect_squares(1,0)==[], \"Test case 4 failed\"\nassert perfect_squares(-5,-1)==[-1, 0, 1, 4, 9, 16], \"Test case 5 failed\"\nassert perfect_squares(20,30)==[25, 36, 49, 64, 81], \"Test case 6 failed\"", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/582": [{"task_id": "Mbpp/582", "solution": "\"\"\"\nWrite a function to check if a dictionary is empty\nassert my_dict({10})==False\n\"\"\"\n# Define the function to check if a dictionary is empty\ndef is_empty(dictionary):\n    # Check if the dictionary is not empty\n    return bool(dictionary)\n\n# Test cases to verify the correctness of the function\nassert is_empty({10}) == False\n\n# Print the result of the test case", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/592": [{"task_id": "Mbpp/592", "solution": "\"\"\"\nWrite a python function to find the sum of the product of consecutive binomial co-efficients.\nassert sum_Of_product(3) == 15\n\"\"\"\nimport math\n\ndef sum_of_product(n):\n    # Initialize the result variable\n    result = 0\n    \n    # Calculate the sum of product of consecutive binomial coefficients\n    for i in range(1, n+1):\n        result += math.factorial(i) * (i + 1)\n    \n    return result\n\n# Test the function with provided data points\nassert sum_of_product(3) == 15", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/593": [{"task_id": "Mbpp/593", "solution": "\"\"\"\nWrite a function to remove leading zeroes from an ip address.\nassert removezero_ip(\"216.08.094.196\")==('216.8.94.196')\n\"\"\"\ndef removezero_ip(ip_address):\n    # Remove leading zeroes from the IP address\n    return ip_address.lstrip('0')\n\n# Test cases to verify the correctness of the solution\nassert removezero_ip(\"216.08.094.196\") == ('216.8.94.196')\nassert removezero_ip(\"0000216.08.094.196\") == ('216.8.94.196')\nassert removezero_ip(\"00000000216.08.094.196\") == ('216.8.94.196')\nassert removezero_ip(\"0000000000000000216.08.094.196\") == ('216.8.94.196')", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/574": [{"task_id": "Mbpp/574", "solution": "\"\"\"\nWrite a function to find the surface area of a cylinder.\nassert surfacearea_cylinder(10,5)==942.45\n\"\"\"\nimport math\n\ndef surfacearea_cylinder(radius, height):\n    \"\"\"\n    Calculate the surface area of a cylinder.\n\n    Parameters:\n    radius (float): The radius of the cylinder's base.\n    height (float): The height of the cylinder.\n\n    Returns:\n    float: The surface area of the cylinder.\n    \"\"\"\n    return 2 * math.pi * radius * (radius + height)\n\n# Test cases\nassert surfacearea_cylinder(10,5) == 942.45", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/598": [{"task_id": "Mbpp/598", "solution": "\"\"\"\nWrite a function to check whether the given number is armstrong or not.\nassert armstrong_number(153)==True\n\"\"\"\ndef armstrong_number(n):\n    # Convert the number to string to easily iterate over each digit\n    num_str = str(n)\n    \n    # Calculate the sum of the cubes of each digit\n    sum_of_cubes = sum(int(digit) ** 3 for digit in num_str)\n    \n    # Check if the original number is equal to the sum of its digits raised to the power of 3\n    return n == sum_of_cubes\n\n# Test cases to verify the correctness of the function\nassert armstrong_number(153) == True\nassert armstrong_number(1634) == True\nassert armstrong_number(927) == True\nassert armstrong_number(0) == True\nassert armstrong_number(1) == True\nassert armstrong_number(150) == False\nassert armstrong_number(140) == False\nassert armstrong_number(135) == False\nassert armstrong_number(1533) == False\nassert armstrong_number(16048) == False\nassert armstrong_number(1729) == False\nassert armstrong_number(18074) == False\nassert armstrong_number(19074) == False\nassert armstrong_number(20256) == False\nassert armstrong_number(21056) == False\nassert armstrong_number(22056) == False\nassert armstrong_number(23056) == False\nassert armstrong_number(24056) == False\nassert armstrong_number(25056) == False\nassert armstrong_number(26056) == False\nassert armstrong_number(27056) == False\nassert armstrong_number(28056) == False\nassert armstrong_number(29056) == False\nassert armstrong_number(30056) == False\nassert armstrong_number(31056) == False\nassert armstrong_number(32056) == False\nassert armstrong_number(33056) == False\nassert armstrong_number(34056) == False\nassert armstrong_number(35056) == False\nassert armstrong_number(36056) == False\nassert armstrong_number(37056) == False\nassert armstrong_number(38056) == False\nassert armstrong_number(39056) == False\nassert armstrong_number(40056) == False\nassert armstrong_number(41056) == False\nassert armstrong_number(42056) == False\nassert armstrong_number(43056) == False\nassert armstrong_number(44056) == False\nassert armstrong_number(45056) == False\nassert armstrong_number(46056) == False\nassert armstrong_number(47056) == False\nassert armstrong_number(48056) == False\nassert armstrong_number(49056) == False\nassert armstrong_number(50056) == False\nassert armstrong_number(51056) == False\nassert armstrong_number(52056) == False\nassert armstrong_number(53056) == False\nassert armstrong_number(54056) == False\nassert armstrong_number(55056) == False", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/614": [{"task_id": "Mbpp/614", "solution": "\"\"\"\nWrite a function to find the cumulative sum of all the values that are present in the given tuple list.\nassert cummulative_sum([(1, 3), (5, 6, 7), (2, 6)]) == 30\n\"\"\"\ndef cummulative_sum(tup_list):\n    # Initialize the sum variable to zero\n    total_sum = 0\n    \n    # Iterate over each sublist in the tuple list\n    for sublist in tup_list:\n        # Add the sum of elements in each sublist to the total sum\n        total_sum += sum(sublist)\n    \n    # Return the final cumulative sum\n    return total_sum\n\n# Test the function with provided data points\nassert cummulative_sum([(1, 3), (5, 6, 7), (2, 6)]) == 30", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/618": [{"task_id": "Mbpp/618", "solution": "\"\"\"\nWrite a function to divide two lists element wise.\nassert div_list([4,5,6],[1, 2, 3])==[4.0,2.5,2.0]\n\"\"\"\ndef div_list(list1, list2):\n    # Check if both lists have the same length\n    if len(list1) != len(list2):\n        raise ValueError(\"Both lists must be of the same length\")\n    \n    # Perform element-wise division\n    result = [x / y for x, y in zip(list1, list2)]\n    \n    return result\n\n# Test cases\nassert div_list([4,5,6],[1, 2, 3])==[4.0,2.5,2.0]", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/595": [{"task_id": "Mbpp/595", "solution": "\"\"\"\nWrite a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nassert min_Swaps(\"1101\",\"1110\") == 1\n\"\"\"\ndef min_swaps(s1, s2):\n    # Convert strings to lists for easier manipulation\n    s1 = list(s1)\n    s2 = list(s2)\n    \n    # Count the number of mismatches between s1 and s2\n    mismatch_count = sum(1 for i in range(len(s1)) if s1[i] != s2[i])\n    \n    # The minimum number of swaps needed is equal to the number of mismatches\n    return mismatch_count\n\n# Test cases to verify the correctness of the function\nassert min_swaps(\"1101\", \"1110\") == 1\nassert min_swaps(\"1010\", \"1000\") == 3\nassert min_swaps(\"0000\", \"0000\") == 0", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/594": [{"task_id": "Mbpp/594", "solution": "\"\"\"\nWrite a function to find the difference of the first even and first odd number of a given list.\nassert diff_even_odd([1,3,5,7,4,1,6,8])==3\n\"\"\"\ndef diff_even_odd(nums):\n    # Find the first even and first odd numbers\n    first_even = next((num for num in nums if num % 2 == 0), None)\n    first_odd = next((num for num in nums if num % 2 != 0), None)\n    \n    # Calculate the difference between the first even and first odd numbers\n    return first_even - first_odd\n\n# Test cases\nassert diff_even_odd([1,3,5,7,4,1,6,8]) == 3", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/602": [{"task_id": "Mbpp/602", "solution": "\"\"\"\nWrite a python function to find the first repeated character in a given string.\nassert first_repeated_char(\"abcabc\") == \"a\"\n\"\"\"\ndef first_repeated_char(s):\n    # Create an empty dictionary to store characters and their counts\n    char_count = {}\n    \n    # Iterate through each character in the string\n    for char in s:\n        # If the character is already in the dictionary, it's a repeat\n        if char in char_count:\n            return char\n        # Otherwise, add the character to the dictionary with a count of 1\n        else:\n            char_count[char] = 1\n    \n    # If no repeats were found, return None\n    return None\n\n# Test cases to verify the correctness of the function\nassert first_repeated_char(\"abcabc\") == \"a\"\nassert first_repeated_char(\"abcdef\") == None\nassert first_repeated_char(\"abba\") == \"b\"\nassert first_repeated_char(\"\") == None", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/576": [{"task_id": "Mbpp/576", "solution": "\"\"\"\nWrite a python function to check whether a list is sublist of another or not.\nassert is_Sub_Array([1,4,3,5],[1,2]) == False\n\"\"\"\ndef is_Sub_Array(main_list, sub_list):\n    # Iterate through each element in main_list\n    for i in range(len(main_list)):\n        # Check if the current element matches the first element of sub_list\n        if main_list[i] == sub_list[0]:\n            # If it does, check if the rest of the elements in main_list match the rest of sub_list\n            if main_list[i:i+len(sub_list)] == sub_list:\n                return True\n    return False\n\n# Test cases\nassert is_Sub_Array([1,4,3,5],[1,2]) == False\nassert is_Sub_Array([1,2,3,4,5], [1,2]) == True\nassert is_Sub_Array([1,2,3,4,5], [6,7]) == False\nassert is_Sub_Array([], []) == True\nassert is_Sub_Array([1,2,3,4,5], [1,2,3]) == True\nassert is_Sub_Array([1,2,3,4,5], [1,2,3,4]) == True\nassert is_Sub_Array([1,2,3,4,5], [1,2,3,4,5]) == True\nassert is_Sub_Array([1,2,3,4,5], [1,2,3,4,5,6]) == False\nassert is_Sub_Array([1,2,3,4,5], [1,2,3,4,5,6,7]) == False\nassert is_Sub_Array([1,2,3,4,5], [1,2,3,4,5,6,7,8]) == False\nassert is_Sub_Array([1,2,3,4,5], [1,2,3,4,5,6,7,8,9]) == False\nassert is_Sub_Array([1,2,3,4,5], [1,2,3,4,5,6,7,8,9,10]) == False\nassert is_Sub_Array([1,2,3,4,5], [1,2,3,4,5,6,7,8,9,10,11]) == False\nassert is_Sub_Array([1,2,3,4,5], [1,2,3,4,5,6,7,8,9,10,11,12]) == False\nassert is_Sub_Array([1,2,3,4,5], [1,2,3,4,5,6,7,8,9,10,11,12,13]) == False\nassert is_Sub_Array([1,2,3,4,5], [1,2,3,4,5,6,7,8,9,10,11,12,13,14]) == False\nassert is_Sub_Array([1,2,3,4,5], [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]) == False\nassert is_Sub_Array([1,2,3,4,5], [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16]) == False\nassert is_Sub_Array([1,2,3,4,5], [1,2,3,4,5,6,", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/608": [{"task_id": "Mbpp/608", "solution": "\"\"\"\nWrite a python function to find nth bell number.\nassert bell_Number(2) == 2\n\"\"\"\ndef bell_number(n):\n    # Base case: Bell number for n=0 is 1\n    if n == 0:\n        return 1\n    \n    # Initialize the first two Bell numbers\n    b = [0, 1]\n    \n    # Calculate Bell numbers using dynamic programming\n    for i in range(2, n + 1):\n        b.append(sum(b[j] * (i - j) for j in range(i))\n    \n    return b[n]\n\n# Test cases to verify the correctness of the function\nassert bell_number(2) == 2", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/607": [{"task_id": "Mbpp/607", "solution": "\"\"\"\nWrite a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\nassert find_literals('The quick brown fox jumps over the lazy dog.', 'fox') == ('fox', 16, 19)\n\"\"\"\nimport re\n\ndef find_literals(text, pattern):\n    # Use the re module to find all occurrences of the pattern in the text\n    matches = re.findall(pattern, text)\n    \n    if not matches:\n        return None, None, None\n    \n    # Return the first match found, its start index, and its end index\n    return matches[0], matches[0].start(), matches[0].end()\n\n# Test cases to verify the correctness of the function\nassert find_literals('The quick brown fox jumps over the lazy dog.', 'fox') == ('fox', 16, 19)\nassert find_literals('Hello world!', 'world') == ('world', 7, 12)\nassert find_literals('Python programming is fun.', 'is') == ('is', 8, 11)\nassert find_literals('No matches here.', 'nonexistent') == None, \"No matches found\"", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/600": [{"task_id": "Mbpp/600", "solution": "\"\"\"\nWrite a python function to check whether the given number is even or not.\nassert is_Even(1) == False\n\"\"\"\n# Define the function to check if a number is even\ndef is_even(num):\n    # Check if the number is divisible by 2 without any remainder\n    return num % 2 == 0\n\n# Test cases to verify the correctness of the function\nassert is_even(1) == False\nassert is_even(4) == True\nassert is_even(0) == True\nassert is_even(-2) == True\nassert is_even(-3) == False", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/597": [{"task_id": "Mbpp/597", "solution": "\"\"\"\nWrite a function to find kth element from the given two sorted arrays.\nassert find_kth([2, 3, 6, 7, 9], [1, 4, 8, 10], 5) == 6\n\"\"\"\ndef find_kth(arr1, arr2, k):\n    # Ensure k is within valid range\n    if k > len(arr1) + len(arr2):\n        return None\n    \n    # Use a binary search approach to find the k-th element\n    def binary_search(arr1, arr2, start1, end1, start2, end2, k):\n        if start1 >= end1 or start2 >= end2:\n            return None\n        \n        mid1 = (start1 + end1) // 2\n        mid2 = (start2 + end2) // 2\n        \n        if mid1 + mid2 < k - 1:\n            return binary_search(arr1, arr2, mid1 + 1, end1, mid2 + 1, end2, k)\n        \n        if mid1 + mid2 > k - 1:\n            return binary_search(arr1, arr2, start1, mid1, start2, mid2, k)\n        \n        if arr1[mid1] <= arr2[mid2]:\n            return binary_search(arr1, arr2, mid1 + 1, end1, start2, mid2, k)\n        else:\n            return binary_search(arr1, arr2, start1, mid1, mid2 + 1, end2, k)\n    \n    return binary_search(arr1, arr2, 0, len(arr1), 0, len(arr2), k)\n\n# Test cases\nassert find_kth([2, 3, 6, 7, 9], [1, 4, 8, 10], 5) == 6\nassert find_kth([1, 2, 3, 4, 5], [6, 7, 8, 9, 10], 10) == 10\nassert find_kth([], [], 1) == None\nassert find_kth([1, 2, 3], [4, 5, 6], 3) == 3", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/615": [{"task_id": "Mbpp/615", "solution": "\"\"\"\nWrite a function which takes a tuple of tuples and returns the average value for each tuple as a list.\nassert average_tuple(((10, 10, 10, 12), (30, 45, 56, 45), (81, 80, 39, 32), (1, 2, 3, 4)))==[30.5, 34.25, 27.0, 23.25]\n\"\"\"\ndef average_tuple(tuples):\n    # Calculate the average of each tuple\n    averages = [sum(sublist) / len(sublist) for sublist in tuples]\n    return averages\n\n# Test the function with provided data\nassert average_tuple(((10, 10, 10, 12), (30, 45, 56, 45), (81, 80, 39, 32), (1, 2, 3, 4))) == [30.5, 34.25, 27.0, 23.25]", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/622": [{"task_id": "Mbpp/622", "solution": "\"\"\"\nWrite a function to find the median of two sorted lists of same size.\nassert get_median([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5) == 16.0\n\"\"\"\ndef get_median(sorted_list1, sorted_list2, n):\n    # Combine both lists into one\n    combined_list = sorted_list1 + sorted_list2\n    \n    # Sort the combined list\n    combined_list.sort()\n    \n    # Calculate the median\n    if n % 2 == 1:\n        # If odd number of elements, return the middle element\n        median = combined_list[n // 2]\n    else:\n        # If even number of elements, return the average of the two middle elements\n        median = (combined_list[n // 2 - 1] + combined_list[n // 2]) / 2\n    \n    return median\n\n# Test cases\nassert get_median([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5) == 16.0", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/599": [{"task_id": "Mbpp/599", "solution": "\"\"\"\nWrite a function to find sum and average of first n natural numbers.\nassert sum_average(10)==(55, 5.5)\n\"\"\"\ndef sum_average(n):\n    # Calculate sum using formula for the sum of first n natural numbers\n    sum_n = (n * (n + 1)) // 2\n    \n    # Calculate average\n    avg_n = sum_n / n\n    \n    return sum_n, avg_n\n\n# Test the function with provided data points\nassert sum_average(10) == (55, 5.5)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/612": [{"task_id": "Mbpp/612", "solution": "\"\"\"\nWrite a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\nassert merge([['x', 'y'], ['a', 'b'], ['m', 'n']]) == [['x', 'a', 'm'], ['y', 'b', 'n']]\n\"\"\"\ndef merge(list_of_lists):\n    return [list(zip(*sublist)) for sublist in list_of_lists]\n\n# Test cases to verify the correctness of the solution\nassert merge([['x', 'y'], ['a', 'b'], ['m', 'n']]) == [['x', 'a', 'm'], ['y', 'b', 'n']]\nassert merge([[1, 2], [3, 4]]) == [[1, 3], [2, 4]]\nassert merge([]) == []", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/623": [{"task_id": "Mbpp/623", "solution": "\"\"\"\nWrite a function to compute the n-th power of each number in a list.\nassert nth_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],2)==[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]\n\"\"\"\ndef nth_nums(nums, n):\n    # Initialize an empty list to store the results\n    result = []\n    \n    # Iterate through each number in the input list\n    for num in nums:\n        # Compute the n-th power of the current number and append it to the result list\n        result.append(num ** n)\n    \n    # Return the resulting list containing the n-th powers of all numbers\n    return result\n\n# Test the function with provided data points\nassert nth_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2) == [1, 4, 9, 16, 25, 36, 49, 64, 81, 100]", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/604": [{"task_id": "Mbpp/604", "solution": "\"\"\"\nWrite a function to reverse words seperated by spaces in a given string.\nassert reverse_words(\"python program\")==(\"program python\")\n\"\"\"\ndef reverse_words(s):\n    # Split the input string into words using space as delimiter\n    words = s.split()\n    # Reverse the order of the words\n    reversed_words = words[::-1]\n    # Join the reversed words back into a single string\n    return ' '.join(reversed_words)\n\n# Test cases to verify the correctness of the solution\nassert reverse_words(\"python program\") == \"program python\"\nassert reverse_words(\"hello world\") == \"world hello\"\nassert reverse_words(\"reverse this sentence\") == \"sentence this reverse\"", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/610": [{"task_id": "Mbpp/610", "solution": "\"\"\"\nWrite a python function which takes a list and returns a list with the same elements, but the k'th element removed.\nassert remove_kth_element([1,1,2,3,4,4,5,1],3)==[1, 1, 3, 4, 4, 5, 1]\n\"\"\"\ndef remove_kth_element(lst, k):\n    # Check if k is within the valid range\n    if k < len(lst) and k >= 0:\n        return lst[:k] + lst[k+1:]\n    else:\n        raise ValueError(\"Index out of range\")\n\n# Test cases to verify the correctness of the solution\nassert remove_kth_element([1,1,2,3,4,4,5,1],3) == [1, 1, 3, 4, 4, 5, 1]\nassert remove_kth_element([1,1,2,3,4,4,5,1],-1) == ValueError(\"Index out of range\")\nassert remove_kth_element([1,1,2,3,4,4,5,1],6) == ValueError(\"Index out of range\")", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/616": [{"task_id": "Mbpp/616", "solution": "\"\"\"\nWrite a function which takes two tuples of the same length and performs the element wise modulo.\nassert tuple_modulo((10, 4, 5, 6), (5, 6, 7, 5)) == (0, 4, 5, 1)\n\"\"\"\ndef tuple_modulo(tup1, tup2):\n    # Use list comprehension to perform element-wise modulo operation\n    return tuple([a % b for a, b in zip(tup1, tup2)])\n\n# Test cases to verify the correctness of the function\nassert tuple_modulo((10, 4, 5, 6), (5, 6, 7, 5)) == (0, 4, 5, 1)\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/629": [{"task_id": "Mbpp/629", "solution": "\"\"\"\nWrite a python function to find even numbers from a list of numbers.\nassert Split([1,2,3,4,5]) == [2,4]\n\"\"\"\ndef split(numbers):\n    return [num for num in numbers if num % 2 == 0]\n\n# Test cases\nassert split([1,2,3,4,5]) == [2,4]\nassert split([10,20,30,40,50]) == [10,20,30,40,50]\nassert split([]) == []\nassert split([-1,-2,-3,-4,-5]) == [-2,-4]", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/611": [{"task_id": "Mbpp/611", "solution": "\"\"\"\nWrite a function which given a matrix represented as a list of lists returns the max of the n'th column.\nassert max_of_nth([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2) == 19\n\"\"\"\ndef max_of_nth(matrix, n):\n    # Check if the input matrix is valid and the column index is within bounds\n    if not matrix or n < 0 or len(matrix[0]) < n:\n        raise ValueError(\"Invalid input\")\n    \n    # Find the maximum value in the specified column\n    return max(row[n] for row in matrix)\n\n# Test cases to verify the correctness of the function\nassert max_of_nth([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2) == 19\nassert max_of_nth([[4, 5, 6], [7, 8, 9], [10, 11, 12]], 1) == 8\nassert max_of_nth([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 3) == 9", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/619": [{"task_id": "Mbpp/619", "solution": "\"\"\"\nWrite a function to move all the numbers to the end of the given string.\nassert move_num('I1love143you55three3000thousand') == 'Iloveyouthreethousand1143553000'\n\"\"\"\ndef move_num(s):\n    # Split the string into two parts: one containing only digits and another containing non-digit characters\n    num_part = ''.join(filter(str.isdigit, s))\n    non_num_part = ''.join(filter(lambda x: not str.isdigit(x), s))\n    \n    # Concatenate the two parts in the desired order\n    return non_num_part + num_part\n\n# Test cases to verify the correctness of the function\nassert move_num('I1love143you55three3000thousand') == 'Iloveyouthreethousand1143553000'\nassert move_num('NoDigitsHere') == 'NoDigitsHere'\nassert move_num('123456789') == '987654321'\nassert move_num('') == ''", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/628": [{"task_id": "Mbpp/628", "solution": "\"\"\"\nWrite a function to replace all spaces in the given string with '%20'.\nassert replace_spaces(\"My Name is Dawood\") == 'My%20Name%20is%20Dawood'\n\"\"\"\ndef replace_spaces(s):\n    return s.replace(' ', '%20')\n\n# Test cases\nassert replace_spaces(\"My Name is Dawood\") == 'My%20Name%20is%20Dawood'\nassert replace_spaces(\"Hello World!\") == \"Hello%20World%21\"\nassert replace_spaces(\"\") == \"\"", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/620": [{"task_id": "Mbpp/620", "solution": "\"\"\"\nWrite a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\nassert largest_subset([ 1, 3, 6, 13, 17, 18 ]) == 4\n\"\"\"\ndef largest_subset(nums):\n    # Sort the array in ascending order\n    nums.sort()\n    \n    # Initialize two variables: count for the current subset and max_count for the maximum subset found\n    count = 0\n    max_count = 0\n    \n    # Iterate through the sorted array\n    for i in range(len(nums)):\n        # If the current number is divisible by the previous one, it can be included in the subset\n        if nums[i] % nums[i-1] == 0 or nums[i-1] % nums[i] == 0:\n            count += 1\n        else:\n            # Reset the count if the current number cannot be included in the subset\n            count = 1\n        \n        # Update the maximum count if the current subset is larger than the previous one\n        if count > max_count:\n            max_count = count\n    \n    return max_count\n\n# Test cases to verify the correctness of the function\nassert largest_subset([ 1, 3, 6, 13, 17, 18 ]) == 4", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/606": [{"task_id": "Mbpp/606", "solution": "\"\"\"\nWrite a function to convert degrees to radians.\nassert radian_degree(90)==1.5707963267948966\n\"\"\"\nimport math\n\ndef radian_degree(degrees):\n    \"\"\"\n    Convert degrees to radians.\n\n    Args:\n    degrees (float): The number of degrees to be converted.\n\n    Returns:\n    float: The number of radians equivalent to the given degrees.\n    \"\"\"\n    return degrees * (math.pi / 180 )\n\n# Test cases to verify the correctness of the function\nassert radian_degree(90) == 1.5707963267948966", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[-92]]}], "Mbpp/624": [{"task_id": "Mbpp/624", "solution": "\"\"\"\nWrite a python function to convert a given string to uppercase.\nassert is_upper(\"person\") ==\"PERSON\"\n\"\"\"\ndef is_upper(s):\n    return s.upper()\n\n# Test cases\nassert is_upper(\"person\") == \"PERSON\"\nassert is_upper(\"world\") == \"WORLD\"\nassert is_upper(\"python\") == \"PYTHON\"\nassert is_upper(\"12345\") == \"12345\"\nassert is_upper(\"\") == \"\"", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/626": [{"task_id": "Mbpp/626", "solution": "\"\"\"\nWrite a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\nassert triangle_area(-1) == None\n\"\"\"\nimport math\n\ndef triangle_area(radius):\n    if radius < 0:\n        return None\n    # The formula for the area of a triangle inscribed in a semicircle is (1/4) * pi * r^2\n    area = (1/4) * math.pi * radius**2\n    return area\n\n# Test cases", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[2]], "plus_fail_tests": [[0.5]]}], "Mbpp/605": [{"task_id": "Mbpp/605", "solution": "\"\"\"\nWrite a function to check if the given integer is a prime number.\nassert prime_num(13)==True\n\"\"\"\ndef prime_num(n):\n    # Check for negative numbers and 0\n    if n <= 1:\n        return False\n    # Check divisibility from 2 to the square root of n\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\n# Test cases\nassert prime_num(13) == True", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/736": [{"task_id": "Mbpp/736", "solution": "\"\"\"\nWrite a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\nassert left_insertion([1,2,4,5],6)==4\n\"\"\"\ndef left_insertion(arr, val):\n    # Initialize the insertion point as the length of the array\n    i = len(arr)\n    \n    # Iterate through the array from right to left\n    while i > 0:\n        # If the current element is greater than or equal to the value,\n        # move the insertion point one position to the left\n        if arr[i - 1] >= val:\n            i -= 1\n        else:\n            # If the current element is less than the value,\n            # insert the value at this position and return the new index\n            arr[i - 1] = val\n            return i - 1\n    \n    # If no suitable position is found, insert the value at the beginning of the array\n    arr.insert(0, val)\n    return 0\n\n# Test cases to verify the correctness of the function\nassert left_insertion([1,2,4,5],6) == 4\nassert left_insertion([1,2,4,5],3) == 1\nassert left_insertion([1,2,4,5],7) == 4\nassert left_insertion([1,2,4,5],0) == 0\nassert left_insertion([],9) == 0", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/750": [{"task_id": "Mbpp/750", "solution": "\"\"\"\nWrite a function to add the given tuple to the given list.\nassert add_tuple([5, 6, 7], (9, 10)) == [5, 6, 7, 9, 10]\n\"\"\"\ndef add_tuple(lst, tup):\n    # Add the tuple to the end of the list\n    lst.append(tup)\n    return lst\n\n# Test cases to verify the correctness of the function\nassert add_tuple([5, 6, 7], (9, 10)) == [5, 6, 7, 9, 10]", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/632": [{"task_id": "Mbpp/632", "solution": "\"\"\"\nWrite a python function to move all zeroes to the end of the given list.\nassert move_zero([1,0,2,0,3,4]) == [1,2,3,4,0,0]\n\"\"\"\ndef move_zero(nums):\n    \"\"\"\n    Move all zeroes to the end of the given list.\n    \n    :param nums: List of integers\n    :return: A new list with all zeroes moved to the end\n    \"\"\"\n    non_zero_index = 0\n    for i in range(len(nums)):\n        if nums[i] != 0:\n            nums[non_zero_index], nums[i] = nums[i], nums[non_zero_index]\n            non_zero_index += 1\n    return nums\n\n# Test cases\nassert move_zero([1,0,2,0,3,4]) == [1,2,3,4,0,0]\nassert move_zero([0,1,0,3,12]) == [1,3,12,0,0]\nassert move_zero([]) == []\nassert move_zero([0,0,0,0]) == [0,0,0,0]", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/644": [{"task_id": "Mbpp/644", "solution": "\"\"\"\nWrite a python function to reverse an array upto a given position.\nassert reverse_Array_Upto_K([1, 2, 3, 4, 5, 6],4) == [4, 3, 2, 1, 5, 6]\n\"\"\"\ndef reverse_Array_Upto_K(arr, k):\n    # Reverse the array from index 0 to k-1\n    arr[:k] = arr[:k][::-1]\n    return arr\n\n# Test cases\nassert reverse_Array_Upto_K([1, 2, 3, 4, 5, 6],4) == [4, 3, 2, 1, 5, 6]", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/764": [{"task_id": "Mbpp/764", "solution": "\"\"\"\nWrite a python function to count number of digits in a given string.\nassert number_ctr('program2bedone') == 1\n\"\"\"\ndef number_ctr(s):\n    return sum(c.isdigit() for c in s)\n\n# Test cases\nassert number_ctr('program2bedone') == 1\nassert number_ctr('hello123world456') == 6\nassert number_ctr('no_numbers_here') == 0\nassert number_ctr('1234567890') == 10", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/724": [{"task_id": "Mbpp/724", "solution": "\"\"\"\nWrite a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\nassert power_base_sum(2,100)==115\n\"\"\"\ndef power_base_sum(base, power):\n    # Convert base to string to iterate over each digit\n    base_str = str(base)\n    # Initialize sum variable\n    sum = 0\n    # Iterate over each character in the string representation of the base\n    for char in base_str:\n        # Add the integer value of the character to the sum\n        sum += int(char)\n    # Return the final sum\n    return sum\n\n# Test the function with provided data points\nassert power_base_sum(2, 100) == 115", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/742": [{"task_id": "Mbpp/742", "solution": "\"\"\"\nWrite a function to caluclate the area of a tetrahedron.\nassert area_tetrahedron(3)==15.588457268119894\n\"\"\"\nimport math\n\ndef area_tetrahedron(side_length):\n    \"\"\"\n    Calculate the surface area of a tetrahedron.\n\n    Args:\n    side_length (float): The length of each side of the tetrahedron.\n\n    Returns:\n    float: The surface area of the tetrahedron.\n    \"\"\"\n    # Calculate the area of one triangular face\n    face_area = 0.5 * side_length ** 2 * math.sqrt(2)\n    \n    # Since there are four triangular faces in a tetrahedron,\n    total_surface_area = 4 * face_area\n    \n    return total_surface_area\n\n# Test the function with provided data points\nassert area_tetrahedron(3) == 15.588457268119894", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/640": [{"task_id": "Mbpp/640", "solution": "\"\"\"\nWrite a function to remove the parenthesis and what is inbetween them from a string.\nassert remove_parenthesis([\"python (chrome)\"])==(\"python\")\n\"\"\"\ndef remove_parenthesis(strings):\n    # Initialize an empty list to store the result\n    result = []\n    # Iterate over each string in the input list\n    for string in strings:\n        # Use regular expression to find all occurrences of parentheses\n        matches = re.findall(r'\\([^()]*\\)', string)\n        # Remove the found parentheses and their contents from the string\n        cleaned_string = re.sub(r'\\([^()]*\\)', '', string)\n        # Append the cleaned string to the result list\n        result.append(cleaned_string)\n    return result\n\n# Test cases to verify the correctness of the solution\nassert remove_parenthesis([\"python (chrome)\"]) == (\"python\")\nassert remove_parenthesis([\"python (chrome), python (firefox)\"]) == (\"python , python \")\nassert remove_parenthesis([\"python (chrome), python (firefox), python (safari)\"]) == (\"python , python , python \")\nassert remove_parenthesis([\"python (chrome), python (firefox), python (safari), python (internet explorer)\"]) == (\"python , python , python , python \")\nassert remove_parenthesis([\"python (chrome), python (firefox), python (safari), python (internet explorer), python (microsoft edge)\"]) == (\"python , python , python , python , python \")\nassert remove_parenthesis([\"python (chrome), python (firefox), python (safari), python (internet explorer), python (microsoft edge), python (mac os)\"]) == (\"python , python , python , python , python , python \")\nassert remove_parenthesis([\"python (chrome), python (firefox), python (safari), python (internet explorer), python (microsoft edge), python (mac os), python (windows)\"]) == (\"python , python , python , python , python , python , python \")\nassert remove_parenthesis([\"python (chrome), python (firefox), python (safari), python (internet explorer), python (microsoft edge), python (mac os), python (windows), python (android)\"]) == (\"python , python , python , python , python , python , python , python \")\nassert remove_parenthesis([\"python (chrome), python (firefox), python (safari), python (internet explorer), python (microsoft edge), python (mac os), python (windows), python (android), python (ios)\"]) == (\"python , python , python , python , python , python , python , python , python \")\nassert remove_parenthesis([\"python (chrome), python (firefox), python (safari), python (internet explorer), python (microsoft edge), python (mac os), python (windows), python (android), python (ios), python (linux)\"]) == (\"python , python , python , python , python , python , python , python , python , python \")\nassert remove_parenthesis([\"python (chrome), python (firefox), python (safari), python (internet explorer), python (microsoft edge), python (mac os), python (windows), python (android), python (ios), python (linux), python (unix)\"]) == (\"python , python , python , python , python , python , python , python , python , python , python \")\nassert remove_parenthesis([\"python (chrome), python (firefox), python (safari), python (internet explorer), python (microsoft edge), python (mac os), python (windows), python (android), python (ios), python (linux), python (unix), python (macosx)\"]) == (\"python , python , python , python , python , python , python , python , python , python , python , python \")\nassert remove_parenthesis([\"python (chrome), python (firefox), python (safari), python (", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/635": [{"task_id": "Mbpp/635", "solution": "\"\"\"\nWrite a function to sort the given list.\nassert heap_sort([1, 3, 5, 7, 9, 2, 4, 6, 8, 0])==[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n\"\"\"\ndef heap_sort(lst):\n    # Convert the list into a min-heap\n    for i in range(len(lst) // 2 - 1, -1, -1):\n        heapify(lst, len(lst), i)\n    \n    # Sort the elements of the list using the heap\n    for i in range(len(lst) - 1, 0, -1):\n        lst[i], lst[0] = lst[0], lst[i]  # Swap the first element with the last one\n        heapify(lst, i, 0)  # Heapify the remaining elements\n\n# Helper function to maintain the heap property\ndef heapify(lst, n, i):\n    largest = i  # Initialize largest as root\n    l = 2 * i + 1  # left child index\n    r = 2 * i + 2  # right child index\n    \n    # Check if left child exists and is greater than root\n    if l < n and lst[l] > lst[largest]:\n        largest = l\n    \n    # Check if right child exists and is greater than largest\n    if r < n and lst[r] > lst[largest]:\n        largest = r\n    \n    # If largest is not root, swap it with root and recursively call heapify\n    if largest != i:\n        lst[i], lst[largest] = lst[largest], lst[i]\n        heapify(lst, n, largest)\n\n# Test the function\nassert heap_sort([1, 3, 5, 7, 9, 2, 4, 6, 8, 0]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/633": [{"task_id": "Mbpp/633", "solution": "\"\"\"\nWrite a python function to find the sum of xor of all pairs of numbers in the given list.\nassert pair_xor_Sum([5,9,7,6],4) == 47\n\"\"\"\ndef pair_xor_Sum(nums, n):\n    # Initialize the result variable\n    result = 0\n    \n    # Iterate through each number in the list\n    for i in range(n):\n        # XOR the current number with the next one in the list\n        result ^= nums[i] ^ nums[i+1]\n    \n    return result\n\n# Test cases\nassert pair_xor_Sum([5,9,7,6],4) == 47", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/730": [{"task_id": "Mbpp/730", "solution": "\"\"\"\nWrite a function to remove consecutive duplicates of a given list.\nassert consecutive_duplicates([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4 ])==[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4]\n\"\"\"\ndef consecutive_duplicates(lst):\n    # Use set to remove duplicates and then convert back to list\n    return list(set(lst))\n\n# Test the function\nassert consecutive_duplicates([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4]", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/723": [{"task_id": "Mbpp/723", "solution": "\"\"\"\nThe input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\nassert count_same_pair([1, 2, 3, 4, 5, 6, 7, 8],[2, 2, 3, 1, 2, 6, 7, 9])==4\n\"\"\"\ndef count_same_pair(list1, list2):\n    # Use set intersection to find common elements and then return their count\n    return len(set(list1) & set(list2))\n\n# Test cases to verify the correctness of the function\nassert count_same_pair([1, 2, 3, 4, 5, 6, 7, 8], [2, 2, 3, 1, 2, 6, 7, 9]) == 4\nassert count_same_pair([10, 20, 30, 40, 50], [10, 20, 30, 40, 50]) == 5\nassert count_same_pair(['apple', 'banana', 'cherry'], ['banana', 'cherry', 'date']) == 2\nassert count_same_pair([], []) == 0", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/744": [{"task_id": "Mbpp/744", "solution": "\"\"\"\nWrite a function to check if the given tuple has any none value or not.\nassert check_none((10, 4, 5, 6, None)) == True\n\"\"\"\n# Define the function to check for none values in a tuple\ndef check_none(tup):\n    # Iterate through each element in the tuple\n    for item in tup:\n        # Check if the item is None\n        if item is None:\n            return True  # Return True if a None value is found\n    return False  # Return False if no None value is found\n\n# Test the function with provided data points\nassert check_none((10, 4, 5, 6, None)) == True", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/637": [{"task_id": "Mbpp/637", "solution": "\"\"\"\nWrite a function to check whether the given amount has no profit and no loss\nassert noprofit_noloss(1500,1200)==False\n\"\"\"\ndef noprofit_noloss(amount1, amount2):\n    # Check if both amounts are equal\n    return amount1 == amount2\n\n# Test cases\nassert noprofit_noloss(1500, 1200) == False\nassert noprofit_noloss(1000, 1000) == True\nassert noprofit_noloss(500, 500) == True\nassert noprofit_noloss(300, 400) == False", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/722": [{"task_id": "Mbpp/722", "solution": "\"\"\"\nThe input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\nassert filter_data({'Cierra Vega': (6.2, 70), 'Alden Cantrell': (5.9, 65), 'Kierra Gentry': (6.0, 68), 'Pierre Cox': (5.8, 66)},6.0,70)=={'Cierra Vega': (6.2, 70)}\n\"\"\"\ndef filter_data(data_dict, min_height, min_weight):\n    return {k: v for k, v in data_dict.items() if v[0] > min_height and v[1] > min_weight}\n\n# Test cases\nassert filter_data({'Cierra Vega': (6.2, 70), 'Alden Cantrell': (5.9, 65), 'Kierra Gentry': (6.0, 68), 'Pierre Cox': (5.8, 66)}, 6.0, 70) == {'Cierra Vega': (6.2, 70)}", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/741": [{"task_id": "Mbpp/741", "solution": "\"\"\"\nWrite a python function to check whether all the characters are same or not.\nassert all_Characters_Same(\"python\") == False\n\"\"\"\ndef all_Characters_Same(s):\n    return len(set(s)) == 1\n\n# Test cases\nassert all_Characters_Same(\"python\") == False\nassert all_Characters_Same(\"aaaaa\") == True\nassert all_Characters_Same(\"abba\") == False\nassert all_Characters_Same(\"\") == True\nassert all_Characters_Same(\"1234567890\") == True\nassert all_Characters_Same(\"abcdef\") == False\nassert all_Characters_Same(\"abcdefg\") == True\nassert all_Characters_Same(\"abcdefgk\") == False\nassert all_Characters_Same(\"abcdefgh\") == True\nassert all_Characters_Same(\"abcdefghij\") == False\nassert all_Characters_Same(\"abcdefghijk\") == True\nassert all_Characters_Same(\"abcdefghijkl\") == False\nassert all_Characters_Same(\"abcdefghijklm\") == False\nassert all_Characters_Same(\"abcdefghijklmn\") == True\nassert all_Characters_Same(\"abcdefghijklmnop\") == False\nassert all_Characters_Same(\"abcdefghijklopq\") == False\nassert all_Characters_Same(\"abcdefghijklpqr\") == True\nassert all_Characters_Same(\"abcdefghijklpqrs\") == False\nassert all_Characters_Same(\"abcdefghijklpqrst\") == True\nassert all_Characters_Same(\"abcdefghijklpqrstu\") == False\nassert all_Characters_Same(\"abcdefghijklpqrstuvwxyz\") == True\nassert all_Characters_Same(\"abcdefghijklpqrstuvwxyza\") == False\nassert all_Characters_Same(\"abcdefghijklpqrstuvwxyzb\") == True\nassert all_Characters_Same(\"abcdefghijklpqrstuvwxyzc\") == False\nassert all_Characters_Same(\"abcdefghijklpqrstuvwxyzd\") == True\nassert all_Characters_Same(\"abcdefghijklpqrstuvwxyze\") == False\nassert all_Characters_Same(\"abcdefghijklpqrstuvwxyzf\") == True\nassert all_Characters_Same(\"abcdefghijklpqrstuvwxyzg\") == False\nassert all_Characters_Same(\"abcdefghijklpqrstuvwxyzh\") == True\nassert all_Characters_Same(\"abcdefghijklpqrstuvwxyzi\") == False\nassert all_Characters_Same(\"abcdefghijklpqrstuvwxyzj\") == True\nassert all_Characters_Same(\"abcdefghijklpqrstuvwxyzk\") == False\nassert all_Characters_Same(\"abcdefghijklpqrstuvwxyzl\") == True\nassert all_Characters_Same(\"abcdefghijklpqrstuvwxyzm\") == False\nassert all_Characters_Same(\"abcdefghijklpqrstuvwxyzn\") == True\nassert all_Characters_Same(\"abcdefghijklpqrstuvwxyzo\") == False\nassert all_Characters_Same(\"abcdefghijklpqrstuvwxyzp\") == True\nassert all_Characters_Same(\"abcdefghijklpqrstuvwxyzq\") == False\nassert all_Characters_Same(\"abcdefghijklpqrstuvwxyzr\") == True\nassert all_Characters_Same(\"abcdefghijklpqrstuvwxyzs\") == False\nassert all_Characters_Same(\"abcdefghijklpqrstuvwxyzt\") == True\nassert all_Characters_Same(\"abcdefghijklpqrstuvwxyzu\") == False\nassert all_Characters_Same(\"abcdefghijklpqrstuvwxyzv\") == True\nassert all_Characters_Same(\"abcdefghijklpqrstuvwxyzw\") == False\nassert all_Characters_Same(\"abcdefghijklpqrstuvwxyzx\") == True\nassert all_Characters_Same(\"abcdefghijklpqrstuvwxyzy\") == False\nassert all_Characters_Same(\"abcdefghijklpqrstuvwxyzz\") == True\nassert all_Characters_Same(\"abcdefghijklpqrstuvwxyzaa\") == False\nassert all_Characters_Same(\"abcdefghijklpqrstuvwxyzbb\") == True\nassert all_Characters_S", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/778": [{"task_id": "Mbpp/778", "solution": "\"\"\"\nWrite a function to pack consecutive duplicates of a given list elements into sublists.\nassert pack_consecutive_duplicates([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4])==[[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]\n\"\"\"\ndef pack_consecutive_duplicates(lst):\n    # Initialize an empty list to store the result\n    result = []\n    # Iterate through the input list\n    for i in range(len(lst)):\n        # Check if the current element is the same as the next one\n        if i < len(lst) - 1 and lst[i] == lst[i + 1]:\n            # If it's the same, add it to the last sublist in 'result'\n            result[-1].append(lst[i])\n        else:\n            # If it's not the same, start a new sublist with the current element\n            result.append([lst[i]])\n    return result\n\n# Test the function with the provided data point\nassert pack_consecutive_duplicates([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]) == [[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/758": [{"task_id": "Mbpp/758", "solution": "\"\"\"\nWrite a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\nassert unique_sublists([[1, 3], [5, 7], [1, 3], [13, 15, 17], [5, 7], [9, 11]] )=={(1, 3): 2, (5, 7): 2, (13, 15, 17): 1, (9, 11): 1}\n\"\"\"\ndef unique_sublists(lst):\n    # Create an empty dictionary to store tuples and their counts\n    sublists_dict = {}\n    \n    # Iterate over each sublist in the input list\n    for sublist in lst:\n        # Convert the sublist to a tuple and update the dictionary\n        if tuple(sublist) not in sublists_dict:\n            sublists_dict[tuple(sublist)] = 1\n        else:\n            sublists_dict[tuple(sublist)] += 1\n    \n    # Return the dictionary containing the tuples and their counts\n    return sublists_dict\n\n# Test the function with the provided data point\nassert unique_sublists([[1, 3], [5, 7], [1, 3], [13, 15, 17], [5, 7], [9, 11]]) == {(1, 3): 2, (5, 7): 2, (13, 15, 17): 1, (9, 11): 1}", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/743": [{"task_id": "Mbpp/743", "solution": "\"\"\"\nWrite a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\nassert rotate_right([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],3)==[8, 9, 10, 1, 2, 3, 4, 5, 6, 7]\n\"\"\"\ndef rotate_right(arr, n):\n    # Calculate the effective rotation needed\n    n = n % len(arr)\n    \n    # Perform the rotation\n    rotated_arr = arr[-n:] + arr[:-n]\n    \n    return rotated_arr\n\n# Test the function\nassert rotate_right([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],3) == [8, 9, 10, 1, 2, 3, 4, 5, 6, 7]", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[[], 0]]}], "Mbpp/759": [{"task_id": "Mbpp/759", "solution": "\"\"\"\nWrite a function to check whether a given string is a decimal number with a precision of 2.\nassert is_decimal('123.11')==True\n\"\"\"\ndef is_decimal(s):\n    # Check if the string starts with a dot or is empty\n    if s[0] == '.' or len(s) == 0:\n        return False\n    # Split the string into two parts: before and after the dot\n    parts = s.split('.')\n    # Check if both parts are digits\n    if not parts[0].isdigit() or not parts[1].isdigit():\n        return False\n    # Check if there is only one digit after the dot\n    if len(parts[1]) > 1:\n        return False\n    return True\n\n# Test cases\nassert is_decimal('123.11') == True\nassert is_decimal('123.') == False\nassert is_decimal('.123') == False\nassert is_decimal('123') == False\nassert is_decimal('123.123456789') == False\nassert is_decimal('123.1234567890') == True\nassert is_decimal('123.12345678901') == False\nassert is_decimal('123.12345678902') == True\nassert is_decimal('123.12345678903') == False\nassert is_decimal('123.12345678904') == True\nassert is_decimal('123.12345678905') == False\nassert is_decimal('123.12345678906') == True\nassert is_decimal('123.12345678907') == False\nassert is_decimal('123.12345678908') == True\nassert is_decimal('123.12345678909') == False\nassert is_decimal('123.12345678910') == True\nassert is_decimal('123.12345678911') == False\nassert is_decimal('123.12345678912') == True\nassert is_decimal('123.12345678913') == False\nassert is_decimal('123.12345678914') == True\nassert is_decimal('123.12345678915') == False\nassert is_decimal('123.12345678916') == True\nassert is_decimal('123.12345678917') == False\nassert is_decimal('123.12345678918') == True\nassert is_decimal('123.12345678919') == False\nassert is_decimal('123.12345678920') == True\nassert is_decimal('123.12345678921') == False\nassert is_decimal('123.12345678922') == True\nassert is_decimal('123.12345678923') == False\nassert is_decimal('123.12345678924') == True\n", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/638": [{"task_id": "Mbpp/638", "solution": "\"\"\"\nWrite a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nassert wind_chill(120,35)==40\n\"\"\"\ndef wind_chill(v_wind, t_c):\n    # Calculate the wind chill index using the formula: Tc = 112.0 - 0.91 * (v_wind ** 2) + 0.396 * v_wind * t_c\n    tc = 112.0 - 0.91 * (v_wind ** 2) + 0.396 * v_wind * t_c\n    # Round the result to the nearest integer\n    return round(tc)\n\n# Test cases to verify the correctness of the function\nassert wind_chill(120,35)==40", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/641": [{"task_id": "Mbpp/641", "solution": "\"\"\"\nWrite a function to find the nth nonagonal number.\nassert is_nonagonal(10) == 325\n\"\"\"\ndef is_nonagonal(n):\n    # The formula for finding the nth nonagonal number is (n*(3n-2))/2\n    return (n * (3*n - 2)) // 2\n\n# Test cases to verify the correctness of the function\nassert is_nonagonal(10) == 325", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/726": [{"task_id": "Mbpp/726", "solution": "\"\"\"\nWrite a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\nassert multiply_elements((1, 5, 7, 8, 10)) == (5, 35, 56, 80)\n\"\"\"\ndef multiply_elements(tuples):\n    # Initialize an empty list to store the results\n    result = []\n    \n    # Iterate over each tuple in the input list\n    for i, value in enumerate(tuples[:-1]):\n        # Calculate the product of the current element and the next element\n        product = value * tuples[i + 1]\n        \n        # Append the product to the result list\n        result.append(product)\n    \n    return tuple(result)\n\n# Test cases to verify the correctness of the function\nassert multiply_elements((1, 5, 7, 8, 10)) == (5, 35, 56, 80)\nassert multiply_elements((2, 4, 6, 8, 10)) == (4, 16, 24, 32)\nassert multiply_elements((3, 5, 7, 9, 11)) == (3, 15, 21, 27)", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/757": [{"task_id": "Mbpp/757", "solution": "\"\"\"\nWrite a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\nassert count_reverse_pairs([\"julia\", \"best\", \"tseb\", \"for\", \"ailuj\"])== 2\n\"\"\"\ndef count_reverse_pairs(str_list):\n    # Create a set to store unique reversed strings\n    reversed_strings = set()\n    \n    # Iterate through each string in the list\n    for s in str_list:\n        # Reverse the string and add it to the set\n        reversed_strings.add(s[::-1])\n    \n    # Count the number of unique reversed strings\n    return len(reversed_strings)\n\n# Test the function\nassert count_reverse_pairs([\"julia\", \"best\", \"tseb\", \"for\", \"ailuj\"]) == 2", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/769": [{"task_id": "Mbpp/769", "solution": "\"\"\"\nWrite a python function to get the difference between two lists.\nassert (Diff([10, 15, 20, 25, 30, 35, 40], [25, 40, 35])) == [10, 20, 30, 15]\n\"\"\"\ndef Diff(list1, list2):\n    return [x for x in list1 if x not in list2]\n\n# Test cases\nassert (Diff([10, 15, 20, 25, 30, 35, 40], [25, 40, 35]) == [10, 20, 30, 15])", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/725": [{"task_id": "Mbpp/725", "solution": "\"\"\"\nWrite a function to extract values between quotation marks \" \" of the given string.\nassert extract_quotation('Cortex \"A53\" Based \"multi\" tasking \"Processor\"') == ['A53', 'multi', 'Processor']\n\"\"\"\ndef extract_quotation(s):\n    # Split the input string into parts based on spaces\n    parts = s.split()\n    # Initialize an empty list to store the extracted values\n    extracted_values = []\n    # Iterate over each part in the split string\n    for part in parts:\n        # Check if the part starts with a double quote and ends with a double quote\n        if part.startswith('\"') and part.endswith('\"'):\n            # Remove the double quotes from the part and add it to the extracted_values list\n            extracted_values.append(part[1:-1])\n    return extracted_values\n\n# Test the function with provided data points\nassert extract_quotation('Cortex \"A53\" Based \"multi\" tasking \"Processor\"') == ['A53', 'multi', 'Processor']", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [["Watch content \"4k Ultra HD\" resolution with \"HDR 10\" Support"]], "plus_fail_tests": []}], "Mbpp/643": [{"task_id": "Mbpp/643", "solution": "\"\"\"\nWrite a function that checks if a strings contains 'z', except at the start and end of the word.\nassert text_match_wordz_middle(\"pythonzabc.\")==True\n\"\"\"\ndef text_match_wordz_middle(text):\n    # Check if the string starts or ends with 'z' and does not contain 'z' in between\n    return text.startswith('z') or text.endswith('z') or ('z' not in text[1:-1])\n\n# Test cases to verify the correctness of the function\nassert text_match_wordz_middle(\"pythonzabc.\") == True\nassert text_match_wordz_middle(\"pythonz\") == False\nassert text_match_wordz_middle(\"pythonzz\") == False\nassert text_match_wordz_middle(\"pythonzabc\") == True\nassert text_match_wordz_middle(\"pythonzabc!\") == True\nassert text_match_wordz_middle(\"pythonzabc?\") == True\nassert text_match_wordz_middle(\"pythonzabc#\") == True\nassert text_match_wordz_middle(\"pythonzabc$\") == True\nassert text_match_wordz_middle(\"pythonzabc&\") == True\nassert text_match_wordz_middle(\"pythonzabc)\") == True\nassert text_match_wordz_middle(\"pythonzabc=\") == True\nassert text_match_wordz_middle(\"pythonzabc{\") == True\nassert text_match_wordz_middle(\"pythonzabc}\") == True\nassert text_match_wordz_middle(\"pythonzabc|\") == True\nassert text_match_wordz_middle(\"pythonzabc^\") == True\nassert text_match_wordz_middle(\"pythonzabc`\") == True\nassert text_match_wordz_middle(\"pythonzabc~\") == True\nassert text_match_wordz_middle(\"pythonzabc \") == False\nassert text_match_wordz_middle(\"pythonzabc\\n\") == False\nassert text_match_wordz_middle(\"pythonzabc\\t\") == False\nassert text_match_wordz_middle(\"pythonzabc\u00a0\") == False\nassert text_match_wordz_middle(\"pythonzabc_\") == False\nassert text_match_wordz_middle(\"pythonzabc_\") == False\nassert text_match_wordz_middle(\"pythonzabc_\") == False\nassert text_match_wordz_middle(\"pythonzabc_\") == False\nassert text_match_wordz_middle(\"pythonzabc_\") == False\nassert text_match_wordz_middle(\"pythonzabc_\") == False\nassert text_match_wordz_middle(\"pythonzabc_\") == False\nassert text_match_wordz_middle(\"pythonzabc_\") == False\nassert text_match_wordz_middle(\"pythonzabc_\") == False\nassert text_match_wordz_middle(\"pythonzabc_\") == False\nassert text_match_wordz_middle(\"pythonzabc_\") == False\nassert text_match_wordz_middle(\"pythonzabc_\") == False\nassert text_match_wordz_middle(\"pythonzabc_\") == False\nassert text_match_wordz_middle(\"pythonzabc_\") == False\nassert text_match_wordz_middle(\"pythonzabc_\") == False\nassert text_match_wordz_middle(\"pythonzabc_\") == False\nassert text_match_wordz_middle(\"pythonzabc_\") == False\nassert text_match_wordz_middle(\"pythonzabc_\") == False\nassert text_match_wordz_middle(\"pythonzabc_\") == False\nassert text_match_wordz_middle(\"pythonzabc_\") == False\nassert text_match_wordz_middle(\"pythonzabc_\") == False\nassert text_match_wordz_middle(\"pythonzabc_\") == False\nassert text_match_wordz_middle(\"pythonzabc_\") == False\nassert text_match_wordz_middle(\"pythonzabc_\") == False\nassert text_match_wordz_middle(\"pythonzabc_\") == False\nassert text_match_wordz_middle(\"pythonzabc_\") == False\nassert text_match_wordz_middle", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/721": [{"task_id": "Mbpp/721", "solution": "\"\"\"\nGiven a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\nassert maxAverageOfPath([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2\n\"\"\"\ndef maxAverageOfPath(matrix):\n    # Initialize variables for tracking the maximum average\n    max_avg = float('-inf')\n    # Calculate the sum of each row and store it in a list\n    row_sums = [sum(row) for row in matrix]\n    # Calculate the sum of each column and store it in a list\n    col_sums = [sum([row[i] for row in matrix]) for i in range(len(matrix[0]))]\n    \n    # Iterate through possible starting points (top-left to bottom-right)\n    for start_row in range(len(matrix)):\n        for start_col in range(len(matrix[0])):\n            # Calculate the total cost for each path starting at (start_row, start_col)\n            total_cost = sum(matrix[row][col] for row in range(start_row, len(matrix)) for col in range(start_col, len(matrix[0]))\n            # Calculate the number of cells visited in this path\n            num_cells = (len(matrix) - start_row) * (len(matrix[0]) - start_col)\n            # Calculate the average for this path\n            avg = total_cost / num_cells\n            # Update the maximum average if the current average is higher\n            if avg > max_avg:\n                max_avg = avg\n    \n    return max_avg\n\n# Test the function with provided data point\nassert maxAverageOfPath([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/772": [{"task_id": "Mbpp/772", "solution": "\"\"\"\nWrite a function to remove all the words with k length in the given string.\nassert remove_length('The person is most value tet', 3) == 'person is most value'\n\"\"\"\ndef remove_length(s, k):\n    # Split the string into words\n    words = s.split()\n    \n    # Filter out words with length equal to k\n    filtered_words = [word for word in words if len(word) != k]\n    \n    # Join the filtered words back into a single string\n    result = ' '.join(filtered_words)\n    \n    return result\n\n# Test cases\nassert remove_length('The person is most value tet', 3) == 'person is most value'\nassert remove_length('Hello world from Python', 5) == 'Hello world Python'\nassert remove_length('Remove all short words', 4) == ''\nassert remove_length('Keep only long words', 6) == 'keep only long words'", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/745": [{"task_id": "Mbpp/745", "solution": "\"\"\"\nWrite a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nassert divisible_by_digits(1,22)==[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]\n\"\"\"\ndef divisible_by_digits(startnum, endnum):\n    return [i for i in range(startnum, endnum + 1) if all(int(digit) % i == 0 for digit in str(i))]\n\n# Test cases\nassert divisible_by_digits(1,22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/731": [{"task_id": "Mbpp/731", "solution": "\"\"\"\nWrite a function to find the lateral surface area of a cone given radius r and the height h.\nassert lateralsurface_cone(5,12)==204.20352248333654\n\"\"\"\nimport math\n\ndef lateralsurface_cone(radius, height):\n    \"\"\"\n    Calculate the lateral surface area of a cone.\n\n    Args:\n    radius (float): The radius of the base of the cone.\n    height (float): The height of the cone.\n\n    Returns:\n    float: The lateral surface area of the cone.\n    \"\"\"\n    lateral_surface_area = 2 * math.pi * radius * height\n    return lateral_surface_area\n\n# Test the function with provided data points\nassert lateralsurface_cone(5, 12) == 204.20352248333654", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/631": [{"task_id": "Mbpp/631", "solution": "\"\"\"\nWrite a function to replace whitespaces with an underscore and vice versa in a given string.\nassert replace_spaces('Jumanji The Jungle') == 'Jumanji_The_Jungle'\n\"\"\"\ndef replace_spaces(input_string):\n    # Replace spaces with underscores\n    result = input_string.replace(' ', '_')\n    # Replace underscores with spaces\n    return result.replace('_', ' ')\n\n# Test cases\nassert replace_spaces('Jumanji The Jungle') == 'Jumanji_The_Jungle'\nassert replace_spaces('Python Programming') == 'Python_Programming'\nassert replace_spaces('Hello World') == 'Hello_World'", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/751": [{"task_id": "Mbpp/751", "solution": "\"\"\"\nWrite a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\nassert check_min_heap([1, 2, 3, 4, 5, 6]) == True\n\"\"\"\ndef check_min_heap(arr):\n    n = len(arr)\n    for i in range(n // 2 + 1):\n        if (i * 2 + 1 < n) and arr[i] > arr[2 * i + 1]:\n            return False\n        if (i * 2 + 2 < n) and arr[i] > arr[2 * i + 2]:\n            return False\n    return True\n\n# Test cases\nassert check_min_heap([1, 2, 3, 4, 5, 6]) == True", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/777": [{"task_id": "Mbpp/777", "solution": "\"\"\"\nWrite a python function to find the sum of non-repeated elements in a given list.\nassert find_sum([1,2,3,1,1,4,5,6]) == 21\n\"\"\"\ndef find_sum(lst):\n    # Create a dictionary to store the count of each element\n    element_count = {}\n    \n    # Iterate through the list and update the count\n    for num in lst:\n        if num in element_count:\n            element_count[num] += 1\n        else:\n            element_count[num] = 1\n    \n    # Calculate the sum of non-repeated elements\n    sum_non_repeated = sum(num for num, count in element_count.items() if count == 1)\n    \n    return sum_non_repeated\n\n# Test the function\nassert find_sum([1,2,3,1,1,4,5,6]) == 21", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/752": [{"task_id": "Mbpp/752", "solution": "\"\"\"\nWrite a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\nassert jacobsthal_num(5) == 11\n\"\"\"\ndef jacobsthal_num(n):\n    if n < 0:\n        return \"Input must be non-negative\"\n    elif n == 0 or n == 1:\n        return n\n    else:\n        a, b = 0, 1\n        for _ in range(n):\n            a, b = b, a + b\n        return b\n\n# Test cases\nassert jacobsthal_num(5) == 11", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/771": [{"task_id": "Mbpp/771", "solution": "\"\"\"\nWrite a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nassert check_expression(\"{()}[{}]\") == True\n\"\"\"\ndef check_expression(expression):\n    stack = []\n    for char in expression:\n        if char in \"({[\":\n            stack.append(char)\n        elif char in \")}]\":\n            if not stack or stack.pop() != {')': '(', '}': '{', ']': '['}[char]:\n                return False\n    return len(stack) == 0\n\n# Test cases\nassert check_expression(\"{()}[{}]\") == True\nassert check_expression(\"([)]{[]}\") == False\nassert check_expression(\"{}\") == True\nassert check_expression(\"[[]]\") == True\nassert check_expression(\"([])\") == True\nassert check_expression(\"(()\") == False\nassert check_expression(\"())\") == False\nassert check_expression(\"((()))\") == True\nassert check_expression(\"(()())\") == True\nassert check_expression(\"(())(())\") == True\nassert check_expression(\"(()(()))\") == True\nassert check_expression(\"(()(()))(()\") == False\nassert check_expression(\"(()(()))(()(()))\") == False\nassert check_expression(\"(()(()))(()(()))(()(()))\") == False\nassert check_expression(\"(()(()))(()(()))(()(()))(()(()))\") == False\nassert check_expression(\"(()(()))(()(()))(()(()))(()(()))(()(()))\") == False\nassert check_expression(\"(()(()))(()(()))(()(()))(()(()))(()(()))(()(()))\") == False\nassert check_expression(\"(()(()))(()(()))(()(()))(()(()))(()(()))(()(()))\") == False\nassert check_expression(\"(()(()))(()(()))(()(()))(()(()))(()(()))(()(()))\") == False\nassert check_expression(\"(()(()))(()(()))(()(()))(()(()))(()(()))(()(()))\") == False\nassert check_expression(\"(()(()))(()(()))(()(()))(()(()))(()(()))(()(()))\") == False\nassert check_expression(\"(()(()))(()(()))(()(()))(()(()))(()(()))(()(()))\") == False\nassert check_expression(\"(()(()))(()(()))(()(()))(()(()))(()(()))(()(()))\") == False\nassert check_expression(\"(()(()))(()(()))(()(()))(()(()))(()(()))(()(()))\") == False\nassert check_expression(\"(()(()))(()(()))(()(()))(()(()))(()(()))(()(()))\") == False\nassert check_expression(\"(()(()))(()(()))(()(()))(()(()))(()(()))(()(()))\") == False\nassert check_expression(\"(()(()))(()(()))(()(()))(()(()))(()(()))(()(()))\") == False\nassert check_expression(\"(()(()))(()(()))(()(()))(()(()))(()(()))(()(()))\") == False\nassert check_expression(\"(()(()))(()(()))(()(()))(()(()))(()(()))(()(()))\") == False\nassert check_expression(\"(()(()))(()(()))(()(()))(()(()))(()(()))(()(()))\") == False\nassert check_expression(\"(()(()))(()(()))(()(()))(()(()))(()(()))(()(()))\") == False\nassert check_expression(\"(()(()))(()(()))(()(()))(()(()))(()(()))(()(()))\") == False\nassert check_expression(\"(()(()))(()(()))(()(()))(()(()))(()(()))(()(()))\") == False\nassert check_expression(\"(()(()))(()(()))(()(()))(()(()))(()(()))(()(()))\") == False\nassert check_expression(\"(()(()))(()(()))(()(()))(()(()))(()(()))(()(()))\") == False\nassert check", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/749": [{"task_id": "Mbpp/749", "solution": "\"\"\"\nWrite a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\nassert sort_numeric_strings( ['4','12','45','7','0','100','200','-12','-500'])==[-500, -12, 0, 4, 7, 12, 45, 100, 200]\n\"\"\"\ndef sort_numeric_strings(lst):\n    # Convert all elements in the list to integers\n    lst = [int(x) for x in lst]\n    # Sort the list\n    lst.sort()\n    # Return the sorted list as a string\n    return str(lst)\n\n# Test the function", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/639": [{"task_id": "Mbpp/639", "solution": "\"\"\"\nWrite a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\nassert sample_nam(['sally', 'Dylan', 'rebecca', 'Diana', 'Joanne', 'keith'])==16\n\"\"\"\ndef sample_nam(names):\n    # Filter out names starting with a lowercase letter\n    filtered_names = [name for name in names if not name.startswith('a')]\n    \n    # Calculate the total length of the filtered names\n    total_length = sum(len(name) for name in filtered_names)\n    \n    return total_length\n\n# Test the function\nassert sample_nam(['sally', 'Dylan', 'rebecca', 'Diana', 'Joanne', 'keith']) == 16", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/763": [{"task_id": "Mbpp/763", "solution": "\"\"\"\nWrite a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\nassert find_min_diff((1,5,3,19,18,25),6) == 1\n\"\"\"\ndef find_min_diff(arr, k):\n    # Sort the array\n    arr.sort()\n    \n    # Initialize min_diff as infinity\n    min_diff = float('inf')\n    \n    # Iterate through the sorted array\n    for i in range(len(arr) - 1):\n        # Calculate the difference between current element and next one\n        diff = abs(arr[i] - arr[i + 1])\n        \n        # Update min_diff if found smaller difference\n        if diff < min_diff:\n            min_diff = diff\n    \n    return min_diff\n\n# Test the function\nassert find_min_diff((1,5,3,19,18,25),6) == 1", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/766": [{"task_id": "Mbpp/766", "solution": "\"\"\"\nWrite a function to return a list of all pairs of consecutive items in a given list.\nassert pair_wise([1,1,2,3,3,4,4,5])==[(1, 1), (1, 2), (2, 3), (3, 3), (3, 4), (4, 4), (4, 5)]\n\"\"\"\ndef pair_wise(lst):\n    \"\"\"\n    Return a list of all pairs of consecutive items in a given list.\n    \n    :param lst: List of elements\n    :return: A list of tuples containing each pair of consecutive elements\n    \"\"\"\n    # Use list comprehension to create pairs of consecutive elements\n    return [(lst[i], lst[i+1]) for i in range(len(lst)-1)]\n\n# Test the function with provided data points\nassert pair_wise([1,1,2,3,3,4,4,5])==[(1, 1), (1, 2), (2, 3), (3, 3), (3, 4), (4, 4), (4, 5)]", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/746": [{"task_id": "Mbpp/746", "solution": "\"\"\"\nWrite a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\nassert sector_area(4,45)==6.283185307179586\n\"\"\"\nimport math\n\ndef sector_area(radius, angle):\n    # Check if the angle is within the valid range (0 <= angle <= 360)\n    if angle > 360:\n        return None\n    # Calculate the area of the sector using the formula: (angle/360) * pi * r^2\n    area = (angle / 360) * math.pi * radius ** 2\n    return area\n\n# Test cases to verify the correctness of the function\nassert sector_area(4, 45) == 6.283185307179586", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[44, 44]]}], "Mbpp/732": [{"task_id": "Mbpp/732", "solution": "\"\"\"\nWrite a function to replace all occurrences of spaces, commas, or dots with a colon.\nassert replace_specialchar('Python language, Programming language.')==('Python:language::Programming:language:')\n\"\"\"\ndef replace_specialchar(text):\n    # Replace spaces, commas, and dots with a colon\n    return text.replace(' ', ':').replace(',', ':').replace('.', ':')\n\n# Test cases\nassert replace_specialchar('Python language, Programming language.') == ('Python:language::Programming:language:')\nassert replace_specialchar('Hello, world!') == ('Hello::world!')\nassert replace_specialchar('This is a test.') == ('This::is::a::test.')", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/753": [{"task_id": "Mbpp/753", "solution": "\"\"\"\nWrite a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\nassert min_k([('Manjeet', 10), ('Akshat', 4), ('Akash', 2), ('Nikhil', 8)], 2) == [('Akash', 2), ('Akshat', 4)]\n\"\"\"\ndef min_k(tuples, k):\n    # Sort tuples based on second element (second value)\n    sorted_tuples = sorted(tuples, key=lambda x: x[1])\n    \n    # Return the first k elements\n    return sorted_tuples[:k]\n\n# Test cases\nassert min_k([('Manjeet', 10), ('Akshat', 4), ('Akash', 2), ('Nikhil', 8)], 2) == [('Akash', 2), ('Akshat', 4)]", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/765": [{"task_id": "Mbpp/765", "solution": "\"\"\"\nWrite a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\nassert is_polite(7) == 11\n\"\"\"\ndef is_polite(n):\n    if n % 2 == 0:\n        return n + 1\n    else:\n        return n * 2\n\n# Test cases\nassert is_polite(7) == 11", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/737": [{"task_id": "Mbpp/737", "solution": "\"\"\"\nWrite a function to check whether the given string is starting with a vowel or not using regex.\nassert check_str(\"annie\")\n\"\"\"\nimport re\n\ndef check_str(s):\n    # Define a regular expression pattern to match any string that starts with a vowel (a, e, i, o, u)\n    pattern = r'^[aeiou]'\n    # Use the re.match() method to check if the input string matches the pattern\n    return bool(re.match(pattern, s))\n\n# Test cases\nassert check_str(\"annie\") == True  # The string \"annie\" starts with a vowel\nassert check_str(\"banana\") == False  # The string \"banana\" does not start with a vowel\nassert check_str(\"apple\") == True  # The string \"apple\" starts with a vowel\nassert check_str(\"orange\") == False  # The string \"orange\" does not start with a vowel\nassert check_str(\"avocado\") == True  # The string \"avocado\" starts with a vowel\nassert check_str(\"grape\") == False  # The string \"grape\" does not start with a vowel\nassert check_str(\"cherry\") == True  # The string \"cherry\" starts with a vowel\nassert check_str(\"date\") == False  # The string \"date\" does not start with a vowel\nassert check_str(\"elderberry\") == True  # The string \"elderberry\" starts with a vowel\nassert check_str(\"fig\") == False  # The string \"fig\" does not start with a vowel\nassert check_str(\"honeydew\") == True  # The string \"honeydew\" starts with a vowel\nassert check_str(\"kiwi\") == True  # The string \"kiwi\" starts with a vowel\nassert check_str(\"lemon\") == True  # The string \"lemon\" starts with a vowel\nassert check_str(\"mango\") == True  # The string \"mango\" starts with a vowel\nassert check_str(\"nectarine\") == True  # The string \"nectarine\" starts with a vowel\nassert check_str(\"orange\") == False  # The string \"orange\" does not start with a vowel\nassert check_str(\"peach\") == True  # The string \"peach\" starts with a vowel\nassert check_str(\"plum\") == True  # The string \"plum\" starts with a vowel\nassert check_str(\"quince\") == True  # The string \"quince\" starts with a vowel\nassert check_str(\"raspberry\") == True  # The string \"raspberry\" starts with a vowel\nassert check_str(\"strawberry\") == True  # The string \"strawberry\" starts with a vowel\nassert check_str(\"tangerine\") == True  # The string \"tangerine\" starts with a vowel\nassert check_str(\"watermelon\") == True  # The string \"watermelon\" starts with a vowel\nassert check_str(\"xigua\") == False  # The string \"xigua\" does not start with a vowel\nassert check_str(\"yam\") == False  # The string \"yam\" does not start with a vowel\nassert check_str(\"zucchini\") == False  # The string \"zucchini\" does not start with a vowel", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/734": [{"task_id": "Mbpp/734", "solution": "\"\"\"\nWrite a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\nassert sum_Of_Subarray_Prod([1,2,3]) == 20\n\"\"\"\ndef sum_of_subarray_prod(arr):\n    n = len(arr)\n    # Initialize result variable\n    res = 0\n    \n    # Iterate over each element as the starting point of the sublist\n    for i in range(n):\n        # Initialize product variable for this sublist\n        prod = 1\n        \n        # Iterate over each element from the current position to the end of the array\n        for j in range(i, n):\n            # Multiply the current element with the product variable\n            prod *= arr[j]\n            \n            # Add the product to the result\n            res += prod\n    \n    return res\n\n# Test the function with provided data points\nassert sum_of_subarray_prod([1,2,3]) == 20", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/770": [{"task_id": "Mbpp/770", "solution": "\"\"\"\nWrite a python function to find the sum of fourth power of first n odd natural numbers.\nassert odd_num_sum(2) == 82\n\"\"\"\ndef odd_num_sum(n):\n    # Initialize sum to zero\n    total = 0\n    \n    # Iterate through the first n odd numbers\n    for i in range(1, 2*n, 2):\n        # Add the fourth power of the current number to the total\n        total += i**4\n    \n    # Return the computed sum\n    return total\n\n# Test cases to verify the correctness of the function\nassert odd_num_sum(2) == 82", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/755": [{"task_id": "Mbpp/755", "solution": "\"\"\"\nWrite a function to find the second smallest number in a list.\nassert second_smallest([1, 2, -8, -2, 0, -2])==-2\n\"\"\"\ndef second_smallest(nums):\n    # Sort the list in ascending order\n    nums.sort()\n    # Return the second element if it exists, otherwise return None\n    try:\n        return nums[1]\n    except IndexError:\n        return None\n\n# Test cases to verify the correctness of the function\nassert second_smallest([1, 2, -8, -2, 0, -2]) == -2\nassert second_smallest([]) == None\nassert second_smallest([-5, -5, -5]) == None\nassert second_smallest([10, 10, 10]) == None", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/735": [{"task_id": "Mbpp/735", "solution": "\"\"\"\nWrite a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\nassert toggle_middle_bits(9) == 15\n\"\"\"\ndef toggle_middle_bits(num):\n    \"\"\"\n    Write a python function to toggle bits of the number except the first and the last bit.\n    \n    :param num: The input number whose middle bits are to be toggled.\n    :return: The result after toggling the middle bits of the input number.\n    \"\"\"\n    # Check if the number has less than two bits\n    if num < 2:\n        return num\n    \n    # Calculate the mask for the middle bits\n    mask = (num >> 1) & ((1 << (num.bit_length() - 2)) - 1)\n    \n    # Toggle the middle bits using XOR operation\n    result = num ^ mask\n    \n    return result\n\n# Test cases\nassert toggle_middle_bits(9) == 15\nassert toggle_middle_bits(0) == 0\nassert toggle_middle_bits(1) == 3\nassert toggle_middle_bits(2) == 3\nassert toggle_middle_bits(3) == 7\nassert toggle_middle_bits(4) == 7\nassert toggle_middle_bits(5) == 11\nassert toggle_middle_bits(6) == 11\nassert toggle_middle_bits(7) == 15\nassert toggle_middle_bits(8) == 15\nassert toggle_middle_bits(9) == 15\nassert toggle_middle_bits(10) == 15\nassert toggle_middle_bits(11) == 15\nassert toggle_middle_bits(12) == 15\nassert toggle_middle_bits(13) == 15\nassert toggle_middle_bits(14) == 15\nassert toggle_middle_bits(15) == 15\nassert toggle_middle_bits(16) == 15\nassert toggle_middle_bits(17) == 15\nassert toggle_middle_bits(18) == 15\nassert toggle_middle_bits(19) == 15\nassert toggle_middle_bits(20) == 15\nassert toggle_middle_bits(21) == 15\nassert toggle_middle_bits(22) == 15\nassert toggle_middle_bits(23) == 15\nassert toggle_middle_bits(24) == 15\nassert toggle_middle_bits(25) == 15\nassert toggle_middle_bits(26) == 15\nassert toggle_middle_bits(27) == 15\nassert toggle_middle_bits(28) == 15\nassert toggle_middle_bits(29) == 15\nassert toggle_middle_bits(30) == 15\nassert toggle_middle_bits(31) == 15\nassert toggle_middle_bits(32) == 15\nassert toggle_middle_bits(33) == 15\nassert toggle_middle_bits(34) == 15\nassert toggle_middle_bits(35) == 15\nassert toggle_middle_bits(36) == 15\nassert toggle_middle_bits(37) == 15\nassert toggle_middle_bits(38) == 15\nassert toggle_middle_bits(39) == 15\nassert toggle_middle_bits(40) == 15\nassert toggle_middle_bits(41) == 15\nassert toggle_middle_bits(42) == 15\nassert toggle_middle_bits(43) == 15\nassert toggle_middle_bits(44) == 15\nassert toggle_middle_bits(45) == 15\nassert toggle_middle_bits(46) == 15\nassert toggle_middle_bits(47) == 1", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/720": [{"task_id": "Mbpp/720", "solution": "\"\"\"\nWrite a function to add a dictionary to the tuple. The output should be a tuple.\nassert add_dict_to_tuple((4, 5, 6), {\"MSAM\" : 1, \"is\" : 2, \"best\" : 3} ) == (4, 5, 6, {'MSAM': 1, 'is': 2, 'best': 3})\n\"\"\"\ndef add_dict_to_tuple(input_tuple, input_dict):\n    # Convert the tuple to a list so it can be modified\n    input_list = list(input_tuple)\n    \n    # Append the dictionary to the end of the list\n    input_list.append(input_dict)\n    \n    # Convert the list back to a tuple\n    return tuple(input_list)\n\n# Test cases\nassert add_dict_to_tuple((4, 5, 6), {\"MSAM\" : 1, \"is\" : 2, \"best\" : 3}) == (4, 5, 6, {'MSAM': 1, 'is': 2, 'best': 3}), \"Test case 1 failed\"\nassert add_dict_to_tuple((7, 8, 9), {}) == (7, 8, 9,), \"Test case 2 failed\"\nassert add_dict_to_tuple((0, 1, 2), {\"Python\" : 3, \"is\" : 4, \"fun\" : 5}) == (0, 1, 2, {'Python': 3, 'is': 4, 'fun': 5}), \"Test case 3 failed\"", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/754": [{"task_id": "Mbpp/754", "solution": "\"\"\"\nWe say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\nassert extract_index_list([1, 1, 3, 4, 5, 6, 7],[0, 1, 2, 3, 4, 5, 7],[0, 1, 2, 3, 4, 5, 7])==[1, 7]\n\"\"\"\ndef extract_index_list(l1, l2, l3):\n    # Use set intersection to find common elements based on their indices\n    common_elements = [element for element in l1 if element in l2 and element in l3]\n    return common_elements\n\n# Test the function with provided data points\nassert extract_index_list([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]) == [1, 7]", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/767": [{"task_id": "Mbpp/767", "solution": "\"\"\"\nWrite a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\nassert get_pairs_count([1,1,1,1],2) == 6\n\"\"\"\ndef get_pairs_count(nums, sum):\n    # Initialize pair count to zero\n    count = 0\n    \n    # Iterate through each element in the list\n    for i in range(len(nums)):\n        # Iterate through the remaining elements after the current one\n        for j in range(i+1, len(nums)):\n            # Check if the sum of the current pair equals the given sum\n            if nums[i] + nums[j] == sum:\n                # Increment the pair count\n                count += 1\n                \n    # Return the total count of pairs\n    return count\n\n# Test cases", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/775": [{"task_id": "Mbpp/775", "solution": "\"\"\"\nWrite a python function to check whether every odd index contains odd numbers of a given list.\nassert odd_position([2,1,4,3,6,7,6,3]) == True\n\"\"\"\ndef odd_position(lst):\n    for i in range(len(lst)):\n        if i % 2 != 0 and lst[i] % 2 != 0:\n            return False\n    return True\n\n# Test cases\nassert odd_position([2,1,4,3,6,7,6,3]) == True\nassert odd_position([2,1,4,3,6,8,6,3]) == False\nassert odd_position([2,1,4,3,6,7,5,3]) == True\nassert odd_position([2,1,4,3,6,7,6,9]) == True\nassert odd_position([2,1,4,3,6,7,6,8]) == False\nassert odd_position([2,1,4,3,6,7,6,7]) == True\nassert odd_position([2,1,4,3,6,7,6,8,9]) == True\nassert odd_position([2,1,4,3,6,7,6,8,9,10]) == True\nassert odd_position([2,1,4,3,6,7,6,8,9,10,11]) == False\nassert odd_position([2,1,4,3,6,7,6,8,9,10,11,12]) == True\nassert odd_position([2,1,4,3,6,7,6,8,9,10,11,12,13]) == False\nassert odd_position([2,1,4,3,6,7,6,8,9,10,11,12,13,14]) == True\nassert odd_position([2,1,4,3,6,7,6,8,9,10,11,12,13,14,15]) == False\nassert odd_position([2,1,4,3,6,7,6,8,9,10,11,12,13,14,15,16]) == True\nassert odd_position([2,1,4,3,6,7,6,8,9,10,11,12,13,14,15,16,17]) == True\nassert odd_position([2,1,4,3,6,7,6,8,9,10,11,12,13,14,15,16,17,18]) == True\nassert odd_position([2,1,4,3,6,7,6,8,9,10,11,12,13,14,15,16,17,18,19]) == True\nassert odd_position([2,1,4,3,6,7,6,8,9,10,11,12,13,14,15,16,17,18,19,20]) == True\nassert odd_position([2,1,4,3,6,7,6,8,9,10,11,12,13,14,15,16,17,18,19,20,21]) == False\nassert odd_position([2,1,4,3,6,7,6,8,9,10,1", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/733": [{"task_id": "Mbpp/733", "solution": "\"\"\"\nWrite a function to find the index of the first occurrence of a given number in a sorted array.\nassert find_first_occurrence([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5) == 1\n\"\"\"\ndef find_first_occurrence(arr, target):\n    # Initialize the left pointer to start searching from the beginning of the array\n    l = 0\n    # Initialize the right pointer to search from the end of the array\n    r = len(arr) - 1\n    \n    # Perform binary search\n    while l <= r:\n        mid = (l + r) // 2\n        \n        # If the middle element is equal to the target, move the right pointer to the left\n        if arr[mid] == target:\n            r = mid - 1\n        else:\n            # If the middle element is less than the target, move the left pointer to the right\n            l = mid + 1\n    \n    # If the target is not found, return -1\n    return -1\n\n# Test the function with provided data points\nassert find_first_occurrence([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5) == 1", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/748": [{"task_id": "Mbpp/748", "solution": "\"\"\"\nWrite a function to put spaces between words starting with capital letters in a given string.\nassert capital_words_spaces(\"Python\") == 'Python'\n\"\"\"\ndef capital_words_spaces(s):\n    # Split the input string into words based on spaces\n    words = s.split()\n    \n    # Iterate over each word in the list\n    for i, word in enumerate(words):\n        # Check if the first letter of the word is uppercase\n        if word[0].isupper():\n            # If it is, add a space before it\n            words[i] = \" \" + word\n    \n    # Join the modified words back into a single string\n    return ''.join(words)\n\n# Test cases to verify the correctness of the function\nassert capital_words_spaces(\"Python\") == 'Python'\nassert capital_words_spaces(\"HelloWorld\") == 'Hello World'\nassert capital_words_spaces(\"ThisIsAString\") == 'This Is A String'\nassert capital_words_spaces(\"KeepItSimple\") == 'Keep It Simple'", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/760": [{"task_id": "Mbpp/760", "solution": "\"\"\"\nWrite a python function to check whether a list of numbers contains only one distinct element or not.\nassert unique_Element([1,1,1]) == True\n\"\"\"\ndef unique_Element(lst):\n    # Check if the length of the list is 1\n    if len(lst) == 1:\n        return True\n    else:\n        return False\n\n# Test cases\nassert unique_Element([1,1,1]) == True\nassert unique_Element([2,3,4]) == False\nassert unique_Element([]) == True\nassert unique_Element([5]) == True\nassert unique_Element([1,2,2,3]) == False", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/728": [{"task_id": "Mbpp/728", "solution": "\"\"\"\nWrite a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\nassert sum_list([10,20,30],[15,25,35])==[25,45,65]\n\"\"\"\ndef sum_list(list1, list2):\n    return [x + y for x, y in zip(list1, list2)]\n\n# Test cases\nassert sum_list([10, 20, 30], [15, 25, 35]) == [25, 45, 65]", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/740": [{"task_id": "Mbpp/740", "solution": "\"\"\"\nWrite a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\nassert tuple_to_dict((1, 5, 7, 10, 13, 5)) == {1: 5, 7: 10, 13: 5}\n\"\"\"\ndef tuple_to_dict(tup):\n    return dict(zip(tup[::2], tup[1::2]))\n\n# Test cases\nassert tuple_to_dict((1, 5, 7, 10, 13, 5)) == {1: 5, 7: 10, 13: 5}", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/773": [{"task_id": "Mbpp/773", "solution": "\"\"\"\nWrite a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\nassert occurance_substring('python programming, python language','python')==('python', 0, 6)\n\"\"\"\ndef occurance_substring(text, substring):\n    # Initialize variables to store the first occurrence and its index\n    first_occurrence = None\n    first_index = None\n    \n    # Iterate through the text to find the first occurrence of the substring\n    for i in range(len(text)):\n        if text[i:i+len(substring)] == substring:\n            if first_occurrence is None or i < first_index:\n                first_occurrence = substring\n                first_index = i\n    \n    # If no occurrence was found, return None\n    if first_occurrence is None:\n        return None\n    \n    # Return the occurrence, start index, and end index\n    return (first_occurrence, first_index, first_index + len(substring) - 1)\n\n# Test the function with provided data points\nassert occurance_substring('python programming, python language','python') == ('python', 0, 6)", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/739": [{"task_id": "Mbpp/739", "solution": "\"\"\"\nWrite a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\nassert find_Index(2) == 4\n\"\"\"\ndef find_Index(n):\n    # The formula for finding the nth triangular number is n*(n+1)/2.\n    # We need to find the smallest triangular number with n digits.\n    # This means we need to find the smallest integer k such that k*(k+1)/2 >= 10^n.\n    # We can use binary search to find this k efficiently.\n    \n    low = 1\n    high = 10**n\n    \n    while low < high:\n        mid = (low + high) // 2\n        if mid * (mid + 1) // 2 >= 10**n:\n            high = mid\n        else:\n            low = mid + 1\n    \n    return low\n\n# Test cases\nassert find_Index(2) == 4\nassert find_Index(3) == 15\nassert find_Index(4) == 30\nassert find_Index(5) == 55\nassert find_Index(6) == 91\nassert find_Index(7) == 143\nassert find_Index(8) == 204\nassert find_Index(9) == 285\nassert find_Index(10) == 385", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/762": [{"task_id": "Mbpp/762", "solution": "\"\"\"\nWrite a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\nassert check_monthnumber_number(6)==True\n\"\"\"\ndef check_monthnumber_number(month):\n    # Define the months with 30 days\n    months_with_30_days = [4, 6, 9, 11]\n    \n    # Check if the given month number is in the list of months with 30 days\n    return month in months_with_30_days\n\n# Test cases to verify the correctness of the function\nassert check_monthnumber_number(6) == True\nassert check_monthnumber_number(7) == False\nassert check_monthnumber_number(10) == True\nassert check_monthnumber_number(12) == True\nassert check_monthnumber_number(1) == False\nassert check_monthnumber_number(12) == True\nassert check_monthnumber_number(5) == False\nassert check_monthnumber_number(8) == False\nassert check_monthnumber_number(13) == False\nassert check_monthnumber_number(14) == False\nassert check_monthnumber_number(15) == False\nassert check_monthnumber_number(16) == False\nassert check_monthnumber_number(17) == False\nassert check_monthnumber_number(18) == False\nassert check_monthnumber_number(19) == False\nassert check_monthnumber_number(20) == False\nassert check_monthnumber_number(21) == False\nassert check_monthnumber_number(22) == False\nassert check_monthnumber_number(23) == False\nassert check_monthnumber_number(24) == False\nassert check_monthnumber_number(25) == False\nassert check_monthnumber_number(26) == False\nassert check_monthnumber_number(27) == False\nassert check_monthnumber_number(28) == False\nassert check_monthnumber_number(29) == False\nassert check_monthnumber_number(30) == False\nassert check_monthnumber_number(31) == False\nassert check_monthnumber_number(32) == False\nassert check_monthnumber_number(33) == False\nassert check_monthnumber_number(34) == False\nassert check_monthnumber_number(35) == False\nassert check_monthnumber_number(36) == False\nassert check_monthnumber_number(37) == False\nassert check_monthnumber_number(38) == False\nassert check_monthnumber_number(39) == False\nassert check_monthnumber_number(40) == False\nassert check_monthnumber_number(41) == False\nassert check_monthnumber_number(42) == False\nassert check_monthnumber_number(43) == False\nassert check_monthnumber_number(44) == False\nassert check_monthnumber_number(45) == False\nassert check_monthnumber_number(46) == False\nassert check_monthnumber_number(47) == False\nassert check_monthnumber_number(48) == False\nassert check_monthnumber_number(49) == False\nassert check_monthnumber_number(50) == False\nassert check_monthnumber_number(51) == False\nassert check_monthnumber_number(52) == False\nassert check_monthnumber_number(53) == False\nassert check_monthnumber_number(54) == False\nassert check_monthnumber_number(55) == False\nassert check_monthnumber_number(56) == False\nassert check_monthnumber_number(57) == False\nassert check_monthnumber_number(58) == False\nassert check_monthnumber_number(59) == False\nassert check_monthnumber_number(60) == False\nassert check_monthnumber_number(61) == False\nassert check_monthnumber_number(6", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/783": [{"task_id": "Mbpp/783", "solution": "\"\"\"\nWrite a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\nassert rgb_to_hsv(255, 255, 255)==(0, 0.0, 100.0)\n\"\"\"\ndef rgb_to_hsv(r, g, b):\n    # Normalize RGB values to [0, 1]\n    r = float(r) / 255\n    g = float(g) / 255\n    b = float(b) / 255\n    \n    # Find the minimum value of RGB components\n    min_val = min(r, g, b)\n    \n    # Find the maximum value of RGB components\n    max_val = max(r, g, b)\n    \n    # Calculate the saturation\n    if max_val == min_val:\n        s = 0  # No saturation\n    else:\n        s = (max_val - min_val) / max_val\n    \n    # Calculate the hue\n    if s == 0:\n        h = 0  # No hue\n    elif r == max_val:\n        h = (g - b) / (max_val - min_val)\n    elif g == max_val:\n        h = (2 + (b - r)) / (max_val - min_val)\n    elif b == max_val:\n        h = (4 + (r - g)) / (max_val - min_val)\n    else:\n        h = (6 + (g - r)) / (max_val - min_val)\n    \n    # Convert hue from radians to degrees\n    h *= 360\n    \n    return (h, s, max_val)\n\n# Test the function\nassert rgb_to_hsv(255, 255, 255) == (0, 0.0, 100.0)", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/786": [{"task_id": "Mbpp/786", "solution": "\"\"\"\nWrite a function to locate the right insertion point for a specified value in sorted order.\nassert right_insertion([1,2,4,5],6)==4\n\"\"\"\ndef right_insertion(arr, x):\n    # Initialize left pointer to 0 and right pointer to len(arr) - 1\n    low = 0\n    high = len(arr) - 1\n    \n    while low <= high:\n        mid = (low + high) // 2\n        \n        if arr[mid] < x:\n            low = mid + 1\n        else:\n            high = mid - 1\n            \n    return low\n\n# Test the function with provided data points\nassert right_insertion([1,2,4,5],6)==4", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[[50.64327388212607, -72.16612625583227, 95.25630303581863, -75.73998556144497, 11.857449640680656, -90.20293226837086, -12.02758648076636, -35.964731488229475], false]]}], "Mbpp/780": [{"task_id": "Mbpp/780", "solution": "\"\"\"\nWrite a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\nassert find_combinations([(2, 4), (6, 7), (5, 1), (6, 10)]) == [(8, 11), (7, 5), (8, 14), (11, 8), (12, 17), (11, 11)]\n\"\"\"\nfrom itertools import chain\n\ndef find_combinations(tuples_list):\n    # Generate all possible combinations of sums using itertools.chain\n    combinations = list(chain(*map(lambda x: [sum(x)], tuples_list)))\n    \n    # Filter out duplicates and return the result\n    unique_combinations = set(combinations)\n    \n    return list(unique_combinations)\n\n# Test the function with provided data points\nassert find_combinations([(2, 4), (6, 7), (5, 1), (6, 10)]) == [(8, 11), (7, 5), (8, 14), (11, 8), (12, 17), (11, 11)]", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/785": [{"task_id": "Mbpp/785", "solution": "\"\"\"\nWrite a function to convert tuple string to integer tuple.\nassert tuple_str_int(\"(7, 8, 9)\") == (7, 8, 9)\n\"\"\"\ndef tuple_str_int(tuple_str):\n    return tuple(int(x) for x in tuple_str[1:-1].split(','))\n\n# Test cases\nassert tuple_str_int(\"(7, 8, 9)\") == (7, 8, 9)\nassert tuple_str_int(\"(-5, -6, -7)\") == (-5, -6, -7)\nassert tuple_str_int(\"(0, 0, 0)\") == (0, 0, 0)\nassert tuple_str_int(\"(-1, 2, -3)\") == (-1, 2, -3)", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [["((7, 8, 9)"]]}], "Mbpp/799": [{"task_id": "Mbpp/799", "solution": "\"\"\"\nWrite a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nassert left_rotate(16,2) == 64\n\"\"\"\ndef left_rotate(num, d):\n    # Convert num to binary string\n    bin_num = bin(num)[2:]\n    \n    # Pad the binary string with zeros on the right if necessary\n    while len(bin_num) < 32:\n        bin_num += '0'\n    \n    # Perform the rotation\n    rotated_bin_num = bin_num[d:] + bin_num[:d]\n    \n    # Convert the rotated binary string back to decimal\n    return int(rotated_bin_num, 2)\n\n# Test cases\nassert left_rotate(16, 2) == 64", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/794": [{"task_id": "Mbpp/794", "solution": "\"\"\"\nWrite a function that matches a string that has an 'a' followed by anything, ending in 'b'.\nassert text_starta_endb(\"aabbbb\")\n\"\"\"\nimport re\n\ndef match_string(text):\n    # Define the regular expression pattern to match 'a' followed by anything, ending in 'b'\n    pattern = r'a.*b$'\n    \n    # Use the re.match() function to check if the pattern matches the given text\n    if re.match(pattern, text):\n        return True\n    else:\n        return False\n\n# Test cases to verify the correctness of the function\nassert match_string(\"aabbbb\") == True\nassert match_string(\"abc\") == False\nassert match_string(\"abca\") == False\nassert match_string(\"abba\") == True\nassert match_string(\"abbb\") == True\nassert match_string(\"ab\") == False\nassert match_string(\"aba\") == False\nassert match_string(\"abb\") == True\nassert match_string(\"abbc\") == True\nassert match_string(\"abccc\") == True\nassert match_string(\"abcccc\") == True\nassert match_string(\"abdddd\") == True\nassert match_string(\"abddddddd\") == True\nassert match_string(\"abdddddddddd\") == True\nassert match_string(\"abddddddddddddddd\") == True\nassert match_string(\"abddddddddddddddddddd\") == True\nassert match_string(\"abddddddddddddddddddddddd\") == True\nassert match_string(\"abddddddddddddddddddddddd\") == True\nassert match_string(\"abddddddddddddddddddddddd\") == True\nassert match_string(\"abddddddddddddddddddddddd\") == True\nassert match_string(\"abddddddddddddddddddddddd\") == True\nassert match_string(\"abddddddddddddddddddddddd\") == True\nassert match_string(\"abddddddddddddddddddddddd\") == True\nassert match_string(\"abddddddddddddddddddddddd\") == True\nassert match_string(\"abddddddddddddddddddddddd\") == True\nassert match_string(\"abddddddddddddddddddddddd\") == True\nassert match_string(\"abddddddddddddddddddddddd\") == True\nassert match_string(\"abddddddddddddddddddddddd\") == True\nassert match_string(\"abddddddddddddddddddddddd\") == True\nassert match_string(\"abddddddddddddddddddddddd\") == True\nassert match_string(\"abddddddddddddddddddddddd\") == True\nassert match_string(\"abddddddddddddddddddddddd\") == True\nassert match_string(\"abddddddddddddddddddddddd\") == True\nassert match_string(\"abddddddddddddddddddddddd\") == True\nassert match_string(\"abddddddddddddddddddddddd\") == True\nassert match_string(\"abddddddddddddddddddddddd\") == True\nassert match_string(\"abddddddddddddddddddddddd\") == True\nassert match_string(\"abddddddddddddddddddddddd\") == True\nassert match_string(\"abddddddddddddddddddddddd\") == True\nassert match_string(\"abddddddddddddddddddddddd\") == True\nassert match_string(\"abddddddddddddddddddddddd\") == True\nassert match_string(\"abddddddddddddddddddddddd\") == True\nassert match_string(\"abddddddddddddddddddddddd\") == True\nassert match_string(\"abddddddddddddddddddddddd\") == True\nassert match_string(\"abddddddddddddddddddddddd\") == True\nassert match_string(\"abddddddddddddddddddddddd\") == True\nassert match_string(\"abddddddddddddddddddddddd\") == True\nassert match_string(\"abddddddddddddddddddddddd\") == True\nassert match_string(\"abddddddddddddddddddddddd\") == True\nassert match_string(\"abddddddddddddddddddddddd\") == True\nassert match_string(\"ab", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/782": [{"task_id": "Mbpp/782", "solution": "\"\"\"\nWrite a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\nassert odd_length_sum([1,2,4]) == 14\n\"\"\"\ndef odd_length_sum(arr):\n    # Initialize the result variable\n    total_sum = 0\n    \n    # Iterate over each element in the array\n    for i in range(len(arr)):\n        # Calculate the sum of all elements from the current index to the end of the array\n        current_sum = sum(arr[i:])\n        \n        # Check if the length of the subarray is odd\n        if (i + 1) % 2 != 0:\n            # Add the current sum to the total sum\n            total_sum += current_sum\n    \n    return total_sum\n\n# Test cases\nassert odd_length_sum([1,2,4]) == 14", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/801": [{"task_id": "Mbpp/801", "solution": "\"\"\"\nWrite a python function to count the number of equal numbers from three given integers.\nassert test_three_equal(1,1,1) == 3\n\"\"\"\ndef test_three_equal(a, b, c):\n    \"\"\"\n    This function takes three integers as input and returns the count of how many of them are equal.\n    \n    Args:\n    a (int): The first integer.\n    b (int): The second integer.\n    c (int): The third integer.\n    \n    Returns:\n    int: The count of equal numbers among the three integers.\n    \"\"\"\n    return sum([a == b, b == c, c == a])\n\n# Test cases to verify the correctness of the function\nassert test_three_equal(1, 1, 1) == 3\nassert test_three_equal(2, 2, 2) == 3\nassert test_three_equal(3, 4, 5) == 0\nassert test_three_equal(-1, -1, -1) == 3\nassert test_three_equal(0, 0, 0) == 3", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[1, 2, 2]], "plus_fail_tests": [[10, 10, 20]]}], "Mbpp/781": [{"task_id": "Mbpp/781", "solution": "\"\"\"\nWrite a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\nassert count_divisors(10)\n\"\"\"\ndef count_divisors(n):\n    # Initialize divisor count to 0\n    count = 0\n    \n    # Loop through possible divisors from 1 to n\n    for i in range(1, n + 1):\n        if n % i == 0:\n            count += 1\n            \n    # Check if the count of divisors is even\n    return count % 2 == 0\n\n# Test cases\nassert count_divisors(10) == True\nassert count_divisors(15) == False\nassert count_divisors(17) == False\nassert count_divisors(18) == True\nassert count_divisors(19) == False\nassert count_divisors(20) == True\nassert count_divisors(21) == False\nassert count_divisors(22) == True\nassert count_divisors(23) == False\nassert count_divisors(24) == True\nassert count_divisors(25) == False\nassert count_divisors(26) == True\nassert count_divisors(27) == False\nassert count_divisors(28) == True\nassert count_divisors(29) == False\nassert count_divisors(30) == True\nassert count_divisors(31) == False\nassert count_divisors(32) == True\nassert count_divisors(33) == False\nassert count_divisors(34) == True\nassert count_divisors(35) == False\nassert count_divisors(36) == True\nassert count_divisors(37) == False\nassert count_divisors(38) == True\nassert count_divisors(39) == False\nassert count_divisors(40) == True\nassert count_divisors(41) == False\nassert count_divisors(42) == True\nassert count_divisors(43) == False\nassert count_divisors(44) == True\nassert count_divisors(45) == False\nassert count_divisors(46) == True\nassert count_divisors(47) == False\nassert count_divisors(48) == True\nassert count_divisors(49) == False\nassert count_divisors(50) == True\nassert count_divisors(51) == False\nassert count_divisors(52) == True\nassert count_divisors(53) == False\nassert count_divisors(54) == True\nassert count_divisors(55) == False\nassert count_divisors(56) == True\nassert count_divisors(57) == False\nassert count_divisors(58) == True\nassert count_divisors(59) == False\nassert count_divisors(60) == True\nassert count_divisors(61) == False\nassert count_divisors(62) == True\nassert count_divisors(63) == False\nassert count_divisors(64) == True\nassert count_divisors(65) == False\nassert count_divisors(66) == True\nassert count_divisors(67) == False\nassert count_divisors(68) == True\nassert count_divisors(69) == False\nassert count_divisors(70) == True\nassert count_divisors(71) == False\nassert count_divisors(72) == True\nassert count_divisors(73) == False\nassert count_divisors(74) == True\nassert count_divisors(75) == False\nassert count_divisors(76) ==", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/796": [{"task_id": "Mbpp/796", "solution": "\"\"\"\nWrite function to find the sum of all items in the given dictionary.\nassert return_sum({'a': 100, 'b':200, 'c':300}) == 600\n\"\"\"\ndef return_sum(input_dict):\n    \"\"\"\n    Write function to find the sum of all items in the given dictionary.\n    assert return_sum({'a': 100, 'b':200, 'c':300}) == 600\n    \"\"\"\n    return sum(input_dict.values())\n\n# Test the function", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/807": [{"task_id": "Mbpp/807", "solution": "\"\"\"\nWrite a python function to find the first odd number in a given list of numbers.\nassert first_odd([1,3,5]) == 1\n\"\"\"\ndef first_odd(numbers):\n    for num in numbers:\n        if num % 2 != 0:\n            return num\n\n# Test cases\nassert first_odd([1,3,5]) == 1\nassert first_odd([2,4,6]) == None\nassert first_odd([]) == None\nassert first_odd([2,2,2,2]) == None", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/809": [{"task_id": "Mbpp/809", "solution": "\"\"\"\nWrite a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\nassert check_smaller((1, 2, 3), (2, 3, 4)) == False\n\"\"\"\ndef check_smaller(first_tuple, second_tuple):\n    # Iterate over the elements of both tuples using zip\n    for x, y in zip(first_tuple, second_tuple):\n        # Check if the element in the first tuple is less than the element in the second tuple\n        if x >= y:\n            return False\n    return True\n\n# Test cases to verify the correctness of the function\nassert check_smaller((1, 2, 3), (2, 3, 4)) == False\nassert check_smaller((5, 6, 7), (5, 6, 7)) == True\nassert check_smaller((0, 1, 2), (0, 1, 2)) == True\nassert check_smaller((-1, -2, -3), (-2, -3, -4)) == True\nassert check_smaller((10, 20, 30), (10, 20, 30)) == True\nassert check_smaller((1, 2, 3), (4, 5, 6)) == False", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/793": [{"task_id": "Mbpp/793", "solution": "\"\"\"\nWrite a python function to find the last position of an element in a sorted array.\nassert last([1,2,3],1) == 0\n\"\"\"\ndef last(arr, x):\n    # Initialize the start and end pointers\n    low = 0\n    high = len(arr) - 1\n    \n    # Perform binary search\n    while low <= high:\n        mid = (low + high) // 2\n        \n        # If the target is found at the middle index\n        if arr[mid] == x:\n            return mid\n        \n        # If the target is greater than the middle element\n        elif arr[mid] < x:\n            low = mid + 1\n        \n        # If the target is smaller than the middle element\n        else:\n            high = mid - 1\n    \n    # Return -1 if the element is not found\n    return -1\n\n# Test cases\nassert last([1,2,3],1) == 0", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/792": [{"task_id": "Mbpp/792", "solution": "\"\"\"\nWrite a python function to count the number of lists in a given number of lists.\nassert count_list([[1, 3], [5, 7], [9, 11], [13, 15, 17]]) == 4\n\"\"\"\ndef count_list(lists):\n    # Initialize a counter for the list count\n    count = 0\n    \n    # Iterate through each sublist in the main list\n    for sublist in lists:\n        # Increment the counter for each sublist found\n        count += 1\n    \n    # Return the total count of sublists\n    return count\n\n# Test the function with provided data points\nassert count_list([[1, 3], [5, 7], [9, 11], [13, 15, 17]]) == 4", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[[2, 3, [4, [5, [6, [7, [8, 9]]]]]]]]}], "Mbpp/808": [{"task_id": "Mbpp/808", "solution": "\"\"\"\nWrite a function to check if the given tuples contain the k or not.\nassert check_K((10, 4, 5, 6, 8), 6) == True\n\"\"\"\ndef check_K(tup, k):\n    # Check if the tuple contains the element k\n    return k in tup\n\n# Test cases\nassert check_K((10, 4, 5, 6, 8), 6) == True\nassert check_K((1, 2, 3, 4, 5), 6) == False\nassert check_K((7, 8, 9, 10, 11), 11) == True\nassert check_K((12, 13, 14, 15, 16), 16) == True\nassert check_K((17, 18, 19, 20, 21), 22) == False", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/804": [{"task_id": "Mbpp/804", "solution": "\"\"\"\nWrite a function to check whether the product of numbers in a list is even or not.\nassert is_product_even([1,2,3])\n\"\"\"\ndef is_product_even(numbers):\n    # Calculate the product of all elements in the list\n    product = 1\n    for num in numbers:\n        product *= num\n    \n    # Check if the product is even\n    return product % 2 == 0\n\n# Test cases\nassert is_product_even([1,2,3]) == True\nassert is_product_even([1,3,5]) == False\nassert is_product_even([2,4,6]) == True\nassert is_product_even([1,3,7]) == False", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/800": [{"task_id": "Mbpp/800", "solution": "\"\"\"\nWrite a function to remove all whitespaces from a string.\nassert remove_all_spaces('python  program')==('pythonprogram')\n\"\"\"\ndef remove_all_spaces(s):\n    \"\"\"\n    Remove all whitespaces from a string.\n\n    Args:\n    s (str): The input string from which whitespaces will be removed.\n\n    Returns:\n    str: A new string with all whitespaces removed.\n    \"\"\"\n    return ''.join(c for c in s if c != ' ')\n\n# Test cases to verify the correctness of the function\nassert remove_all_spaces('python  program') == ('pythonprogram')\n\n# Additional test cases\nassert remove_all_spaces('   ') == ''\nassert remove_all_spaces('hello world') == 'helloworld'\nassert remove_all_spaces('Python programming') == 'Pythonprogramming'", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/784": [{"task_id": "Mbpp/784", "solution": "\"\"\"\nWrite a function to find the product of first even and odd number of a given list.\nassert mul_even_odd([1,3,5,7,4,1,6,8])==4\n\"\"\"\ndef mul_even_odd(lst):\n    # Initialize variables for the first even and odd numbers\n    first_even = None\n    first_odd = None\n    \n    # Iterate through the list to find the first even and odd numbers\n    for num in lst:\n        if first_even is None and num % 2 == 0:\n            first_even = num\n        elif first_odd is None and num % 2 != 0:\n            first_odd = num\n    \n    # Check if both even and odd numbers were found\n    if first_even is not None and first_odd is not None:\n        return first_even * first_odd\n    else:\n        return \"No even or odd numbers found\"\n\n# Test the function with provided data points\nassert mul_even_odd([1,3,5,7,4,1,6,8]) == 4", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/790": [{"task_id": "Mbpp/790", "solution": "\"\"\"\nWrite a python function to check whether every even index contains even numbers of a given list.\nassert even_position([3,2,1]) == False\n\"\"\"\ndef even_position(lst):\n    # Iterate through the list using enumerate to get both index and value\n    for idx, val in enumerate(lst):\n        # Check if the index is even and the value is not divisible by 2\n        if idx % 2 == 0 and val % 2 != 0:\n            return False\n    # If no such element is found, return True\n    return True\n\n# Test cases", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/805": [{"task_id": "Mbpp/805", "solution": "\"\"\"\nWrite a function that returns the list in a list of lists whose sum of elements is the highest.\nassert max_sum_list([[1,2,3], [4,5,6], [10,11,12], [7,8,9]])==[10, 11, 12]\n\"\"\"\ndef max_sum_list(lst):\n    # Calculate the sum of each sublist and store it in a new list\n    sums = [sum(sublist) for sublist in lst]\n    \n    # Find the maximum sum from the list of sums\n    max_sum = max(sums)\n    \n    # Return the sublist with the maximum sum\n    return [sublist for sublist in lst if sum(sublist) == max_sum]\n\n# Test cases to verify the correctness of the function\nassert max_sum_list([[1,2,3], [4,5,6], [10,11,12], [7,8,9]]) == [10, 11, 12]\nassert max_sum_list([[1,2,3], [4,5,6], [10,11,12], [7,8,9], [10,11,12]]) == [10, 11, 12]\nassert max_sum_list([[1,2,3], [4,5,6], [10,11,12], [7,8,9], [10,11,12], [10,11,12]]) == [10, 11, 12]\nassert max_sum_list([[1,2,3], [4,5,6], [10,11,12], [7,8,9], [10,11,12], [10,11,12], [10,11,12]]) == [10, 11, 12]\nassert max_sum_list([[1,2,3], [4,5,6], [10,11,12], [7,8,9], [10,11,12], [10,11,12], [10,11,12], [10,11,12]]) == [10, 11, 12]\nassert max_sum_list([[1,2,3], [4,5,6], [10,11,12], [7,8,9], [10,11,12], [10,11,12], [10,11,12], [10,11,12], [10,11,12]]) == [10, 11, 12]\nassert max_sum_list([[1,2,3], [4,5,6], [10,11,12], [7,8,9], [10,11,12], [10,11,12], [10,11,12], [10,11,12], [10,11,12]]) == [10, 11, 12]\nassert max_sum_list([[1,2,3], [4,5,6], [10,11,12], [7,8,9], [10,11,12], [10,11,12], [10,11,12], [10,11,12], [10,11,12]]) == [10, 11, 12]\nassert max_sum_list([[1,2,3], [4,5,6], [10,11,12], [7,8,9], [10", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/791": [{"task_id": "Mbpp/791", "solution": "\"\"\"\nWrite a function to remove tuples from the given tuple.\nassert remove_nested((1, 5, 7, (4, 6), 10)) == (1, 5, 7, 10)\n\"\"\"\ndef remove_nested(input_tuple):\n    # Initialize an empty list to store non-nested elements\n    result = []\n    \n    # Iterate over each element in the input tuple\n    for item in input_tuple:\n        # Check if the item is not a tuple\n        if isinstance(item, tuple):\n            # If it's a tuple, iterate over its elements and add them to the result list\n            for sub_item in item:\n                result.append(sub_item)\n        else:\n            # If it's not a tuple, directly add it to the result list\n            result.append(item)\n    \n    # Return the resulting list without any nested tuples\n    return tuple(result)\n\n# Test the function with provided data points\nassert remove_nested((1, 5, 7, (4, 6), 10)) == (1, 5, 7, 10)", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/798": [{"task_id": "Mbpp/798", "solution": "\"\"\"\nWrite a python function to find the sum of an array.\nassert _sum([1, 2, 3]) == 6\n\"\"\"\ndef _sum(arr):\n    return sum(arr)\n\n# Test cases\nassert _sum([1, 2, 3]) == 6\nassert _sum([4, 5, 6, 7]) == 21\nassert _sum([]) == 0\nassert _sum([-1, -2, -3]) == -6", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/787": [{"task_id": "Mbpp/787", "solution": "\"\"\"\nWrite a function that matches a string that has an a followed by three 'b'.\nassert not text_match_three(\"ac\")\n\"\"\"\n# Define the function to check if the input string matches the pattern \"a followed by three 'b'\ndef text_match_three(text):\n    # Use regular expression to match the pattern\n    import re\n    return bool(re.match(r'a.*bb', text))\n\n# Test cases to verify the correctness of the function\nassert not text_match_three(\"ac\")  # Should return False as \"ac\" does not match the pattern\nassert text_match_three(\"abb\")  # Should return True as \"abb\" matches the pattern\nassert text_match_three(\"abbb\")  # Should return True as \"abbb\" matches the pattern\nassert text_match_three(\"abc\")  # Should return False as \"abc\" does not match the pattern\nassert text_match_three(\"aabbb\")  # Should return True as \"aabbb\" matches the pattern\nassert text_match_three(\"aaaa\")  # Should return False as \"aaaa\" does not match the pattern\nassert text_match_three(\"abbbb\")  # Should return True as \"abbbb\" matches the pattern\nassert text_match_three(\"abbbbb\")  # Should return True as \"abbbbb\" matches the pattern\nassert text_match_three(\"abcccc\")  # Should return True as \"abcccc\" matches the pattern\nassert text_match_three(\"abdddd\")  # Should return True as \"abdddd\" matches the pattern\nassert text_match_three(\"abeeee\")  # Should return True as \"abeeee\" matches the pattern\nassert text_match_three(\"abffff\")  # Should return True as \"abffff\" matches the pattern\nassert text_match_three(\"abgggg\")  # Should return True as \"abgggg\" matches the pattern\nassert text_match_three(\"abhhhhh\")  # Should return True as \"abhhhhh\" matches the pattern\nassert text_match_three(\"abiiiii\")  # Should return True as \"abiiiii\" matches the pattern\nassert text_match_three(\"abjjjjj\")  # Should return True as \"abjjjjj\" matches the pattern\nassert text_match_three(\"abkkkkk\")  # Should return True as \"abkkkkk\" matches the pattern\nassert text_match_three(\"ablllll\")  # Should return True as \"ablllll\" matches the pattern\nassert text_match_three(\"abmmmmm\")  # Should return True as \"abmmmmm\" matches the pattern\nassert text_match_three(\"abnnnnn\")  # Should return True as \"abnnnnn\" matches the pattern\nassert text_match_three(\"aboo\")  # Should return False as \"aboo\" does not match the pattern\nassert text_match_three(\"abuuu\")  # Should return False as \"abuuu\" does not match the pattern\nassert text_match_three(\"abvvv\")  # Should return False as \"abvvv\" does not match the pattern\nassert text_match_three(\"abwww\")  # Should return False as \"abwww\" does not match the pattern\nassert text_match_three(\"abxxx\")  # Should return False as \"abxxx\" does not match the pattern\nassert text_match_three(\"abyyy\")  # Should return False as \"abyyy\" does not match the pattern\nassert text_match_three(\"azzzz\")  # Should return False as \"azzzz\" does not match the pattern\nassert text_match_three(\"baaaa\")  # Should return False as \"baaaa\" does not match the pattern\nassert text_match_three(\"bbbbb\")  # Should return False as \"bbbbb\" does not match the pattern\nassert text_match_three(\"ccccc\")  # Should return False as \"", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/806": [{"task_id": "Mbpp/806", "solution": "\"\"\"\nWrite a function to find maximum run of uppercase characters in the given string.\nassert max_run_uppercase('GeMKSForGERksISBESt') == 5\n\"\"\"\ndef max_run_uppercase(s):\n    # Initialize variables to keep track of the current run and the maximum run found\n    current_run = 0\n    max_run = 0\n    \n    # Iterate through each character in the string\n    for char in s:\n        if char.isupper():\n            # If the character is uppercase, increment the current run\n            current_run += 1\n        else:\n            # If the character is not uppercase, reset the current run\n            current_run = 0\n        \n        # Update the maximum run if the current run is greater than the previous maximum run\n        if current_run > max_run:\n            max_run = current_run\n    \n    return max_run\n\n# Test the function with provided data points\nassert max_run_uppercase('GeMKSForGERksISBESt') == 5", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [["Aaa"]]}], "Mbpp/788": [{"task_id": "Mbpp/788", "solution": "\"\"\"\nWrite a function to create a new tuple from the given string and list.\nassert new_tuple([\"WEB\", \"is\"], \"best\") == ('WEB', 'is', 'best')\n\"\"\"\ndef new_tuple(string_list, string):\n    # Convert the string into a tuple using the join method\n    return tuple(string_list + [string])\n\n# Test the function with provided data points\nassert new_tuple([\"WEB\", \"is\"], \"best\") == ('WEB', 'is', 'best')", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/803": [{"task_id": "Mbpp/803", "solution": "\"\"\"\nWrite a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\nassert not is_perfect_square(10)\n\"\"\"\ndef is_perfect_square(n):\n    if n < 0:\n        return False\n    x = int(n ** 0.5)\n    return x * x == n\n\n# Test cases\nassert not is_perfect_square(10)  # Expected output: False\nassert is_perfect_square(36)  # Expected output: True\nassert is_perfect_square(-4)  # Expected output: False\nassert is_perfect_square(25)  # Expected output: True\nassert is_perfect_square(1)  # Expected output: True\nassert is_perfect_square(0)  # Expected output: True\nassert is_perfect_square(81)  # Expected output: True\nassert is_perfect_square(97)  # Expected output: False\nassert is_perfect_square(100)  # Expected output: True\nassert is_perfect_square(101)  # Expected output: False\nassert is_perfect_square(102)  # Expected output: False\nassert is_perfect_square(103)  # Expected output: False\nassert is_perfect_square(104)  # Expected output: False\nassert is_perfect_square(105)  # Expected output: False\nassert is_perfect_square(106)  # Expected output: False\nassert is_perfect_square(107)  # Expected output: False\nassert is_perfect_square(108)  # Expected output: False\nassert is_perfect_square(109)  # Expected output: False\nassert is_perfect_square(110)  # Expected output: False\nassert is_perfect_square(111)  # Expected output: False\nassert is_perfect_square(112)  # Expected output: False\nassert is_perfect_square(113)  # Expected output: False\nassert is_perfect_square(114)  # Expected output: False\nassert is_perfect_square(115)  # Expected output: False\nassert is_perfect_square(116)  # Expected output: False\nassert is_perfect_square(117)  # Expected output: False\nassert is_perfect_square(118)  # Expected output: False\nassert is_perfect_square(119)  # Expected output: False\nassert is_perfect_square(120)  # Expected output: False\nassert is_perfect_square(121)  # Expected output: True\nassert is_perfect_square(122)  # Expected output: False\nassert is_perfect_square(123)  # Expected output: False\nassert is_perfect_square(124)  # Expected output: False\nassert is_perfect_square(125)  # Expected output: False\nassert is_perfect_square(126)  # Expected output: False\nassert is_perfect_square(127)  # Expected output: False\nassert is_perfect_square(128)  # Expected output: False\nassert is_perfect_square(129)  # Expected output: False\nassert is_perfect_square(130)  # Expected output: False\nassert is_perfect_square(131)  # Expected output: False\nassert is_perfect_square(132)  # Expected output: False\nassert is_perfect_square(133)  # Expected output: False\nassert is_perfect_square(134)  # Expected output: False\nassert is_perfect_square(", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/797": [{"task_id": "Mbpp/797", "solution": "\"\"\"\nWrite a python function to find the sum of all odd natural numbers within the range l and r.\nassert sum_in_range(2,5) == 8\n\"\"\"\ndef sum_in_range(l, r):\n    # Initialize the sum variable\n    total_sum = 0\n    \n    # Iterate through each number from l to r\n    for num in range(l, r + 1):\n        # Check if the number is odd\n        if num % 2 != 0:\n            # Add the odd number to the total sum\n            total_sum += num\n    \n    # Return the final sum\n    return total_sum\n\n# Test the function with provided data points\nassert sum_in_range(2, 5) == 8", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/630": [{"task_id": "Mbpp/630", "solution": "\"\"\"\nWrite a function to extract all the adjacent coordinates of the given coordinate tuple.\nassert get_coordinates((3, 4)) == [[2, 3], [2, 4], [2, 5], [3, 3], [3, 4], [3, 5], [4, 3], [4, 4], [4, 5]]\n\"\"\"\ndef get_coordinates(coord):\n    # Define the range of possible coordinates based on the input coordinate\n    start = min(coord)\n    end = max(coord) + 1\n    \n    # Generate all possible adjacent coordinates\n    adjacent_coords = []\n    for i in range(start, end):\n        for j in range(start, end):\n            if (i, j) != coord:\n                adjacent_coords.append([i, j])\n    \n    return adjacent_coords\n\n# Test the function with provided data points\nassert get_coordinates((3, 4)) == [[2, 3], [2, 4], [2, 5], [3, 3], [3, 4], [3, 5], [4, 3], [4, 4], [4, 5]]", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/255": [{"task_id": "Mbpp/255", "solution": "\"\"\"\nWrite a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\nassert combinations_colors( [\"Red\",\"Green\",\"Blue\"],1)==[('Red',), ('Green',), ('Blue',)]\n\"\"\"\nfrom itertools import combinations_with_replacement\n\ndef combinations_colors(colors, n):\n    return [tuple(c) for c in combinations_with_replacement(colors, n)]\n\n# Test cases to verify the correctness of the solution\nassert combinations_colors([\"Red\", \"Green\", \"Blue\"], 1) == [('Red',), ('Green',), ('Blue',)]\nassert combinations_colors([\"Red\", \"Green\", \"Blue\"], 2) == [('Red', 'Red'), ('Red', 'Green'), ('Red', 'Blue'), ('Green', 'Red'), ('Green', 'Green'), ('Green', 'Blue'), ('Blue', 'Red'), ('Blue', 'Green'), ('Blue', 'Blue')]\nassert combinations_colors([\"Red\", \"Green\", \"Blue\"], 3) == [('Red', 'Red', 'Red'), ('Red', 'Red', 'Green'), ('Red', 'Red', 'Blue'), ('Red', 'Green', 'Red'), ('Red', 'Green', 'Green'), ('Red', 'Green', 'Blue'), ('Red', 'Blue', 'Red'), ('Red', 'Blue', 'Green'), ('Red', 'Blue', 'Blue'), ('Green', 'Red', 'Red'), ('Green', 'Red', 'Green'), ('Green', 'Red', 'Blue'), ('Green', 'Green', 'Red'), ('Green', 'Green', 'Green'), ('Green', 'Green', 'Blue'), ('Blue', 'Red', 'Red'), ('Blue', 'Red', 'Green'), ('Blue', 'Red', 'Blue'), ('Blue', 'Green', 'Red'), ('Blue', 'Green', 'Green'), ('Blue', 'Green', 'Blue'), ('Blue', 'Blue', 'Red'), ('Blue', 'Blue', 'Green'), ('Blue', 'Blue', 'Blue')]", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/123": [{"task_id": "Mbpp/123", "solution": "\"\"\"\nWrite a function to sum all amicable numbers from 1 to a specified number.\nassert amicable_numbers_sum(999)==504\n\"\"\"\ndef amicable_numbers_sum(n):\n    # Helper function to check if two numbers are amicable\n    def is_amicable(a, b):\n        return sum(divisors(a)) == b and sum(divisors(b)) == a\n    \n    # Function to calculate divisors of a number\n    def divisors(num):\n        divs = []\n        for i in range(1, num + 1):\n            if num % i == 0:\n                divs.append(i)\n        return divs\n    \n    # Calculate the sum of amicable numbers up to n\n    sum_amicables = 0\n    for a in range(2, n + 1):\n        for b in range(a + 1, n + 1):\n            if is_amicable(a, b):\n                sum_amicables += a + b\n    return sum_amicables\n\n# Test the function with provided data points\nassert amicable_numbers_sum(999) == 504", "base_status": "timeout", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}]}}