{"date": "2025-06-03 19:39", "hash": "ebe95df0d5220f00cedd6f4bddea35e4", "eval": {"Mbpp/56": [{"task_id": "Mbpp/56", "solution": "\"\"\"\nWrite a python function to check if a given number is one less than twice its reverse.\nassert check(70) == False\n\"\"\"\ndef check(n):\n    # Calculate the reverse of the number\n    rev = 0\n    temp = n\n    \n    while temp > 0:\n        rem = temp % 10\n        rev = (rev * 10) + rem\n        temp //= 10\n    \n    # Check if the number is one less than twice its reverse\n    return (2 * rev - 1 == n)\n\n# Test the function with the provided test case\nassert check(70) == False\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/14": [{"task_id": "Mbpp/14", "solution": "\"\"\"\nWrite a python function to find the volume of a triangular prism.\nassert find_Volume(10,8,6) == 240\n\"\"\"\ndef find_Volume(base, height, length):\n    # Calculate the area of the base triangle using the formula: (base * height) / 2\n    base_area = (base * height) / 2\n    \n    # Calculate the volume of the triangular prism using the formula: base_area * length\n    volume = base_area * length\n    \n    return volume\n\n# Test the function with the provided test case\nassert find_Volume(10, 8, 6) == 240\n", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[123456789, 987654321, 12345]]}], "Mbpp/75": [{"task_id": "Mbpp/75", "solution": "\"\"\"\nWrite a function to find tuples which have all elements divisible by k from the given list of tuples.\nassert find_tuples([(6, 24, 12), (7, 9, 6), (12, 18, 21)], 6) == [(6, 24, 12)]\n\"\"\"\ndef find_tuples(test_list, K):\n    # Use list comprehension to filter tuples where all elements are divisible by K\n    res = [tup for tup in test_list if all(x % K == 0 for x in tup)]\n    return res\n\n# Test the function with the provided test case\nassert find_tuples([(6, 24, 12), (7, 9, 6), (12, 18, 21)], 6) == [(6, 24, 12)]", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/65": [{"task_id": "Mbpp/65", "solution": "\"\"\"\nWrite a function to flatten a list and sum all of its elements.\nassert recursive_list_sum(([1, 2, [3,4],[5,6]]))==21\n\"\"\"\ndef recursive_list_sum(lst):\n    # Initialize sum to zero\n    total = 0\n    \n    # Iterate through each element in the list\n    for i in lst:\n        # Check if the element is a list\n        if isinstance(i, list):\n            # Recursively call the function if it's a list\n            total += recursive_list_sum(i)\n        else:\n            # Add the element to the total sum if it's not a list\n            total += i\n            \n    # Return the total sum of the flattened list\n    return total\n\n# Test the function with the provided test case\nassert recursive_list_sum([1, 2, [3, 4], [5, 6]]) == 21\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/18": [{"task_id": "Mbpp/18", "solution": "\"\"\"\nWrite a function to remove characters from the first string which are present in the second string.\nassert remove_dirty_chars(\"probasscurve\", \"pros\") == 'bacuve'\n\"\"\"\ndef remove_dirty_chars(str1, str2):\n    # Create a set of characters from str2 for quick lookup\n    char_set = set(str2)\n    \n    # Use list comprehension to filter out characters in str1 that are not in char_set\n    result = [char for char in str1 if char not in char_set]\n    \n    # Join the list back into a string and return it\n    return ''.join(result)\n\n# Test the function with the provided test case\nassert remove_dirty_chars(\"probasscurve\", \"pros\") == 'bacuve'", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/66": [{"task_id": "Mbpp/66", "solution": "\"\"\"\nWrite a python function to count the number of positive numbers in a list.\nassert pos_count([1,-2,3,-4]) == 2\n\"\"\"\ndef pos_count(nums):\n    # Initialize a counter for positive numbers\n    count = 0\n    \n    # Iterate through each number in the list\n    for num in nums:\n        # Check if the number is positive\n        if num > 0:\n            # Increment the counter if the number is positive\n            count += 1\n            \n    # Return the total count of positive numbers\n    return count\n\n# Test the function with the provided test case\nassert pos_count([1, -2, 3, -4]) == 2\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/69": [{"task_id": "Mbpp/69", "solution": "\"\"\"\nWrite a function to check whether a list contains the given sublist or not.\nassert is_sublist([2,4,3,5,7],[3,7])==False\n\"\"\"\ndef is_sublist(l1, l2):\n    # Check if all elements of l2 are in l1\n    return set(l2).issubset(set(l1))\n\n# Test the function with the provided test case\nassert is_sublist([2, 4, 3, 5, 7], [3, 7]) == False\n", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/79": [{"task_id": "Mbpp/79", "solution": "\"\"\"\nWrite a python function to check whether the length of the word is odd or not.\nassert word_len(\"Hadoop\") == False\n\"\"\"\ndef word_len(word):\n    # Check if the length of the word is even\n    return len(word) % 2 == 0\n\n# Test the function with the provided test case\nassert word_len(\"Hadoop\") == False\n", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/80": [{"task_id": "Mbpp/80", "solution": "\"\"\"\nWrite a function to find the nth tetrahedral number.\nassert tetrahedral_number(5) == 35\n\"\"\"\ndef tetrahedral_number(n):\n    # Calculate the nth tetrahedral number using the formula n*(n+1)*(n+2)/6\n    return int(n * (n + 1) * (n + 2) / 6)\n\n# Test the function with the provided test case\nassert tetrahedral_number(5) == 35\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/86": [{"task_id": "Mbpp/86", "solution": "\"\"\"\nWrite a function to find nth centered hexagonal number.\nassert centered_hexagonal_number(10) == 271\n\"\"\"\ndef centered_hexagonal_number(n):\n    # Calculate the nth centered hexagonal number using the formula\n    return 3 * n * (n - 1) + 1\n\n# Test the function with the provided test case\nassert centered_hexagonal_number(10) == 271\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/68": [{"task_id": "Mbpp/68", "solution": "\"\"\"\nWrite a python function to check whether the given array is monotonic or not.\nassert is_Monotonic([6, 5, 4, 4]) == True\n\"\"\"\ndef is_Monotonic(A):\n    # Check if the array is either non-decreasing or non-increasing\n    return (all(A[i] <= A[i + 1] for i in range(len(A) - 1)) or \n            all(A[i] >= A[i + 1] for i in range(len(A) - 1)))\n\n# Test the function with the provided test case\nassert is_Monotonic([6, 5, 4, 4]) == True", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/3": [{"task_id": "Mbpp/3", "solution": "\"\"\"\nWrite a python function to identify non-prime numbers.\nassert is_not_prime(2) == False\n\"\"\"\ndef is_not_prime(n):\n    # Check if the number is less than 2\n    if n < 2:\n        return True\n    # Check for factors from 2 to the square root of n\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return True\n    return False\n\n# Test the function with the provided test case\nassert is_not_prime(2) == False\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/12": [{"task_id": "Mbpp/12", "solution": "\"\"\"\nWrite a function to sort a given matrix in ascending order according to the sum of its rows.\nassert sort_matrix([[1, 2, 3], [2, 4, 5], [1, 1, 1]])==[[1, 1, 1], [1, 2, 3], [2, 4, 5]]\n\"\"\"\ndef sort_matrix(matrix):\n    # Sort the matrix based on the sum of each row\n    return sorted(matrix, key=sum)\n\n# Test the function with the provided test case\nassert sort_matrix([[1, 2, 3], [2, 4, 5], [1, 1, 1]]) == [[1, 1, 1], [1, 2, 3], [2, 4, 5]]", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/77": [{"task_id": "Mbpp/77", "solution": "\"\"\"\nWrite a python function to find whether a number is divisible by 11.\nassert is_Diff (12345) == False\n\"\"\"\ndef is_Diff(n):\n    # Convert the number to a string to easily access each digit\n    s = str(n)\n    \n    # Initialize variables to store the sum of digits at even and odd positions\n    even_sum = 0\n    odd_sum = 0\n    \n    # Iterate over each character in the string representation of the number\n    for i in range(len(s)):\n        # Check if the current position is even or odd\n        if i % 2 == 0:\n            # Add the digit to the even_sum\n            even_sum += int(s[i])\n        else:\n            # Subtract the digit from the odd_sum\n            odd_sum -= int(s[i])\n    \n    # Check if the difference between even_sum and odd_sum is divisible by 11\n    return (even_sum - odd_sum) % 11 == 0\n\n# Test the function with the provided test case\nassert is_Diff(12345) == False", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[1212112]], "plus_fail_tests": [[-1212]]}], "Mbpp/20": [{"task_id": "Mbpp/20", "solution": "\"\"\"\nWrite a function to check if the given number is woodball or not.\nassert is_woodall(383) == True\n\"\"\"\ndef is_woodall(n):\n    # Check if n is less than 2\n    if (n < 2):\n        return False\n    \n    # Initialize variables for the loop\n    k = 0\n    x = 1\n    \n    # Loop until x becomes greater than or equal to n\n    while (x < n):\n        # Update x using the Woodall number formula\n        x = 2 * x + 1\n        \n        # Increment k\n        k += 1\n    \n    # Return True if x equals n, otherwise False\n    return (x == n)\n\n# Test the function with the provided test case\nassert is_woodall(383) == True\n", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/72": [{"task_id": "Mbpp/72", "solution": "\"\"\"\nWrite a python function to check whether the given number can be represented as the difference of two squares or not.\nassert dif_Square(5) == True\n\"\"\"\ndef dif_Square(n):\n    # Check if n is even or 1\n    return (n % 2 == 0 or n == 1)\n\n# Test the function with the provided test case\nassert dif_Square(5) == True\n", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/61": [{"task_id": "Mbpp/61", "solution": "\"\"\"\nWrite a python function to count the number of substrings with the sum of digits equal to their length.\nassert count_Substrings('112112') == 6\n\"\"\"\ndef count_Substrings(s):\n    # Initialize variables to store the count of valid substrings and the current sum\n    count = 0\n    curr_sum = 0\n    \n    # Iterate through each character in the string\n    for i in range(len(s)):\n        # Subtract the ASCII value of '0' from the current character to get its numeric value\n        curr_sum += ord(s[i]) - ord('0')\n        \n        # If the current sum equals the index (i+1), increment the count\n        if curr_sum == i + 1:\n            count += 1\n    \n    return count\n\n# Test the function with the provided test case\nassert count_Substrings('112112') == 6", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/16": [{"task_id": "Mbpp/16", "solution": "\"\"\"\nWrite a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nassert text_lowercase_underscore(\"aab_cbbbc\")==(True)\n\"\"\"\ndef text_lowercase_underscore(text):\n    # Check if the entire string consists of lowercase letters separated by underscores\n    return text == '_'.join(x for x in text.split('_') if x.islower())\n\n# Test the function with the provided test case\nassert text_lowercase_underscore(\"aab_cbbbc\") == True", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/2": [{"task_id": "Mbpp/2", "solution": "\"\"\"\nWrite a function to find the shared elements from the given two lists.\nassert set(similar_elements((3, 4, 5, 6),(5, 7, 4, 10))) == set((4, 5))\n\"\"\"\ndef similar_elements(list1, list2):\n    # Use set intersection to find common elements between the two lists\n    return set(list1) & set(list2)\n\n# Test the function with the provided test case\nassert set(similar_elements((3, 4, 5, 6), (5, 7, 4, 10))) == set((4, 5))\n", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/70": [{"task_id": "Mbpp/70", "solution": "\"\"\"\nWrite a function to find whether all the given tuples have equal length or not.\nassert get_equal([(11, 22, 33), (44, 55, 66)]) == True\n\"\"\"\ndef get_equal(test_list):\n    # Check if all elements in the list have the same length as the first element\n    res = all(len(sub) == len(test_list[0]) for sub in test_list)\n    return res\n\n# Test the function with the provided test case\nassert get_equal([(11, 22, 33), (44, 55, 66)]) == True", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/11": [{"task_id": "Mbpp/11", "solution": "\"\"\"\nWrite a python function to remove first and last occurrence of a given character from the string.\nassert remove_Occ(\"hello\",\"l\") == \"heo\"\n\"\"\"\ndef remove_Occ(s, ch):\n    # Find the index of the first occurrence of 'ch' in 's'\n    first_occ = s.find(ch)\n    \n    # If 'ch' is not found, return the original string\n    if first_occ == -1:\n        return s\n    \n    # Remove the first occurrence of 'ch' by slicing the string\n    s = s[:first_occ] + s[first_occ+1:]\n    \n    # Find the index of the last occurrence of 'ch' in the modified string\n    last_occ = s.rfind(ch)\n    \n    # If 'ch' is not found (which should not happen), return the modified string\n    if last_occ == -1:\n        return s\n    \n    # Remove the last occurrence of 'ch' by slicing the string again\n    s = s[:last_occ] + s[last_occ+1:]\n    \n    return s\n\n# Test the function with the provided test case\nassert remove_Occ(\"hello\", \"l\") == \"heo\"\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/64": [{"task_id": "Mbpp/64", "solution": "\"\"\"\nWrite a function to sort a list of tuples using the second value of each tuple.\nassert subject_marks([('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)])==[('Social sciences', 82), ('English', 88), ('Science', 90), ('Maths', 97)]\n\"\"\"\ndef subject_marks(marks):\n    # Sort the list of tuples based on the second item (marks) in descending order\n    marks.sort(key=lambda x: x[1], reverse=True)\n    return marks\n\n# Test the function with the provided test case\nassert subject_marks([('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)]) == [('Social sciences', 82), ('English', 88), ('Science', 90), ('Maths', 97)]\n", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/63": [{"task_id": "Mbpp/63", "solution": "\"\"\"\nWrite a function to find the maximum difference between available pairs in the given tuple list.\nassert max_difference([(3, 5), (1, 7), (10, 3), (1, 2)]) == 7\n\"\"\"\ndef max_difference(test_list):\n    # Calculate the absolute differences between each pair of elements in the tuples\n    res = [abs(x - y) for x, y in test_list]\n    # Return the maximum value from the list of differences\n    return max(res)\n\n# Test the function with the provided test case\nassert max_difference([(3, 5), (1, 7), (10, 3), (1, 2)]) == 7\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/91": [{"task_id": "Mbpp/91", "solution": "\"\"\"\nWrite a function to check if a string is present as a substring in a given list of string values.\nassert find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"],\"ack\")==True\n\"\"\"\ndef find_substring(list1, s):\n    # Iterate through each element in the list\n    for x in list1:\n        # Check if the substring 's' is found in the current element\n        if s in x:\n            return True\n    # Return False if the substring is not found in any element\n    return False\n\n# Test the function with the provided test case\nassert find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ack\") == True", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/92": [{"task_id": "Mbpp/92", "solution": "\"\"\"\nWrite a function to check whether the given number is undulating or not.\nassert is_undulating(1212121) == True\n\"\"\"\ndef is_undulating(num):\n    # Convert the number to a string to easily access individual digits\n    num_str = str(num)\n    \n    # Check if the length of the number is less than 3 or if it's even\n    if len(num_str) < 3 or len(num_str) % 2 == 0:\n        return False\n    \n    # Extract the first two digits\n    first_two_digits = int(num_str[:2])\n    \n    # Iterate through the number in steps of 2\n    for i in range(2, len(num_str), 2):\n        # If any pair of consecutive digits does not match the first two digits, return False\n        if int(num_str[i:i+2]) != first_two_digits:\n            return False\n    \n    # If all pairs match, return True\n    return True\n\n# Test the function with the provided test case\nassert is_undulating(1212121) == True", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/8": [{"task_id": "Mbpp/8", "solution": "\"\"\"\nWrite a function to find squares of individual elements in a list.\nassert square_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]\n\"\"\"\ndef square_nums(nums):\n    # Use list comprehension to square each element in the list\n    return [i ** 2 for i in nums]\n\n# Test the function with the provided test case\nassert square_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 4, 9, 16, 25, 36, 49, 64, 81, 100]\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/85": [{"task_id": "Mbpp/85", "solution": "\"\"\"\nWrite a function to find the surface area of a sphere.\nassert math.isclose(surfacearea_sphere(10), 1256.6370614359173, rel_tol=0.001)\n\"\"\"\nimport math\n\ndef surfacearea_sphere(radius):\n    # Calculate the surface area using the formula 4 * pi * r^2\n    return 4 * math.pi * radius ** 2\n\n# Test the function with the provided test case\nassert math.isclose(surfacearea_sphere(10), 1256.6370614359173, rel_tol=0.001)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/90": [{"task_id": "Mbpp/90", "solution": "\"\"\"\nWrite a python function to find the length of the longest word.\nassert len_log([\"python\",\"PHP\",\"bigdata\"]) == 7\n\"\"\"\ndef len_log(words):\n    # Initialize the maximum length to zero\n    max_length = 0\n    \n    # Iterate through each word in the list\n    for word in words:\n        # Update the maximum length if the current word's length is greater\n        if len(word) > max_length:\n            max_length = len(word)\n    \n    # Return the maximum length found\n    return max_length\n\n# Test the function with the provided test case\nassert len_log([\"python\", \"PHP\", \"bigdata\"]) == 7\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/105": [{"task_id": "Mbpp/105", "solution": "\"\"\"\nWrite a python function to count true booleans in the given list.\nassert count([True,False,True]) == 2\n\"\"\"\ndef count(lst):\n    # Count the number of True values in the list using a generator expression\n    return sum(1 for x in lst if x)\n\n# Test the function with the provided test case\nassert count([True, False, True]) == 2\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/62": [{"task_id": "Mbpp/62", "solution": "\"\"\"\nWrite a python function to find smallest number in a list.\nassert smallest_num([10, 20, 1, 45, 99]) == 1\n\"\"\"\ndef smallest_num(list):\n    # Initialize the first element as the minimum value\n    min = list[0]\n    \n    # Iterate through each element in the list\n    for x in list:\n        # Update the minimum value if a smaller element is found\n        if x < min:\n            min = x\n    \n    # Return the smallest value found\n    return min\n\n# Test the function with the provided test case\nassert smallest_num([10, 20, 1, 45, 99]) == 1\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/99": [{"task_id": "Mbpp/99", "solution": "\"\"\"\nWrite a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nassert decimal_to_binary(8) == '1000'\n\"\"\"\ndef decimal_to_binary(n):\n    # Convert the decimal number to binary using bin() function\n    # Remove the '0b' prefix from the binary representation\n    return bin(n)[2:]\n\n# Test the function with the provided test case\nassert decimal_to_binary(8) == '1000'\n", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[-5]]}], "Mbpp/71": [{"task_id": "Mbpp/71", "solution": "\"\"\"\nWrite a function to sort a list of elements.\nassert comb_sort([5, 15, 37, 25, 79]) == [5, 15, 25, 37, 79]\n\"\"\"\ndef comb_sort(arr):\n    # Initialize gap size and shrink factor\n    gap = len(arr)\n    shrink_factor = 1.247\n    sorted = False\n\n    # Continue until gap is less than 1 or array is sorted\n    while gap > 1 or sorted:\n        if gap < 1:\n            gap = 1\n        gap = int(gap / shrink_factor)\n\n        # Perform a gapped insertion sort\n        i = 0\n        while i + gap < len(arr):\n            if arr[i] > arr[i + gap]:\n                arr[i], arr[i + gap] = arr[i + gap], arr[i]\n                sorted = False\n            i += 1\n\n    return arr\n\n# Test the function with the provided test case\nassert comb_sort([5, 15, 37, 25, 79]) == [5, 15, 25, 37, 79]\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/59": [{"task_id": "Mbpp/59", "solution": "\"\"\"\nWrite a function to find the nth octagonal number.\nassert is_octagonal(5) == 65\n\"\"\"\ndef is_octagonal(n):\n    # Calculate the nth octagonal number using the formula: n * (3n - 2)\n    return n * (3 * n - 2)\n\n# Test the function with the provided test case\nassert is_octagonal(5) == 65\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/87": [{"task_id": "Mbpp/87", "solution": "\"\"\"\nWrite a function to merge three dictionaries into a single dictionary.\nassert merge_dictionaries_three({ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" }, { \"G\": \"Green\", \"W\": \"White\" },{ \"O\": \"Orange\", \"W\": \"White\", \"B\": \"Black\" })=={'B': 'Black', 'R': 'Red', 'P': 'Pink', 'G': 'Green', 'W': 'White', 'O': 'Orange'}\n\"\"\"\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    # Merge the first two dictionaries\n    merged_dict = {**dict1, **dict2}\n    \n    # Merge the result with the third dictionary\n    merged_dict.update(dict3)\n    \n    return merged_dict\n\n# Test the function with the provided test case\nassert merge_dictionaries_three(\n    {\"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\"},\n    {\"G\": \"Green\", \"W\": \"White\"},\n    {\"O\": \"Orange\", \"W\": \"White\", \"B\": \"Black\"}\n) == {'B': 'Black', 'R': 'Red', 'P': 'Pink', 'G': 'Green', 'W': 'White', 'O': 'Orange'}", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/93": [{"task_id": "Mbpp/93", "solution": "\"\"\"\nWrite a function to calculate the value of 'a' to the power 'b'.\nassert power(3,4) == 81\n\"\"\"\ndef power(a, b):\n    # Base case: if exponent is 0, return 1 (any number to the power of 0 is 1)\n    if b == 0:\n        return 1\n    else:\n        # Recursive call to multiply 'a' by the result of 'power(a, b-1)'\n        return a * power(a, b - 1)\n\n# Test the function with the provided test case\nassert power(3, 4) == 81\n", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/19": [{"task_id": "Mbpp/19", "solution": "\"\"\"\nWrite a function to find whether a given array of integers contains any duplicate element.\nassert test_duplicate(([1,2,3,4,5]))==False\n\"\"\"\ndef test_duplicate(nums):\n    # Convert the list to a set to remove duplicates and compare its length to the original list\n    return len(set(nums)) != len(nums)\n\n# Test the function with the provided test case\nassert test_duplicate([1, 2, 3, 4, 5]) == False", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/74": [{"task_id": "Mbpp/74", "solution": "\"\"\"\nWrite a function to check whether it follows the sequence given in the patterns array.\nassert is_samepatterns([\"red\",\"green\",\"green\"], [\"a\", \"b\", \"b\"])==True\n\"\"\"\ndef is_samepatterns(arr1, arr2):\n    # Check if both arrays have the same length\n    if len(arr1) != len(arr2):\n        return False\n    \n    # Create dictionaries to map elements from arr1 to arr2 and vice versa\n    dict1 = {}\n    dict2 = {}\n    \n    for i in range(len(arr1)):\n        # If the element in arr1 is already in dict1, check if it matches the corresponding element in arr2\n        if arr1[i] in dict1:\n            if dict1[arr1[i]] != arr2[i]:\n                return False\n        else:\n            dict1[arr1[i]] = arr2[i]\n        \n        # If the element in arr2 is already in dict2, check if it matches the corresponding element in arr1\n        if arr2[i] in dict2:\n            if dict2[arr2[i]] != arr1[i]:\n                return False\n        else:\n            dict2[arr2[i]] = arr1[i]\n    \n    # If all checks pass, return True\n    return True\n\n# Test the function with the provided test case\nassert is_samepatterns([\"red\", \"green\", \"green\"], [\"a\", \"b\", \"b\"]) == True", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[["red", "red", "red", "red", "red", "red"], ["a", "b", "c", "a", "b", "c"]]]}], "Mbpp/97": [{"task_id": "Mbpp/97", "solution": "\"\"\"\nWrite a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\nassert frequency_lists([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]])=={1: 1, 2: 3, 3: 1, 4: 1, 5: 2, 6: 1, 7: 1, 8: 1, 9: 1}\n\"\"\"\ndef frequency_lists(lists):\n    # Initialize an empty dictionary to store frequencies\n    freq = {}\n    \n    # Iterate through each sublist in the list of lists\n    for sub_list in lists:\n        # Iterate through each element in the sublist\n        for i in sub_list:\n            # If the element is already in the dictionary, increment its count\n            if i in freq:\n                freq[i] += 1\n            # If the element is not in the dictionary, add it with a count of 1\n            else:\n                freq[i] = 1\n    \n    # Return the dictionary containing frequencies of elements\n    return freq\n\n# Test the function with the provided test case\nassert frequency_lists([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]]) == {1: 1, 2: 3, 3: 1, 4: 1, 5: 2, 6: 1, 7: 1, 8: 1, 9: 1}", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/7": [{"task_id": "Mbpp/7", "solution": "\"\"\"\nWrite a function to find all words which are at least 4 characters long in a string.\nassert set(find_char_long('Please move back to stream')) == set(['Please', 'move', 'back', 'stream'])\n\"\"\"\ndef find_char_long(text):\n    # Split the text into words using space as a delimiter\n    words = text.split(\" \")\n    \n    # Filter out words that have less than 4 characters\n    result = [word for word in words if len(word) >= 4]\n    \n    return result\n\n# Test the function with the provided test case\nassert set(find_char_long('Please move back to stream')) == set(['Please', 'move', 'back', 'stream'])\n", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [["This is a very long string with no words that are at least 4 characters long."]]}], "Mbpp/111": [{"task_id": "Mbpp/111", "solution": "\"\"\"\nWrite a function to find the common elements in given nested lists.\nassert set(common_in_nested_lists([[12, 18, 23, 25, 45], [7, 12, 18, 24, 28], [1, 5, 8, 12, 15, 16, 18]]))==set([18, 12])\n\"\"\"\ndef common_in_nested_lists(nested_list):\n    # Use set intersection to find common elements across all sublists\n    result = set.intersection(*nested_list)\n    return result\n\n# Test the function with the provided test case\nassert set(common_in_nested_lists([[12, 18, 23, 25, 45], [7, 12, 18, 24, 28], [1, 5, 8, 12, 15, 16, 18]])) == set([18, 12])", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/4": [{"task_id": "Mbpp/4", "solution": "\"\"\"\nWrite a function to find the n largest integers from a given list of numbers, returned in descending order.\nassert heap_queue_largest( [25, 35, 22, 85, 14, 65, 75, 22, 58],3)==[85, 75, 65]\n\"\"\"\nimport heapq as hq\n\ndef heap_queue_largest(nums, n):\n    # Use nlargest from heapq to get the n largest elements\n    largest_nums = hq.nlargest(n, nums)\n    return largest_nums\n\n# Test the function with the provided test case\nassert heap_queue_largest([25, 35, 22, 85, 14, 65, 75, 22, 58], 3) == [85, 75, 65]\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/94": [{"task_id": "Mbpp/94", "solution": "\"\"\"\nGiven a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\nassert index_minimum([('Rash', 143), ('Manjeet', 200), ('Varsha', 100)]) == 'Varsha'\n\"\"\"\ndef index_minimum(test_list):\n    # Find the tuple with the minimum second element and return its first element\n    res = min(test_list, key=lambda x: x[1])[0]\n    return res\n\n# Test the function with the provided test case\nassert index_minimum([('Rash', 143), ('Manjeet', 200), ('Varsha', 100)]) == 'Varsha'\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/98": [{"task_id": "Mbpp/98", "solution": "\"\"\"\nWrite a function to multiply all the numbers in a list and divide with the length of the list.\nassert math.isclose(multiply_num((8, 2, 3, -1, 7)), -67.2, rel_tol=0.001)\n\"\"\"\nimport math\n\ndef multiply_num(test_tup):\n    # Initialize result to 1 (since multiplying by 1 has no effect)\n    res = 1\n    \n    # Iterate through each element in the tuple\n    for ele in test_tup:\n        # Multiply the current result by the element\n        res *= ele\n    \n    # Divide the result by the length of the tuple\n    res /= len(test_tup)\n    \n    return res\n\n# Test the function with the provided test case\nassert math.isclose(multiply_num((8, 2, 3, -1, 7)), -67.2, rel_tol=0.001)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/83": [{"task_id": "Mbpp/83", "solution": "\"\"\"\nWrite a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nassert get_Char(\"abc\") == \"f\"\n\"\"\"\ndef get_Char(str):\n    # Initialize result variable\n    res = 0\n    \n    # Iterate through each character in the string\n    for i in range(len(str)):\n        # Add ASCII value of current character to result\n        res += ord(str[i])\n    \n    # Take modulo 26 of the result\n    res %= 26\n    \n    # Convert ASCII value back to character\n    return chr(res + ord('a'))\n\n# Test the function with the provided test case\nassert get_Char(\"abc\") == \"f\"\n", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/17": [{"task_id": "Mbpp/17", "solution": "\"\"\"\nWrite a function that returns the perimeter of a square given its side length as input.\nassert square_perimeter(10)==40\n\"\"\"\ndef square_perimeter(side):\n    # Calculate the perimeter of the square using the formula 4 * side\n    return 4 * side\n\n# Test the function with the provided test case\nassert square_perimeter(10) == 40\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/95": [{"task_id": "Mbpp/95", "solution": "\"\"\"\nWrite a python function to find the length of the smallest list in a list of lists.\nassert Find_Min_Length([[1],[1,2]]) == 1\n\"\"\"\ndef Find_Min_Length(lst):\n    # Use a generator expression to find the minimum length of sublists\n    min_length = min(len(x) for x in lst)\n    return min_length\n\n# Test the function with the provided test case\nassert Find_Min_Length([[1], [1, 2]]) == 1\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/89": [{"task_id": "Mbpp/89", "solution": "\"\"\"\nWrite a function to find the closest smaller number than n.\nassert closest_num(11) == 10\n\"\"\"\ndef closest_num(n):\n    # Subtract 1 from the given number to get the closest smaller number\n    return (n - 1)\n\n# Test the function with the provided test case\nassert closest_num(11) == 10\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/104": [{"task_id": "Mbpp/104", "solution": "\"\"\"\nWrite a function to sort each sublist of strings in a given list of lists.\nassert sort_sublists(([\"green\", \"orange\"], [\"black\", \"white\"], [\"white\", \"black\", \"orange\"]))==[['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]\n\"\"\"\ndef sort_sublists(test_list):\n    # Sort each sublist using list comprehension and sorted() function\n    res = [sorted(sub) for sub in test_list]\n    return res\n\n# Test the function with the provided test case\nassert sort_sublists([[\"green\", \"orange\"], [\"black\", \"white\"], [\"white\", \"black\", \"orange\"]]) == [['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/101": [{"task_id": "Mbpp/101", "solution": "\"\"\"\nWrite a function to find the kth element in the given array using 1-based indexing.\nassert kth_element([12,3,5,7,19], 2) == 3\n\"\"\"\ndef kth_element(arr, k):\n    # Return the k-1 index element from the array (since list indices start at 0)\n    return arr[k - 1]\n\n# Test the function with the provided test case\nassert kth_element([12, 3, 5, 7, 19], 2) == 3\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/58": [{"task_id": "Mbpp/58", "solution": "\"\"\"\nWrite a python function to check whether the given two integers have opposite sign or not.\nassert opposite_Signs(1,-2) == True\n\"\"\"\ndef opposite_Signs(x, y):\n    # Check if the signs of x and y are opposite\n    return (x ^ y) < 0\n\n# Test the function with the provided test case\nassert opposite_Signs(1, -2) == True\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/100": [{"task_id": "Mbpp/100", "solution": "\"\"\"\nWrite a function to find the next smallest palindrome of a specified integer, returned as an integer.\nassert next_smallest_palindrome(99)==101\n\"\"\"\ndef next_smallest_palindrome(num):\n    # Convert the number to a string to easily check for palindromes\n    num_str = str(num)\n    \n    # Loop through numbers starting from one more than the given number\n    for i in range(num + 1, 10**6):  # Limiting to 1 million to avoid infinite loop for large numbers\n        if str(i) == str(i)[::-1]:  # Check if the number is a palindrome\n            return i\n\n# Test the function with the provided test case\nassert next_smallest_palindrome(99) == 101", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/82": [{"task_id": "Mbpp/82", "solution": "\"\"\"\nWrite a function to find the volume of a sphere.\nassert math.isclose(volume_sphere(10), 4188.790204786391, rel_tol=0.001)\n\"\"\"\nimport math\n\ndef volume_sphere(radius):\n    # Calculate the volume of a sphere using the formula (4/3) * pi * r^3\n    return (4 / 3) * math.pi * radius ** 3\n\n# Test the function with the provided test case\nassert math.isclose(volume_sphere(10), 4188.790204786391, rel_tol=0.001)\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/108": [{"task_id": "Mbpp/108", "solution": "\"\"\"\nWrite a function to merge three lists into a single sorted list.\nassert merge_sorted_list([25, 24, 15, 4, 5, 29, 110],[19, 20, 11, 56, 25, 233, 154],[24, 26, 54, 48])==[4, 5, 11, 15, 19, 20, 24, 24, 25, 25, 26, 29, 48, 54, 56, 110, 154, 233]\n\"\"\"\ndef merge_sorted_list(list1, list2, list3):\n    # Concatenate all three lists\n    combined_list = list1 + list2 + list3\n    \n    # Sort the combined list\n    combined_list.sort()\n    \n    return combined_list\n\n# Test the function with the provided test case\nassert merge_sorted_list([25, 24, 15, 4, 5, 29, 110], [19, 20, 11, 56, 25, 233, 154], [24, 26, 54, 48]) == [4, 5, 11, 15, 19, 20, 24, 24, 25, 25, 26, 29, 48, 54, 56, 110, 154, 233]", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/106": [{"task_id": "Mbpp/106", "solution": "\"\"\"\nWrite a function to append the given list to the given tuples.\nassert add_lists([5, 6, 7], (9, 10)) == (9, 10, 5, 6, 7)\n\"\"\"\ndef add_lists(lists, tuple):\n    # Convert the tuple to a list, concatenate it with the given list, and then convert back to a tuple\n    return tuple(list(tuple) + lists)\n\n# Test the function with the provided test case\nassert add_lists([5, 6, 7], (9, 10)) == (9, 10, 5, 6, 7)\n", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/103": [{"task_id": "Mbpp/103", "solution": "\"\"\"\nWrite a function to find the Eulerian number a(n, m).\nassert eulerian_num(3, 1) == 4\n\"\"\"\ndef eulerian_num(n, m):\n    # Base case: If n equals m or n equals 0, return 1\n    if (n == m) or (n == 0):\n        return 1\n    \n    # Base case: If m is greater than or equal to n, return 0\n    if m >= n:\n        return 0\n    \n    # Recursive relation for Eulerian numbers\n    return ((m + 1) * eulerian_num(n - 1, m - 1)) + (n - m) * eulerian_num(n - 1, m)\n\n# Test the function with the provided test case\nassert eulerian_num(3, 1) == 4\n", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/57": [{"task_id": "Mbpp/57", "solution": "\"\"\"\nWrite a python function to find the largest number that can be formed with the given list of digits.\nassert find_Max_Num([1,2,3]) == 321\n\"\"\"\ndef find_Max_Num(digits):\n    # Sort the digits in descending order\n    digits.sort(reverse=True)\n    \n    # Initialize an empty string to store the result\n    res = \"\"\n    \n    # Iterate through each digit and append it to the result string\n    for i in range(len(digits)):\n        res += str(digits[i])\n    \n    # Convert the result string back to integer and return\n    return int(res)\n\n# Test the function with the provided test case\nassert find_Max_Num([1, 2, 3]) == 321\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/109": [{"task_id": "Mbpp/109", "solution": "\"\"\"\nWrite a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\nassert odd_Equivalent(\"011001\",6) == 3\n\"\"\"\ndef odd_Equivalent(s, n):\n    # Check if the length of the string is even or odd\n    if len(s) % 2 == 0:\n        # If even, all rotations will have the same number of 1s\n        return (n + 1) // 2\n    else:\n        # If odd, count the number of 1s in the original string\n        ones = s.count('1')\n        # Calculate the number of rotations with an odd number of 1s\n        return ((ones * (n + 1)) + 1) // 2\n\n# Test the function with the provided test case\nassert odd_Equivalent(\"011001\", 6) == 3", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [["11011", 5]], "plus_fail_tests": [["0000", 3]]}], "Mbpp/102": [{"task_id": "Mbpp/102", "solution": "\"\"\"\nWrite a function to convert a snake case string to camel case string.\nassert snake_to_camel('python_program')=='PythonProgram'\n\"\"\"\ndef snake_to_camel(snake_str):\n    # Split the string by underscores and capitalize each segment\n    return ''.join(word.capitalize() or '_' for word in snake_str.split('_'))\n\n# Test the function with the provided test case\nassert snake_to_camel('python_program') == 'PythonProgram'\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/88": [{"task_id": "Mbpp/88", "solution": "\"\"\"\nWrite a function to get the frequency of all the elements in a list, returned as a dictionary.\nassert freq_count([10,10,10,10,20,20,20,20,40,40,50,50,30])==({10: 4, 20: 4, 40: 2, 50: 2, 30: 1})\n\"\"\"\ndef freq_count(nums):\n    # Initialize an empty dictionary to store frequencies\n    freq = {}\n    \n    # Iterate over each number in the list\n    for num in nums:\n        # If the number is already in the dictionary, increment its count\n        if num in freq:\n            freq[num] += 1\n        # Otherwise, add the number to the dictionary with a count of 1\n        else:\n            freq[num] = 1\n    \n    # Return the dictionary containing element frequencies\n    return freq\n\n# Test the function with the provided test case\nassert freq_count([10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30]) == {10: 4, 20: 4, 40: 2, 50: 2, 30: 1}\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/9": [{"task_id": "Mbpp/9", "solution": "\"\"\"\nWrite a python function to find the minimum number of rotations (greater than 0) required to get the same string.\nassert find_Rotations(\"aaaa\") == 1\n\"\"\"\ndef find_Rotations(str):\n    # Concatenate the string with itself to handle rotations\n    str = str + str\n    \n    # Initialize the result as the length of the original string\n    res = len(str)\n    \n    # Iterate through the string to check for repeating patterns\n    for i in range(1, len(str)):\n        if str[i] == str[0]:\n            j = i\n            while j < len(str) and str[j] == str[j - i]:\n                j += 1\n            \n            # If a full cycle is found, update the result\n            if j == len(str):\n                res = min(res, i)\n    \n    return res\n\n# Test the function with the provided test case\nassert find_Rotations(\"aaaa\") == 1", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/6": [{"task_id": "Mbpp/6", "solution": "\"\"\"\nWrite a python function to check whether the two numbers differ at one bit position only or not.\nassert differ_At_One_Bit_Pos(13,9) == True\n\"\"\"\ndef differ_At_One_Bit_Pos(x, y):\n    # XOR the two numbers to find differing bits\n    xor = x ^ y\n    \n    # Count the number of set bits (differing bits)\n    count = 0\n    while xor:\n        count += xor & 1\n        xor >>= 1\n    \n    # Return True if there's exactly one differing bit, False otherwise\n    return count == 1\n\n# Test the function with the provided test case\nassert differ_At_One_Bit_Pos(13, 9) == True", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[-10, 10]]}], "Mbpp/117": [{"task_id": "Mbpp/117", "solution": "\"\"\"\nWrite a function to convert all possible convertible elements in a list of lists to floats.\nassert list_to_float( [(\"3\", \"4\"), (\"1\", \"26.45\"), (\"7.32\", \"8\"), (\"4\", \"8\")] ) == [(3.0, 4.0), (1.0, 26.45), (7.32, 8.0), (4.0, 8.0)]\n\"\"\"\ndef list_to_float(test_list):\n    # Convert each element in the sublists to float if it's convertible\n    res = [[float(ele) for ele in sub] for sub in test_list]\n    return res\n\n# Test the function with the provided test case\nassert list_to_float([(\"3\", \"4\"), (\"1\", \"26.45\"), (\"7.32\", \"8\"), (\"4\", \"8\")]) == [(3.0, 4.0), (1.0, 26.45), (7.32, 8.0), (4.0, 8.0)]", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/119": [{"task_id": "Mbpp/119", "solution": "\"\"\"\nWrite a python function to find the element that appears only once in a sorted array.\nassert search([1,1,2,2,3]) == 3\n\"\"\"\ndef search(arr):\n    # Iterate through the array with step size of 2\n    for i in range(0, len(arr) - 1, 2):\n        # Check if the current element is not equal to the next one\n        if arr[i] != arr[i + 1]:\n            return arr[i]\n    # If no unique element is found, return the last element\n    return arr[-1]\n\n# Test the function with the provided test case\nassert search([1, 1, 2, 2, 3]) == 3\n", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/84": [{"task_id": "Mbpp/84", "solution": "\"\"\"\nWrite a function to find the nth number in the newman conway sequence.\nassert sequence(10) == 6\n\"\"\"\ndef sequence(n):\n    # Base cases for the Newman-Conway Sequence\n    if n == 1 or n == 2:\n        return 1\n    \n    # Initialize an array to store computed values of the sequence\n    arr = [0] * (n + 1)\n    \n    # Set initial values\n    arr[1], arr[2] = 1, 1\n    \n    # Compute the sequence iteratively\n    for i in range(3, n + 1):\n        arr[i] = arr[arr[i - 1]] + arr[i - arr[i - 1]]\n    \n    # Return the nth element of the sequence\n    return arr[n]\n\n# Test the function with the provided test case\nassert sequence(10) == 6", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[1000000]]}], "Mbpp/125": [{"task_id": "Mbpp/125", "solution": "\"\"\"\nWrite a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nassert find_length(\"11000010001\") == 6\n\"\"\"\ndef find_length(s):\n    # Initialize variables to store the current sum and maximum sum\n    curr_sum = max_sum = 0\n    \n    # Iterate through each character in the string\n    for i in range(len(s)):\n        # If '1' is encountered, add 1 to curr_sum; if '0' is encountered, subtract 1 from curr_sum\n        curr_sum += (1 if s[i] == '1' else -1)\n        \n        # Reset curr_sum to 0 if it becomes negative\n        if curr_sum < 0:\n            curr_sum = 0\n        \n        # Update max_sum if curr_sum is greater than max_sum\n        max_sum = max(max_sum, curr_sum)\n    \n    return max_sum\n\n# Test the function with the provided test case\nassert find_length(\"11000010001\") == 6", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/118": [{"task_id": "Mbpp/118", "solution": "\"\"\"\nWrite a function to convert a string to a list of strings split on the space character.\nassert string_to_list(\"python programming\")==['python','programming']\n\"\"\"\ndef string_to_list(string):\n    # Split the input string into a list using space as the delimiter\n    return string.split(' ')\n\n# Test the function with the provided test case\nassert string_to_list(\"python programming\") == ['python', 'programming']\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/130": [{"task_id": "Mbpp/130", "solution": "\"\"\"\nWrite a function to find the item with maximum frequency in a given list.\nassert max_occurrences([2,3,8,4,7,9,8,2,6,5,1,6,1,2,3,2,4,6,9,1,2])==2\n\"\"\"\ndef max_occurrences(nums):\n    # Initialize variables to store the maximum frequency and the corresponding element\n    max_frequency = 0\n    max_element = None\n    \n    # Create a dictionary to count occurrences of each element\n    freq_dict = {}\n    \n    # Iterate through the list to populate the dictionary with frequencies\n    for num in nums:\n        if num in freq_dict:\n            freq_dict[num] += 1\n        else:\n            freq_dict[num] = 1\n    \n    # Iterate through the dictionary to find the element with the maximum frequency\n    for key, value in freq_dict.items():\n        if value > max_frequency:\n            max_frequency = value\n            max_element = key\n    \n    return max_element\n\n# Test the function with the provided test case\nassert max_occurrences([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/124": [{"task_id": "Mbpp/124", "solution": "\"\"\"\nWrite a function to get the angle of a complex number.\nassert math.isclose(angle_complex(0,1j), 1.5707963267948966, rel_tol=0.001)\n\"\"\"\nimport cmath\n\ndef angle_complex(x, y):\n    # Create a complex number from x and y\n    z = complex(x, y)\n    \n    # Calculate the angle of the complex number using cmath.phase()\n    angle = cmath.phase(z)\n    \n    return angle\n\n# Test the function with the provided test case\nassert math.isclose(angle_complex(0, 1j), 1.5707963267948966, rel_tol=0.001)", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/135": [{"task_id": "Mbpp/135", "solution": "\"\"\"\nWrite a function to find the nth hexagonal number.\nassert hexagonal_num(10) == 190\n\"\"\"\ndef hexagonal_num(n):\n    # Calculate the nth hexagonal number using the formula: n * (2n - 1)\n    return int(n * (2 * n - 1))\n\n# Test the function with the provided test case\nassert hexagonal_num(10) == 190\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/113": [{"task_id": "Mbpp/113", "solution": "\"\"\"\nWrite a function to check if a string represents an integer or not.\nassert check_integer(\"python\")==False\n\"\"\"\ndef check_integer(s):\n    # Check if the string is empty\n    if s == \"\":\n        return False\n    \n    # Initialize a flag for negative numbers\n    flag = 0\n    \n    # If the first character is '-', set flag to 1 and remove the '-' sign\n    if s[0] == '-':\n        flag = 1\n        s = s[1:]\n    \n    # Iterate through each character in the string\n    for i in range(len(s)):\n        # Check if the current character is not a digit\n        if s[i] < '0' or s[i] > '9':\n            return False\n    \n    # Return True if no non-digit characters were found\n    return True\n\n# Test the function with the provided test case\nassert check_integer(\"python\") == False\n", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/139": [{"task_id": "Mbpp/139", "solution": "\"\"\"\nWrite a function to find the circumference of a circle.\nassert math.isclose(circle_circumference(10), 62.830000000000005, rel_tol=0.001)\n\"\"\"\nimport math\n\ndef circle_circumference(radius):\n    # Calculate the circumference using the formula C = 2 * pi * r\n    return 2 * math.pi * radius\n\n# Test the function with the provided test case\nassert math.isclose(circle_circumference(10), 62.830000000000005, rel_tol=0.001)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/132": [{"task_id": "Mbpp/132", "solution": "\"\"\"\nWrite a function to convert a tuple to a string.\nassert tup_string(('e', 'x', 'e', 'r', 'c', 'i', 's', 'e', 's'))==(\"exercises\")\n\"\"\"\ndef tup_string(tup):\n    # Joining tuple elements into a string using join() method\n    result = ''.join(tup)\n    return result\n\n# Test the function with the provided test case\nassert tup_string(('e', 'x', 'e', 'r', 'c', 'i', 's', 'e', 's')) == \"exercises\"\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/142": [{"task_id": "Mbpp/142", "solution": "\"\"\"\nWrite a function to count number items that are identical in the same position of three given lists.\nassert count_samepair([1,2,3,4,5,6,7,8],[2,2,3,1,2,6,7,9],[2,1,3,1,2,6,7,9])==3\n\"\"\"\ndef count_samepair(nums1, nums2, nums3):\n    # Use zip to iterate over all three lists simultaneously and count elements that match at each index\n    return sum(x == y == z for x, y, z in zip(nums1, nums2, nums3))\n\n# Test the function with the provided test case\nassert count_samepair([1, 2, 3, 4, 5, 6, 7, 8], [2, 2, 3, 1, 2, 6, 7, 9], [2, 1, 3, 1, 2, 6, 7, 9]) == 3", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/129": [{"task_id": "Mbpp/129", "solution": "\"\"\"\nWrite a function to calculate whether the matrix is a magic square.\nassert magic_square_test([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]])==True\n\"\"\"\ndef magic_square_test(matrix):\n    # Check if the matrix has 4 rows and 4 columns\n    if len(matrix) != 4 or any(len(row) != 4 for row in matrix):\n        return False\n    \n    # Calculate the sum of the first row to use as a reference\n    ref = sum(matrix[0])\n    \n    # Check sums of all rows\n    for i in range(1, 4):\n        if sum(matrix[i]) != ref:\n            return False\n    \n    # Check sums of all columns\n    for j in range(4):\n        if sum(matrix[i][j] for i in range(4)) != ref:\n            return False\n    \n    # Check sum of the main diagonal\n    if sum(matrix[i][i] for i in range(4)) != ref:\n        return False\n    \n    # Check sum of the secondary diagonal\n    if sum(matrix[i][3-i] for i in range(4)) != ref:\n        return False\n    \n    # If all checks pass, it's a magic square\n    return True\n\n# Test the function with the provided test case\nassert magic_square_test([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]]) == True", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[[2, 7, 6], [9, 5, 1], [4, 3, 8]]]], "plus_fail_tests": [[[[7, 7], [7, 7]]]]}], "Mbpp/127": [{"task_id": "Mbpp/127", "solution": "\"\"\"\nWrite a function to multiply two integers.\nassert multiply_int(10,20)==200\n\"\"\"\ndef multiply_int(x, y):\n    # Initialize the result variable to zero\n    res = 0\n    \n    # If x is negative, make it positive and negate the result at the end\n    if x < 0:\n        x = -x\n        y = -y\n    \n    # Loop through each bit of y\n    while y > 0:\n        # If the least significant bit of y is set (i.e., odd), add x to the result\n        if y & 1:\n            res += x\n        \n        # Double x for the next bit\n        x <<= 1\n        # Shift right y to check the next bit\n        y >>= 1\n    \n    return res\n\n# Test the function with the provided test case\nassert multiply_int(10, 20) == 200", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[-999999999999999999, 999999999999999999]]}], "Mbpp/137": [{"task_id": "Mbpp/137", "solution": "\"\"\"\nWrite a function to find the ratio of zeroes to non-zeroes in an array of integers.\nassert math.isclose(zero_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]), 0.181818, rel_tol=0.001)\n\"\"\"\n# Importing the math module for mathematical operations\nimport math\n\ndef zero_count(arr):\n    # Initialize counters for zeros and non-zeros\n    count_zero = 0\n    count_nonzero = 0\n    \n    # Iterate through each element in the array\n    for i in range(len(arr)):\n        # Check if the current element is zero\n        if arr[i] == 0:\n            count_zero += 1\n        else:\n            count_nonzero += 1\n    \n    # Calculate the total number of elements in the array\n    total_elements = len(arr)\n    \n    # Calculate the ratio of zeros to non-zeros\n    ratio = count_zero / total_elements\n    \n    return ratio\n\n# Test the function with the provided test case\nassert math.isclose(zero_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]), 0.181818, rel_tol=0.001)", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/115": [{"task_id": "Mbpp/115", "solution": "\"\"\"\nWrite a function to check whether all dictionaries in a list are empty or not.\nassert empty_dit([{},{},{}])==True\n\"\"\"\ndef empty_dit(dict_list):\n    # Check if all dictionaries in the list are empty using a generator expression\n    return all(not d for d in dict_list)\n\n# Test the function with the provided test case\nassert empty_dit([{},{},{}]) == True", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[[1, 2], [], []]]], "plus_fail_tests": [[[[], [], [], ["", "e", "EnIODji", "gA", "not", "ML", "a"], [], [], [], [], [], [], [], []]]]}], "Mbpp/166": [{"task_id": "Mbpp/166", "solution": "\"\"\"\nWrite a function that counts the number of pairs of integers in a list that xor to an even number.\nassert find_even_pair([5, 4, 7, 2, 1]) == 4\n\"\"\"\ndef find_even_pair(arr):\n    # Initialize count of pairs\n    cnt = 0\n    \n    # Iterate over each pair of elements in the array\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            # Check if the XOR of the current pair is even\n            if (arr[i] ^ arr[j]) % 2 == 0:\n                # Increment the count if it is even\n                cnt += 1\n                \n    # Return the total count of pairs with an even XOR value\n    return cnt\n\n# Test the function with the provided test case\nassert find_even_pair([5, 4, 7, 2, 1]) == 4", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/131": [{"task_id": "Mbpp/131", "solution": "\"\"\"\nWrite a python function to reverse only the vowels of a given string (where y is not a vowel).\nassert reverse_vowels(\"Python\") == \"Python\"\n\"\"\"\ndef reverse_vowels(s):\n    # Convert the string into a list for easy manipulation\n    s = list(s)\n    \n    # Initialize two pointers, one at the start and one at the end of the string\n    i, j = 0, len(s) - 1\n    \n    # Define a set of vowels for quick lookup\n    vowels = 'aeiouAEIOU'\n    \n    # Loop until the two pointers meet or cross each other\n    while i < j:\n        # Move the left pointer if it's not pointing at a vowel\n        if s[i] not in vowels:\n            i += 1\n        # Move the right pointer if it's not pointing at a vowel\n        elif s[j] not in vowels:\n            j -= 1\n        else:\n            # Swap the vowels found by the two pointers\n            s[i], s[j] = s[j], s[i]\n            # Move both pointers inward\n            i += 1\n            j -= 1\n    \n    # Join the list back into a string and return\n    return ''.join(s)\n\n# Test the function with the provided test case\nassert reverse_vowels(\"Python\") == \"Python\"", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/232": [{"task_id": "Mbpp/232", "solution": "\"\"\"\nWrite a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\nassert set(larg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],2))==set([100,90])\n\"\"\"\ndef larg_nnum(nums, n):\n    # Sort the list in descending order and return the first n elements\n    return sorted(nums, reverse=True)[:n]\n\n# Test the function with the provided test case\nassert set(larg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100], 2)) == set([100, 90])\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/226": [{"task_id": "Mbpp/226", "solution": "\"\"\"\nWrite a python function to remove the characters which have odd index values of a given string.\nassert odd_values_string('abcdef') == 'ace'\n\"\"\"\ndef odd_values_string(str1):\n    # Initialize an empty string to store the result\n    result = \"\"\n    \n    # Iterate over the string using enumerate to get both index and character\n    for index, char in enumerate(str1):\n        # Check if the index is even (since index starts from 0)\n        if index % 2 == 0:\n            # Append the character at even index to the result string\n            result += char\n    \n    # Return the resulting string\n    return result\n\n# Test the function with the provided test case\nassert odd_values_string('abcdef') == 'ace'\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/138": [{"task_id": "Mbpp/138", "solution": "\"\"\"\nWrite a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nassert is_Sum_Of_Powers_Of_Two(10) == True\n\"\"\"\ndef is_Sum_Of_Powers_Of_Two(n):\n    # Loop until n becomes less than or equal to 1\n    while (n > 1):\n        # If n is odd and greater than 1, it cannot be expressed as a sum of powers of 2\n        if (n % 2 != 0):\n            return False\n        # Right shift n by 1 bit to divide it by 2\n        n = n >> 1\n    \n    # If n is reduced to 1, it can be expressed as a sum of powers of 2\n    return True\n\n# Test the function with the provided test case\nassert is_Sum_Of_Powers_Of_Two(10) == True", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/172": [{"task_id": "Mbpp/172", "solution": "\"\"\"\nWrite a function to count the number of occurence of the string 'std' in a given string.\nassert count_occurance(\"letstdlenstdporstd\") == 3\n\"\"\"\ndef count_occurance(s):\n    # Initialize a counter for occurrences of 'std'\n    count = 0\n    \n    # Iterate through the string\n    for i in range(len(s) - 2):  # Subtract 2 to avoid index out of range error\n        # Check if the substring starting at position i matches 'std'\n        if s[i:i+3] == \"std\":\n            count += 1  # Increment the counter if match found\n    \n    return count\n\n# Test the function with the provided test case\nassert count_occurance(\"letstdlenstdporstd\") == 3", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/222": [{"task_id": "Mbpp/222", "solution": "\"\"\"\nWrite a function to check if all the elements in tuple have same data type or not.\nassert check_type((5, 6, 7, 3, 5, 6) ) == True\n\"\"\"\ndef check_type(test_tup):\n    # Check if all elements in the tuple have the same data type\n    res = all(isinstance(ele, type(test_tup[0])) for ele in test_tup)\n    return res\n\n# Test the function with the provided test case\nassert check_type((5, 6, 7, 3, 5, 6)) == True", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/141": [{"task_id": "Mbpp/141", "solution": "\"\"\"\nWrite a function to sort a list of elements.\nassert pancake_sort([15, 79, 25, 38, 69]) == [15, 25, 38, 69, 79]\n\"\"\"\ndef flip(arr, i):\n    # Reverse elements from 0 to i\n    arr[:i+1] = reversed(arr[:i+1])\n\ndef pancake_sort(arr):\n    n = len(arr)\n    for curr_size in range(n, 1, -1):\n        # Find the index of the maximum element in arr[0..curr_size-1]\n        max_index = arr.index(max(arr[:curr_size]))\n        \n        # Move the maximum number to end of current array if it's not already at the end\n        if max_index != curr_size - 1:\n            # Bring the maximum number to beginning (by reversing current array)\n            flip(arr, max_index)\n            \n            # Now move the maximum number to end by reversing current array\n            flip(arr, curr_size - 1)\n\n# Test the function with the provided test case\nassert pancake_sort([15, 79, 25, 38, 69]) == [15, 25, 38, 69, 79]", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/171": [{"task_id": "Mbpp/171", "solution": "\"\"\"\nWrite a function to find the perimeter of a regular pentagon from the length of its sides.\nassert perimeter_pentagon(5) == 25\n\"\"\"\ndef perimeter_pentagon(side):\n    # Calculate the perimeter of a regular pentagon by multiplying the side length by 5\n    return 5 * side\n\n# Test the function with the provided test case\nassert perimeter_pentagon(5) == 25\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/133": [{"task_id": "Mbpp/133", "solution": "\"\"\"\nWrite a function to calculate the sum of the negative numbers of a given list of numbers.\nassert sum_negativenum([2, 4, -6, -9, 11, -12, 14, -5, 17])==-32\n\"\"\"\ndef sum_negativenum(nums):\n    # Initialize sum to zero\n    total = 0\n    \n    # Iterate through each number in the list\n    for num in nums:\n        # Check if the number is negative\n        if num < 0:\n            # Add the negative number to the total sum\n            total += num\n    \n    # Return the total sum of negative numbers\n    return total\n\n# Test the function with the provided test case\nassert sum_negativenum([2, 4, -6, -9, 11, -12, 14, -5, 17]) == -32\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/233": [{"task_id": "Mbpp/233", "solution": "\"\"\"\nWrite a function to find the lateral surface area of a cylinder.\nassert math.isclose(lateralsuface_cylinder(10,5), 314.15000000000003, rel_tol=0.001)\n\"\"\"\nimport math\n\ndef lateralsuface_cylinder(radius, height):\n    # Calculate the lateral surface area of the cylinder using the formula 2 * pi * radius * height\n    return (2 * math.pi * radius * height)\n\n# Test the function with the provided test case\nassert math.isclose(lateralsuface_cylinder(10, 5), 314.15000000000003, rel_tol=0.001)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/116": [{"task_id": "Mbpp/116", "solution": "\"\"\"\nWrite a function to convert a given tuple of positive integers into a single integer.\nassert tuple_to_int((1,2,3))==123\n\"\"\"\ndef tuple_to_int(test_tup):\n    # Convert each element of the tuple to a string and concatenate them\n    res = int(''.join(str(ele) for ele in test_tup))\n    return res\n\n# Test the function with the provided test case\nassert tuple_to_int((1, 2, 3)) == 123\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/143": [{"task_id": "Mbpp/143", "solution": "\"\"\"\nWrite a function to find number of lists present in the given tuple.\nassert find_lists(([1, 2, 3, 4], [5, 6, 7, 8])) == 2\n\"\"\"\ndef find_lists(test_tup):\n    # Count the number of list elements in the tuple\n    res = sum(isinstance(ele, list) for ele in test_tup)\n    return res\n\n# Test the function with the provided test case\nassert find_lists(([1, 2, 3, 4], [5, 6, 7, 8])) == 2", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/160": [{"task_id": "Mbpp/160", "solution": "\"\"\"\nWrite a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\nassert find_solution(2, 3, 7) == (2, 1)\n\"\"\"\ndef find_solution(a, b, n):\n    # Iterate over possible values of x from 0 to n/a\n    for x in range(n // a + 1):\n        # Calculate the corresponding value of y\n        y = (n - a * x) / b\n        # Check if y is an integer\n        if y.is_integer():\n            # Return the tuple (x, int(y)) if a valid solution is found\n            return (x, int(y))\n    # Return None if no solution exists\n    return None\n\n# Test the function with the provided test case\nassert find_solution(2, 3, 7) == (2, 1)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/128": [{"task_id": "Mbpp/128", "solution": "\"\"\"\nWrite a function to find words that are longer than n characters from a given list of words.\nassert long_words(3,\"python is a programming language\")==['python','programming','language']\n\"\"\"\ndef long_words(n, str):\n    # Split the string into words using space as a delimiter\n    words = str.split(\" \")\n    \n    # Use list comprehension to filter out words longer than 'n' characters\n    result = [word for word in words if len(word) > n]\n    \n    return result\n\n# Test the function with the provided test case\nassert long_words(3, \"python is a programming language\") == ['python', 'programming', 'language']\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/140": [{"task_id": "Mbpp/140", "solution": "\"\"\"\nWrite a function to flatten the list of lists into a single set of numbers.\nassert set(extract_singly([(3, 4, 5), (4, 5, 7), (1, 4)])) == set([3, 4, 5, 7, 1])\n\"\"\"\ndef extract_singly(test_list):\n    # Flatten the list of lists using list comprehension\n    res = [ele for sub in test_list for ele in sub]\n    return res\n\n# Test the function with the provided test case\nassert set(extract_singly([(3, 4, 5), (4, 5, 7), (1, 4)])) == set([3, 4, 5, 7, 1])\n", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/170": [{"task_id": "Mbpp/170", "solution": "\"\"\"\nWrite a function to find the sum of numbers in a list within a range specified by two indices.\nassert sum_range_list([2,1,5,6,8,3,4,9,10,11,8,12], 8, 10) == 29\n\"\"\"\ndef sum_range_list(list1, start, end):\n    # Initialize the sum variable to zero\n    total_sum = 0\n    \n    # Iterate over the specified range (start to end inclusive)\n    for i in range(start, end + 1):\n        # Add each element in the range to the total sum\n        total_sum += list1[i]\n    \n    # Return the computed sum\n    return total_sum\n\n# Test the function with the provided test case\nassert sum_range_list([2, 1, 5, 6, 8, 3, 4, 9, 10, 11, 8, 12], 8, 10) == 29", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/235": [{"task_id": "Mbpp/235", "solution": "\"\"\"\nWrite a python function to set all even bits of a given number.\nassert even_bit_set_number(10) == 10\n\"\"\"\ndef even_bit_set_number(n):\n    # Initialize mask to 0\n    mask = 0\n    \n    # Iterate through each bit position\n    for i in range(32): \n        # Check if the current bit position is even\n        if (i % 2 == 0):\n            # Set the bit at the current position in the mask\n            mask |= (1 << i)\n    \n    # Use bitwise OR to set even bits of n\n    return n | mask\n\n# Test the function with the provided test case\nassert even_bit_set_number(10) == 10", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/120": [{"task_id": "Mbpp/120", "solution": "\"\"\"\nWrite a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\nassert max_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)] )==36\n\"\"\"\ndef max_product_tuple(test_list):\n    # Calculate the maximum product of pairs using a generator expression\n    res = max(a * b for a, b in test_list)\n    return res\n\n# Test the function with the provided test case\nassert max_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)]) == 36\n", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/161": [{"task_id": "Mbpp/161", "solution": "\"\"\"\nWrite a function to remove all elements from a given list present in another list.\nassert remove_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [2, 4, 6, 8]) == [1, 3, 5, 7, 9, 10]\n\"\"\"\ndef remove_elements(list1, list2):\n    # Use list comprehension to filter out elements of list1 that are also in list2\n    result = [i for i in list1 if i not in list2]\n    return result\n\n# Test the function with the provided test case\nassert remove_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [2, 4, 6, 8]) == [1, 3, 5, 7, 9, 10]\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/239": [{"task_id": "Mbpp/239", "solution": "\"\"\"\nWrite a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\nassert get_total_number_of_sequences(10, 4) == 4\n\"\"\"\ndef get_total_number_of_sequences(m, n):\n    # Initialize a 2D list for memoization\n    dp = [[-1] * (n + 1) for _ in range(m + 1)]\n    \n    def helper(x, y):\n        # Base case: if sequence length is 1, return x\n        if y == 1:\n            return x\n        # If already computed, return from memoization table\n        if dp[x][y] != -1:\n            return dp[x][y]\n        \n        total_sequences = 0\n        \n        # Iterate through all possible values for the next element\n        for i in range(x // 2, x + 1):\n            total_sequences += helper(i, y - 1)\n        \n        # Store the result in memoization table\n        dp[x][y] = total_sequences\n        return dp[x][y]\n\n    # Sum up all possible sequences starting from each value from 1 to m\n    return sum(helper(i, n) for i in range(1, m + 1))\n\n# Test the function with the provided test case\nassert get_total_number_of_sequences(10, 4) == 4", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/145": [{"task_id": "Mbpp/145", "solution": "\"\"\"\nWrite a python function to find the maximum difference between any two elements in a given array.\nassert max_Abs_Diff((2,1,5,3)) == 4\n\"\"\"\ndef max_Abs_Diff(arr):\n    # Initialize minimum and maximum element as first element of array\n    min_element = arr[0]\n    max_element = arr[0]\n    \n    # Iterate through the array to find the minimum and maximum elements\n    for i in range(1, len(arr)):\n        if arr[i] < min_element:\n            min_element = arr[i]\n        elif arr[i] > max_element:\n            max_element = arr[i]\n    \n    # Return the absolute difference between the maximum and minimum elements\n    return abs(max_element - min_element)\n\n# Test the function with the provided test case\nassert max_Abs_Diff((2, 1, 5, 3)) == 4", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/244": [{"task_id": "Mbpp/244", "solution": "\"\"\"\nWrite a python function to find the next perfect square greater than a given number.\nassert next_Perfect_Square(35) == 36\n\"\"\"\ndef next_Perfect_Square(n):\n    # Calculate the square root of n and round it up to the nearest integer\n    sqrt_n = int(n**0.5) + 1\n    \n    # Return the square of the calculated square root\n    return sqrt_n * sqrt_n\n\n# Test the function with the provided test case\nassert next_Perfect_Square(35) == 36\n", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/165": [{"task_id": "Mbpp/165", "solution": "\"\"\"\nWrite a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\nassert count_char_position(\"xbcefg\") == 2\n\"\"\"\ndef count_char_position(s):\n    # Initialize counter for matching positions\n    count = 0\n    \n    # Iterate over each character in the string\n    for i in range(len(s)):\n        # Check if the character's position matches its alphabetical position\n        if s[i] == chr(i + ord('a')):\n            count += 1\n            \n    return count\n\n# Test the function with the provided test case\nassert count_char_position(\"xbcefg\") == 2", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [["ABcED"]], "plus_fail_tests": [["abcDEF"]]}], "Mbpp/249": [{"task_id": "Mbpp/249", "solution": "\"\"\"\nWrite a function to find the intersection of two arrays.\nassert intersection_array([1, 2, 3, 5, 7, 8, 9, 10],[1, 2, 4, 8, 9])==[1, 2, 8, 9]\n\"\"\"\ndef intersection_array(arr1, arr2):\n    # Use set intersection to find common elements between arr1 and arr2\n    return list(set(arr1) & set(arr2))\n\n# Test the function with the provided test case\nassert intersection_array([1, 2, 3, 5, 7, 8, 9, 10], [1, 2, 4, 8, 9]) == [1, 2, 8, 9]", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/227": [{"task_id": "Mbpp/227", "solution": "\"\"\"\nWrite a function to find minimum of three numbers.\nassert min_of_three(10,20,0)==0\n\"\"\"\ndef min_of_three(x, y, z):\n    # Use the built-in min function to find the minimum of the three numbers\n    return min(x, y, z)\n\n# Test the function with the provided test case\nassert min_of_three(10, 20, 0) == 0\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/167": [{"task_id": "Mbpp/167", "solution": "\"\"\"\nWrite a python function to find the smallest power of 2 greater than or equal to n.\nassert next_power_of_2(0) == 1\n\"\"\"\ndef next_power_of_2(n):\n    # If n is less than or equal to 1, return 1 as it's the smallest power of 2\n    if (n <= 1):\n        return 1\n    \n    # Calculate the position of the most significant bit using log base 2\n    p = int(math.log(n - 1, 2))\n    \n    # Return the power of 2 raised to the calculated position plus one\n    return math.pow(2, p + 1)\n\n# Test the function with the provided test case\nassert next_power_of_2(0) == 1", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[5]], "plus_fail_tests": [[2]]}], "Mbpp/168": [{"task_id": "Mbpp/168", "solution": "\"\"\"\nWrite a function to count the number of occurrences of a number in a given list.\nassert frequency([1,2,3], 4) == 0\n\"\"\"\ndef frequency(arr, x):\n    # Initialize a counter variable to zero\n    count = 0\n    \n    # Iterate through each element in the array\n    for i in arr:\n        # If the current element matches the target value, increment the counter\n        if i == x:\n            count += 1\n            \n    # Return the total count of occurrences\n    return count\n\n# Test the function with the provided test case\nassert frequency([1, 2, 3], 4) == 0\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/224": [{"task_id": "Mbpp/224", "solution": "\"\"\"\nWrite a python function to count the number of set bits (binary digits with value 1) in a given number.\nassert count_Set_Bits(2) == 1\n\"\"\"\ndef count_Set_Bits(n):\n    # Initialize count to 0\n    count = 0\n    \n    # Loop until n becomes 0\n    while n > 0:\n        # Increment count if the last bit is 1\n        count += n & 1\n        # Right shift n by 1 to check the next bit\n        n >>= 1\n    \n    return count\n\n# Test the function with the provided test case\nassert count_Set_Bits(2) == 1", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/237": [{"task_id": "Mbpp/237", "solution": "\"\"\"\nWrite a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\nassert check_occurences([(3, 1), (1, 3), (2, 5), (5, 2), (6, 3)] ) == {(1, 3): 2, (2, 5): 2, (3, 6): 1}\n\"\"\"\ndef check_occurences(test_list):\n    # Initialize an empty dictionary to store the count of each tuple\n    res = {}\n    \n    # Iterate over each tuple in the test list\n    for ele in test_list:\n        # If the tuple is already in the dictionary, increment its count\n        if ele in res:\n            res[ele] += 1\n        # Otherwise, add the tuple to the dictionary with a count of 1\n        else:\n            res[ele] = 1\n    \n    # Return the dictionary containing the count of each tuple\n    return res\n\n# Test the function with the provided test case\nassert check_occurences([(3, 1), (1, 3), (2, 5), (5, 2), (6, 3)]) == {(1, 3): 2, (2, 5): 2, (3, 6): 1}", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/240": [{"task_id": "Mbpp/240", "solution": "\"\"\"\nWrite a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\nassert replace_list([1, 3, 5, 7, 9, 10],[2, 4, 6, 8])==[1, 3, 5, 7, 9, 2, 4, 6, 8]\n\"\"\"\ndef replace_list(list1, list2):\n    # Replace the last element of list1 with all elements from list2\n    list1[-1:] = list2\n    return list1\n\n# Test the function with the provided test case\nassert replace_list([1, 3, 5, 7, 9, 10], [2, 4, 6, 8]) == [1, 3, 5, 7, 9, 2, 4, 6, 8]\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/229": [{"task_id": "Mbpp/229", "solution": "\"\"\"\nWrite a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nassert re_arrange_array([-1, 2, -3, 4, 5, 6, -7, 8, 9], 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9]\n\"\"\"\ndef re_arrange_array(arr, n):\n    # Initialize two pointers for the leftmost negative and rightmost positive positions\n    i = 0\n    j = n - 1\n    \n    while True:\n        # Move the left pointer to the right until a positive number is found\n        while i <= j and arr[i] < 0:\n            i += 1\n        \n        # Move the right pointer to the left until a negative number is found\n        while i <= j and arr[j] > 0:\n            j -= 1\n        \n        # If the left pointer is less than or equal to the right pointer, swap the elements\n        if i <= j:\n            arr[i], arr[j] = arr[j], arr[i]\n            i += 1\n            j -= 1\n        else:\n            break\n    \n    return arr\n\n# Test the function with the provided test case\nassert re_arrange_array([-1, 2, -3, 4, 5, 6, -7, 8, 9], 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9]", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/238": [{"task_id": "Mbpp/238", "solution": "\"\"\"\nWrite a python function to count the number of non-empty substrings of a given string.\nassert number_of_substrings(\"abc\") == 6\n\"\"\"\ndef number_of_substrings(s):\n    # Calculate the length of the string\n    n = len(s)\n    \n    # Initialize the result variable to store the total number of substrings\n    res = 0\n    \n    # Loop through each character in the string\n    for i in range(n):\n        # For each character, add the number of possible substrings starting from that character\n        res += (n - i)\n    \n    # Return the total number of non-empty substrings\n    return res\n\n# Test the function with the provided test case\nassert number_of_substrings(\"abc\") == 6\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/242": [{"task_id": "Mbpp/242", "solution": "\"\"\"\nWrite a function to count the total number of characters in a string.\nassert count_charac(\"python programming\")==18\n\"\"\"\ndef count_charac(str):\n    # Initialize a counter variable to zero\n    count = 0\n    \n    # Iterate over each character in the string\n    for char in str:\n        # Increment the counter for each character\n        count += 1\n    \n    # Return the total count of characters\n    return count\n\n# Test the function with the provided test case\nassert count_charac(\"python programming\") == 18\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/245": [{"task_id": "Mbpp/245", "solution": "\"\"\"\nWrite a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nassert max_sum([1, 15, 51, 45, 33, 100, 12, 18, 9]) == 194\n\"\"\"\ndef max_sum(arr):\n    n = len(arr)\n    \n    # Initialize arrays to store the maximum sum increasing subsequence ending at each index\n    inc = [arr[i] for i in range(n)]\n    \n    # Calculate the maximum sum increasing subsequence for each element\n    for i in range(1, n):\n        for j in range(i):\n            if arr[j] < arr[i] and inc[i] < inc[j] + arr[i]:\n                inc[i] = inc[j] + arr[i]\n    \n    # Initialize arrays to store the maximum sum decreasing subsequence starting at each index\n    dec = [arr[i] for i in range(n)]\n    \n    # Calculate the maximum sum decreasing subsequence for each element\n    for i in range(n-2, -1, -1):\n        for j in range(i+1, n):\n            if arr[j] < arr[i] and dec[i] < dec[j] + arr[i]:\n                dec[i] = dec[j] + arr[i]\n    \n    # Find the maximum sum of bitonic subsequence\n    max_bitonic_sum = 0\n    for i in range(n):\n        max_bitonic_sum = max(max_bitonic_sum, inc[i] + dec[i] - arr[i])\n    \n    return max_bitonic_sum\n\n# Test the function with the provided test case\nassert max_sum([1, 15, 51, 45, 33, 100, 12, 18, 9]) == 194", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/234": [{"task_id": "Mbpp/234", "solution": "\"\"\"\nWrite a function to find the volume of a cube given its side length.\nassert volume_cube(3)==27\n\"\"\"\ndef volume_cube(side):\n    # Calculate the volume of the cube using the formula: side^3\n    return side * side * side\n\n# Test the function with the provided test case\nassert volume_cube(3) == 27\n", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[1.768116407397588]]}], "Mbpp/230": [{"task_id": "Mbpp/230", "solution": "\"\"\"\nWrite a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\nassert replace_blank(\"hello people\",'@')==(\"hello@people\")\n\"\"\"\ndef replace_blank(str1, ch):\n    # Replace all occurrences of ' ' (space) with the specified character\n    return str1.replace(' ', ch)\n\n# Test the function with the provided test case\nassert replace_blank(\"hello people\", '@') == \"hello@people\"\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/250": [{"task_id": "Mbpp/250", "solution": "\"\"\"\nWrite a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\nassert count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),4) == 0\n\"\"\"\ndef count_X(test_tup, K):\n    # Initialize counter to zero\n    res = 0\n    \n    # Iterate through each element in the tuple\n    for ele in test_tup:\n        # Check if the current element matches the target element\n        if ele == K:\n            # Increment the counter if match is found\n            res += 1\n            \n    return res\n\n# Test the function with the provided test case\nassert count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2), 4) == 0", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/223": [{"task_id": "Mbpp/223", "solution": "\"\"\"\nWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nassert is_majority([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n\"\"\"\ndef is_majority(arr, n, x):\n    # Find the first occurrence of x in arr\n    i = find_first(arr, x)\n    \n    # If x is not present in arr, return False\n    if i == -1:\n        return False\n    \n    # Check if the frequency of x is greater than n/2\n    if ((i + n // 2) < n and arr[i + n // 2] == x):\n        return True\n    else:\n        return False\n\n# Helper function to find the first occurrence of x in arr\ndef find_first(arr, x):\n    low, high = 0, len(arr) - 1\n    while high >= low:\n        mid = (low + high) // 2\n        if (mid == 0 or x > arr[mid - 1]) and (arr[mid] == x):\n            return mid\n        elif x > arr[mid]:\n            low = mid + 1\n        else:\n            high = mid - 1\n    return -1\n\n# Test the function with the provided test case\nassert is_majority([1, 2, 3, 3, 3, 3, 10], 7, 3) == True", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[[52, 52], 52, 52]]}], "Mbpp/96": [{"task_id": "Mbpp/96", "solution": "\"\"\"\nWrite a python function to find the number of divisors of a given integer.\nassert divisor(15) == 4\n\"\"\"\ndef divisor(n):\n    # Initialize count of divisors\n    count = 0\n    \n    # Loop through all numbers from 1 to n (inclusive)\n    for i in range(1, n + 1):\n        # If i divides n without remainder, it is a divisor\n        if n % i == 0:\n            count += 1\n            \n    return count\n\n# Test the function with the provided test case\nassert divisor(15) == 4\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/164": [{"task_id": "Mbpp/164", "solution": "\"\"\"\nWrite a function to determine if the sum of the divisors of two integers are the same.\nassert are_equivalent(36, 57) == False\n\"\"\"\ndef are_equivalent(x, y):\n    # Helper function to calculate the sum of divisors of a number\n    def sum_of_divisors(n):\n        total = 0\n        for i in range(1, n + 1):\n            if n % i == 0:\n                total += i\n        return total\n    \n    # Calculate the sum of divisors for both numbers\n    sum_x = sum_of_divisors(x)\n    sum_y = sum_of_divisors(y)\n    \n    # Compare the sums and return True if they are equal, False otherwise\n    return sum_x == sum_y\n\n# Test the function with the provided test case\nassert are_equivalent(36, 57) == False", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/253": [{"task_id": "Mbpp/253", "solution": "\"\"\"\nWrite a python function that returns the number of integer elements in a given list.\nassert count_integer([1,2,'abc',1.2]) == 2\n\"\"\"\ndef count_integer(lst):\n    # Initialize counter for integer elements\n    count = 0\n    \n    # Iterate through each element in the list\n    for i in lst:\n        # Check if the element is an instance of int\n        if isinstance(i, int):\n            count += 1\n            \n    return count\n\n# Test the function with the provided test case\nassert count_integer([1, 2, 'abc', 1.2]) == 2\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/252": [{"task_id": "Mbpp/252", "solution": "\"\"\"\nWrite a python function to convert complex numbers to polar coordinates.\nassert convert(1) == (1.0, 0.0)\n\"\"\"\n# Importing the cmath module for complex number operations\nimport cmath\n\ndef convert(z):\n    # Using the cmath.polar() method to convert a complex number to polar coordinates\n    return cmath.polar(z)\n\n# Test case to verify the correctness of the function\nassert convert(1) == (1.0, 0.0)\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/251": [{"task_id": "Mbpp/251", "solution": "\"\"\"\nWrite a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\nassert insert_element(['Red', 'Green', 'Black'] ,'c')==['c', 'Red', 'c', 'Green', 'c', 'Black']\n\"\"\"\ndef insert_element(lst, element):\n    # Initialize an empty list to store the result\n    res = []\n    \n    # Iterate over each item in the input list\n    for i in lst:\n        # Append the given element followed by the current item to the result list\n        res.extend([element, i])\n    \n    # Return the modified list\n    return res\n\n# Test the function with the provided test case\nassert insert_element(['Red', 'Green', 'Black'], 'c') == ['c', 'Red', 'c', 'Green', 'c', 'Black']\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/126": [{"task_id": "Mbpp/126", "solution": "\"\"\"\nWrite a python function to find the sum of common divisors of two given numbers.\nassert sum(10,15) == 6\n\"\"\"\ndef sum(n1, n2):\n    # Initialize the sum of common divisors to 0\n    sum = 0\n    \n    # Iterate through all possible divisors up to the minimum of n1 and n2\n    for i in range(1, min(n1, n2) + 1):\n        # Check if both n1 and n2 are divisible by i\n        if (n1 % i == 0) and (n2 % i == 0):\n            # Add the divisor to the sum\n            sum += i\n            \n    return sum\n\n# Test the function with the provided test case\nassert sum(10, 15) == 6", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[987654321, 123456789]]}], "Mbpp/67": [{"task_id": "Mbpp/67", "solution": "\"\"\"\nWrite a function to find the number of ways to partition a set of Bell numbers.\nassert bell_number(2)==2\n\"\"\"\ndef bell_number(n):\n    # Initialize a list to store Bell numbers up to n\n    B = [0] * (n + 1)\n    \n    # Base case: Bell number for 0 is 1\n    B[0] = 1\n    \n    # Compute Bell numbers using the recursive relation\n    for i in range(1, n + 1):\n        B[i] = sum(B[j] * binomial_coefficient(i - 1, j) for j in range(i))\n    \n    return B[n]\n\n# Function to calculate binomial coefficient C(n, k)\ndef binomial_coefficient(n, k):\n    res = 1\n    if k > n / 2:\n        k = n - k\n    for i in range(k):\n        res *= (n - i)\n        res //= (i + 1)\n    return res\n\n# Test the function with the provided test case\nassert bell_number(2) == 2", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/247": [{"task_id": "Mbpp/247", "solution": "\"\"\"\nWrite a function to find the length of the longest palindromic subsequence in the given string.\nassert lps(\"TENS FOR TENS\") == 5\n\"\"\"\ndef lps(s):\n    # Get the length of the input string\n    n = len(s)\n    \n    # Create a 2D array to store lengths of longest palindromic subsequences\n    dp = [[0 for x in range(n)] for y in range(n)]\n    \n    # All substrings of length 1 are palindromes\n    for i in range(n):\n        dp[i][i] = 1\n    \n    # Build the table from bottom up\n    for cl in range(2, n + 1):  # cl is length of substring\n        for i in range(n - cl + 1):\n            j = i + cl - 1\n            if s[i] == s[j] and cl == 2:\n                dp[i][j] = 2\n            elif s[i] == s[j]:\n                dp[i][j] = dp[i + 1][j - 1] + 2\n            else:\n                dp[i][j] = max(dp[i][j - 1], dp[i + 1][j])\n    \n    # The value in dp[0][n-1] will be the length of the longest palindromic subsequence\n    return dp[0][n - 1]\n\n# Test the function with the provided test case\nassert lps(\"TENS FOR TENS\") == 5", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/162": [{"task_id": "Mbpp/162", "solution": "\"\"\"\nWrite a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\nassert sum_series(6) == 12\n\"\"\"\ndef sum_series(n):\n    # Initialize the result variable to store the sum\n    res = 0\n    \n    # Loop through the range from 0 to n//2 (inclusive)\n    for i in range(n // 2 + 1):\n        # Add the value of n - 2*i to the result\n        res += n - 2 * i\n    \n    # Return the computed sum\n    return res\n\n# Test the function with the provided test case\nassert sum_series(6) == 12\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/123": [{"task_id": "Mbpp/123", "solution": "\"\"\"\nWrite a function to sum all amicable numbers from 1 to a specified number.\nassert amicable_numbers_sum(999)==504\n\"\"\"\ndef amicable_numbers_sum(n):\n    # Initialize a list to store amicable numbers\n    amicables = []\n    \n    # Loop through each number up to n\n    for i in range(2, n + 1):\n        # Calculate the sum of divisors of i (excluding i itself)\n        sum_i = sum([j for j in range(1, i) if i % j == 0])\n        \n        # Check if the sum of divisors of sum_i equals i and i is not already in the list\n        if sum_i > i and sum([j for j in range(1, sum_i) if sum_i % j == 0]) == i and i not in amicables:\n            # Add both numbers to the list of amicable numbers\n            amicables.extend([i, sum_i])\n    \n    # Return the sum of all unique amicable numbers found\n    return sum(set(amicables))\n\n# Test the function with the provided test case\nassert amicable_numbers_sum(999) == 504", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[9999]], "plus_fail_tests": []}], "Mbpp/294": [{"task_id": "Mbpp/294", "solution": "\"\"\"\nWrite a function to find the maximum value in a given heterogeneous list.\nassert max_val(['Python', 3, 2, 4, 5, 'version'])==5\n\"\"\"\ndef max_val(lst):\n    # Initialize a variable to store the maximum integer found\n    max_int = -1\n    \n    # Iterate through each element in the list\n    for i in lst:\n        # Check if the current element is an integer and greater than the current max_int\n        if isinstance(i, int) and i > max_int:\n            # Update max_int with the new maximum integer\n            max_int = i\n            \n    return max_int\n\n# Test the function with the provided test case\nassert max_val(['Python', 3, 2, 4, 5, 'version']) == 5", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/293": [{"task_id": "Mbpp/293", "solution": "\"\"\"\nWrite a function to find the third side of a right angled triangle.\nassert otherside_rightangle(7,8)==10.63014581273465\n\"\"\"\nimport math\n\ndef otherside_rightangle(a, b):\n    # Calculate the square of the hypotenuse using Pythagorean theorem\n    c_square = (a ** 2) + (b ** 2)\n    # Take the square root to get the length of the hypotenuse\n    c = math.sqrt(c_square)\n    return c\n\n# Test the function with the provided test case\nassert otherside_rightangle(7, 8) == 10.63014581273465", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/282": [{"task_id": "Mbpp/282", "solution": "\"\"\"\nWrite a function to subtract two lists element-wise.\nassert sub_list([1, 2, 3],[4,5,6])==[-3,-3,-3]\n\"\"\"\ndef sub_list(list1, list2):\n    # Use zip to iterate over both lists simultaneously and subtract elements\n    result = [x - y for x, y in zip(list1, list2)]\n    return result\n\n# Test the function with the provided test case\nassert sub_list([1, 2, 3], [4, 5, 6]) == [-3, -3, -3]\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/264": [{"task_id": "Mbpp/264", "solution": "\"\"\"\nWrite a function to calculate a dog's age in dog's years.\nassert dog_age(12)==61\n\"\"\"\ndef dog_age(human_years):\n    # Check if the input human years are negative\n    if human_years < 0:\n        exit()\n    # Calculate the first two years of a dog's life\n    elif human_years <= 2:\n        dog_years = human_years * 10.5\n    # Calculate the additional years after the first two years\n    else:\n        dog_years = 21 + (human_years - 2) * 4\n    return dog_years\n\n# Test the function with the provided test case\nassert dog_age(12) == 61\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/268": [{"task_id": "Mbpp/268", "solution": "\"\"\"\nWrite a function to find the n'th star number.\nassert find_star_num(3) == 37\n\"\"\"\ndef find_star_num(n):\n    # Calculate the nth star number using the formula: n * (n + 1) / 2\n    return int(n * (n + 1) / 2)\n\n# Test the function with the provided test case\nassert find_star_num(3) == 37\n", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/272": [{"task_id": "Mbpp/272", "solution": "\"\"\"\nWrite a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\nassert rear_extract([(1, 'Rash', 21), (2, 'Varsha', 20), (3, 'Kil', 19)]) == [21, 20, 19]\n\"\"\"\ndef rear_extract(test_list):\n    # Extracting the last element from each tuple using list comprehension\n    res = [sub[-1] for sub in test_list]\n    return res\n\n# Test the function with the provided test case\nassert rear_extract([(1, 'Rash', 21), (2, 'Varsha', 20), (3, 'Kil', 19)]) == [21, 20, 19]\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/256": [{"task_id": "Mbpp/256", "solution": "\"\"\"\nWrite a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\nassert count_Primes_nums(5) == 2\n\"\"\"\ndef count_Primes_nums(n):\n    # Initialize a list to keep track of prime status for each number up to n-1\n    primes = [True] * (n)\n    \n    # Set the first two elements as False since they are not prime\n    primes[0], primes[1] = False, False\n    \n    # Iterate over each number starting from 2\n    for i in range(2, int(n**0.5) + 1):\n        if primes[i]:\n            # Mark multiples of i as False (not prime)\n            for j in range(i*i, n, i):\n                primes[j] = False\n                \n    # Count the number of True values in the primes list, which represent prime numbers\n    return sum(primes)\n\n# Test the function with the provided test case\nassert count_Primes_nums(5) == 2", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[true]]}], "Mbpp/276": [{"task_id": "Mbpp/276", "solution": "\"\"\"\nWrite a function that takes in the radius and height of a cylinder and returns the the volume.\nassert math.isclose(volume_cylinder(10,5), 1570.7500000000002, rel_tol=0.001)\n\"\"\"\nimport math\n\ndef volume_cylinder(radius, height):\n    # Calculate the volume of the cylinder using the formula V = \u03c0r^2h\n    return math.pi * radius ** 2 * height\n\n# Test the function with the provided test case\nassert math.isclose(volume_cylinder(10, 5), 1570.7500000000002, rel_tol=0.001)\n", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[2.951124891044273, 9]]}], "Mbpp/259": [{"task_id": "Mbpp/259", "solution": "\"\"\"\nWrite a function to maximize the given two tuples.\nassert maximize_elements(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((6, 7), (4, 9), (2, 9), (7, 10))\n\"\"\"\ndef maximize_elements(test_tup1, test_tup2):\n    # Use zip to pair elements from both tuples and max to find the maximum value for each pair\n    res = tuple(max(x) for x in zip(*test_tup1, *test_tup2))\n    return res\n\n# Test the function with the provided test case\nassert maximize_elements(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((6, 7), (4, 9), (2, 9), (7, 10))\n", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/269": [{"task_id": "Mbpp/269", "solution": "\"\"\"\nWrite a function to find the ascii value of a character.\nassert ascii_value('A')==65\n\"\"\"\ndef ascii_value(char):\n    # Use the ord() function to get the ASCII value of the character\n    return ord(char)\n\n# Test the function with the provided test case\nassert ascii_value('A') == 65\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/398": [{"task_id": "Mbpp/398", "solution": "\"\"\"\nWrite a function to compute the sum of digits of each number of a given list.\nassert sum_of_digits([10,2,56])==14\n\"\"\"\ndef sum_of_digits(nums):\n    # Initialize a variable to store the total sum of digits\n    total_sum = 0\n    \n    # Iterate through each number in the list\n    for num in nums:\n        # Convert the number to a string to iterate over its digits\n        for digit in str(num):\n            # Add the integer value of the digit to the total sum\n            total_sum += int(digit)\n    \n    # Return the total sum of digits\n    return total_sum\n\n# Test the function with the provided test case\nassert sum_of_digits([10, 2, 56]) == 14", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[[10, 20, 4, 5, "b", 70, "a"]]]], "plus_fail_tests": [[[-10, 15, 0, -5, 2]]]}], "Mbpp/407": [{"task_id": "Mbpp/407", "solution": "\"\"\"\nWrite a function to create the next bigger number by rearranging the digits of a given number.\nassert rearrange_bigger(12)==21\n\"\"\"\ndef rearrange_bigger(num):\n    # Convert the number to a list of its digits\n    num = list(str(num))\n    \n    # Traverse the list from right to left\n    for i in range(len(num) - 2, -1, -1):\n        # If the current digit is less than the next digit\n        if num[i] < num[i + 1]:\n            # Extract the part of the list that needs to be sorted\n            temp_list = num[i:]\n            # Sort this part in ascending order\n            temp_list.sort()\n            # Replace the original part with the sorted version\n            num[i:] = temp_list\n            # Find the first digit greater than the current digit\n            for j in range(i + 1, len(num)):\n                if num[j] > num[i]:\n                    # Swap these two digits\n                    num[i], num[j] = num[j], num[i]\n                    # Return the new number as an integer\n                    return int(''.join(num))\n    # If no such arrangement exists, return -1\n    return -1\n\n# Test the function with the provided test case\nassert rearrange_bigger(12) == 21", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[10]], "plus_fail_tests": []}], "Mbpp/300": [{"task_id": "Mbpp/300", "solution": "\"\"\"\nWrite a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\nassert math.isclose(count_binary_seq(1), 2.0, rel_tol=0.001)\n\"\"\"\n# Importing the comb function from the math module for combination calculations\nfrom math import comb\n\ndef count_binary_seq(n):\n    # Initialize result variable to store the count of valid binary sequences\n    res = 0\n    \n    # Iterate over each possible number of set bits (i) from 0 to n\n    for i in range(n + 1):\n        # Calculate the number of ways to choose i bits out of n for the first half\n        # and also for the second half, then square it to account for both halves\n        res += comb(n, i) ** 2\n    \n    # Return the total count of valid binary sequences\n    return res\n\n# Test the function with the provided test case\nassert math.isclose(count_binary_seq(1), 2.0, rel_tol=0.001)", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/284": [{"task_id": "Mbpp/284", "solution": "\"\"\"\nWrite a function that takes in a list and element and checks whether all items in the list are equal to the given element.\nassert check_element([\"green\", \"orange\", \"black\", \"white\"],'blue')==False\n\"\"\"\ndef check_element(lst, x):\n    # Check if all elements in the list are equal to the given element\n    return all(item == x for item in lst)\n\n# Test the function with the provided test case\nassert check_element([\"green\", \"orange\", \"black\", \"white\"], 'blue') == False\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/274": [{"task_id": "Mbpp/274", "solution": "\"\"\"\nWrite a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\nassert even_binomial_Coeff_Sum(4) == 8\n\"\"\"\ndef even_binomial_Coeff_Sum(n):\n    # Calculate the sum of even-indexed binomial coefficients using bit manipulation\n    return (1 << (n - 1))\n\n# Test the function with the provided test case\nassert even_binomial_Coeff_Sum(4) == 8", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/397": [{"task_id": "Mbpp/397", "solution": "\"\"\"\nWrite a function to find the median of three numbers.\nassert median_numbers(25,55,65)==55.0\n\"\"\"\ndef median_numbers(x, y, z):\n    # Check if x is not between y and z\n    if (x > y and x < z) or (x > z and x < y):\n        return x\n    # Check if y is not between x and z\n    elif (y > x and y < z) or (y > z and y < x):\n        return y\n    else:\n        return z\n\n# Test the function with the provided test case\nassert median_numbers(25, 55, 65) == 55.0", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[-15, -15, 15]]}], "Mbpp/267": [{"task_id": "Mbpp/267", "solution": "\"\"\"\nWrite a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\nassert square_Sum(2) == 10\n\"\"\"\ndef square_Sum(n):\n    # Initialize the sum to zero\n    sum = 0\n    \n    # Iterate through the first n odd numbers\n    for i in range(1, n + 1):\n        # Calculate the square of each odd number and add it to the sum\n        sum += (2 * i - 1) ** 2\n    \n    # Return the computed sum\n    return sum\n\n# Test the function with the provided test case\nassert square_Sum(2) == 10\n", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/292": [{"task_id": "Mbpp/292", "solution": "\"\"\"\nWrite a python function to find quotient of two numbers (rounded down to the nearest integer).\nassert find(10,3) == 3\n\"\"\"\ndef find(x, y):\n    # Calculate the quotient using floor division\n    return x // y\n\n# Test the function with the provided test case\nassert find(10, 3) == 3\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/262": [{"task_id": "Mbpp/262", "solution": "\"\"\"\nWrite a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\nassert split_two_parts([1,1,2,3,4,4,5,1],3)==([1, 1, 2], [3, 4, 4, 5, 1])\n\"\"\"\ndef split_two_parts(arr, L):\n    # Split the array into two parts based on the index L\n    return (arr[:L], arr[L:])\n\n# Test the function with the provided test case\nassert split_two_parts([1, 1, 2, 3, 4, 4, 5, 1], 3) == ([1, 1, 2], [3, 4, 4, 5, 1])\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/404": [{"task_id": "Mbpp/404", "solution": "\"\"\"\nWrite a python function to find the minimum of two numbers.\nassert minimum(1,2) == 1\n\"\"\"\ndef minimum(a, b):\n    # Use the min function to find the smallest number between 'a' and 'b'\n    return min(a, b)\n\n# Test the function with the provided test case\nassert minimum(1, 2) == 1\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/391": [{"task_id": "Mbpp/391", "solution": "\"\"\"\nWrite a function to convert more than one list to nested dictionary.\nassert convert_list_dictionary([\"S001\", \"S002\", \"S003\", \"S004\"],[\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"] ,[85, 98, 89, 92])==[{'S001': {'Adina Park': 85}}, {'S002': {'Leyton Marsh': 98}}, {'S003': {'Duncan Boyle': 89}}, {'S004': {'Saim Richards': 92}}]\n\"\"\"\ndef convert_list_dictionary(keys, values, scores):\n    # Initialize an empty list to store the nested dictionaries\n    result = []\n    \n    # Iterate over the indices of the input lists\n    for i in range(len(keys)):\n        # Create a nested dictionary with the current key-value-score combination\n        nested_dict = {keys[i]: {values[i]: scores[i]}}\n        # Append the nested dictionary to the result list\n        result.append(nested_dict)\n    \n    return result\n\n# Test the function with the provided test case\nassert convert_list_dictionary(\n    [\"S001\", \"S002\", \"S003\", \"S004\"],\n    [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"],\n    [85, 98, 89, 92]\n) == [\n    {'S001': {'Adina Park': 85}},\n    {'S002': {'Leyton Marsh': 98}},\n    {'S003': {'Duncan Boyle': 89}},\n    {'S004': {'Saim Richards': 92}}\n]\n", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[["S001", "S002", "S003", "S004"], ["Adina Park", "Leyton Marsh", "Duncan Boyle", "Saim Richards"], [[1, 2, 3], [4, 5, 6], {"a": "x", "b": "y", "c": "z"}]]]}], "Mbpp/388": [{"task_id": "Mbpp/388", "solution": "\"\"\"\nWrite a python function to find the highest power of 2 that is less than or equal to n.\nassert highest_Power_of_2(10) == 8\n\"\"\"\ndef highest_Power_of_2(n):\n    # Initialize result to store the highest power of 2 less than or equal to n\n    res = 0\n    \n    # Loop until n becomes 0\n    while (n != 0):\n        # Right shift n by 1 bit to divide it by 2\n        n = n >> 1\n        # Left shift res by 1 bit to multiply it by 2\n        res = res << 1\n    \n    # Return the result which is the highest power of 2 <= n\n    return res\n\n# Test the function with the provided test case\nassert highest_Power_of_2(10) == 8", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/392": [{"task_id": "Mbpp/392", "solution": "\"\"\"\nWrite a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nassert get_max_sum(60) == 106\n\"\"\"\ndef get_max_sum(n):\n    # Initialize a dictionary to store computed values\n    dp = {}\n    \n    def helper(x):\n        # Check if the value has already been computed\n        if x in dp:\n            return dp[x]\n        \n        # Base case: if x is less than or equal to 1, return x\n        if x <= 1:\n            dp[x] = x\n            return x\n        \n        # Recursively calculate the maximum sum for x\n        dp[x] = max(helper(x // 2) + helper(x // 3) + helper(x // 4) + helper(x // 5), x)\n        return dp[x]\n    \n    # Call the helper function with the input n\n    return helper(n)\n\n# Test the function with the provided test case\nassert get_max_sum(60) == 106", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/283": [{"task_id": "Mbpp/283", "solution": "\"\"\"\nWrite a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nassert validate(1234) == True\n\"\"\"\ndef validate(n):\n    # Convert the number to a string to iterate over each digit\n    for i in str(n):\n        # Count the occurrences of the current digit in the number\n        if n.count(int(i)) > int(i):\n            return False\n    return True\n\n# Test the function with the provided test case\nassert validate(1234) == True\n", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/273": [{"task_id": "Mbpp/273", "solution": "\"\"\"\nWrite a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\nassert substract_elements((10, 4, 5), (2, 5, 18)) == (8, -1, -13)\n\"\"\"\ndef substract_elements(test_tup1, test_tup2):\n    # Use zip to iterate over both tuples simultaneously and subtract their elements\n    res = tuple(x - y for x, y in zip(test_tup1, test_tup2))\n    return res\n\n# Test the function with the provided test case\nassert substract_elements((10, 4, 5), (2, 5, 18)) == (8, -1, -13)\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/257": [{"task_id": "Mbpp/257", "solution": "\"\"\"\nWrite a function that takes in two numbers and returns a tuple with the second number and then the first number.\nassert swap_numbers(10,20)==(20,10)\n\"\"\"\ndef swap_numbers(x, y):\n    # Create a temporary variable to hold the value of x\n    temp = x\n    # Assign the value of y to x\n    x = y\n    # Assign the value stored in temp (original x) to y\n    y = temp\n    # Return the swapped values as a tuple\n    return (x, y)\n\n# Test the function with the provided test case\nassert swap_numbers(10, 20) == (20, 10)\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/290": [{"task_id": "Mbpp/290", "solution": "\"\"\"\nWrite a function to find the list of maximum length in a list of lists.\nassert max_length([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(3, [13, 15, 17])\n\"\"\"\ndef max_length(lst):\n    # Find the maximum length among all sublists\n    max_len = max(len(x) for x in lst)\n    \n    # Filter out the sublist(s) with the maximum length\n    result = [x for x in lst if len(x) == max_len]\n    \n    return (max_len, result[0])\n\n# Test the function with the provided test case\nassert max_length([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]]) == (3, [13, 15, 17])", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/296": [{"task_id": "Mbpp/296", "solution": "\"\"\"\nWrite a python function to count inversions in an array.\nassert get_Inv_Count([1,20,6,4,5]) == 5\n\"\"\"\ndef get_Inv_Count(arr):\n    # Initialize counter for inversions\n    inv_count = 0\n    \n    # Iterate through each element in the array\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            # If an inversion is found, increment the counter\n            if arr[i] > arr[j]:\n                inv_count += 1\n                \n    return inv_count\n\n# Test the function with the provided test case\nassert get_Inv_Count([1, 20, 6, 4, 5]) == 5", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/299": [{"task_id": "Mbpp/299", "solution": "\"\"\"\nWrite a function to calculate the maximum aggregate from the list of tuples.\nassert max_aggregate([('Juan Whelan',90),('Sabah Colley',88),('Peter Nichols',7),('Juan Whelan',122),('Sabah Colley',84)])==('Juan Whelan', 212)\n\"\"\"\ndef max_aggregate(test_list):\n    # Initialize an empty dictionary to store the sum of values for each key\n    res = {}\n    \n    # Iterate through each tuple in the list\n    for key, val in test_list:\n        # If the key already exists in the dictionary, add the value to it\n        if key in res:\n            res[key] += val\n        else:\n            # Otherwise, initialize the key with the current value\n            res[key] = val\n    \n    # Return the key-value pair with the maximum value\n    return max(res.items(), key=lambda x: x[1])\n\n# Test the function with the provided test case\nassert max_aggregate([('Juan Whelan', 90), ('Sabah Colley', 88), ('Peter Nichols', 7), ('Juan Whelan', 122), ('Sabah Colley', 84)]) == ('Juan Whelan', 212)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/265": [{"task_id": "Mbpp/265", "solution": "\"\"\"\nWrite a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\nassert list_split(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n'],3)==[['a', 'd', 'g', 'j', 'm'], ['b', 'e', 'h', 'k', 'n'], ['c', 'f', 'i', 'l']]\n\"\"\"\ndef list_split(lst, n):\n    # Initialize an empty list to store the result\n    res = []\n    \n    # Iterate over the list with step size n\n    for i in range(0, len(lst), n):\n        # Append each sublist to the result list\n        res.append(lst[i:i + n])\n    \n    return res\n\n# Test the function with the provided test case\nassert list_split(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n'], 3) == [['a', 'd', 'g', 'j', 'm'], ['b', 'e', 'h', 'k', 'n'], ['c', 'f', 'i', 'l']]", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/406": [{"task_id": "Mbpp/406", "solution": "\"\"\"\nWrite a python function to find whether the parity of a given number is odd.\nassert find_Parity(12) == False\n\"\"\"\ndef find_Parity(n):\n    # Check if the number is even using bitwise AND operation\n    if (n & 1) == 0:\n        return False\n    else:\n        return True\n\n# Test the function with the provided test case\nassert find_Parity(12) == False\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/400": [{"task_id": "Mbpp/400", "solution": "\"\"\"\nWrite a function to extract the number of unique tuples in the given list.\nassert extract_freq([(3, 4), (1, 2), (4, 3), (5, 6)] ) == 3\n\"\"\"\ndef extract_freq(test_list):\n    # Convert each tuple in the list to a sorted tuple to ensure uniqueness\n    res = len(set(tuple(sorted(sub)) for sub in test_list))\n    return res\n\n# Test the function with the provided test case\nassert extract_freq([(3, 4), (1, 2), (4, 3), (5, 6)]) == 3\n", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/277": [{"task_id": "Mbpp/277", "solution": "\"\"\"\nWrite a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\nassert dict_filter({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190},170)=={'Cierra Vega': 175, 'Alden Cantrell': 180, 'Pierre Cox': 190}\n\"\"\"\ndef dict_filter(dict1, n):\n    # Filter the dictionary to include only items where the value is greater than or equal to n\n    result = {key: value for key, value in dict1.items() if value >= n}\n    return result\n\n# Test the function with the provided test case\nassert dict_filter({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190}, 170) == {'Cierra Vega': 175, 'Alden Cantrell': 180, 'Pierre Cox': 190}", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/281": [{"task_id": "Mbpp/281", "solution": "\"\"\"\nWrite a python function to check if the elements of a given list are unique or not.\nassert all_unique([1,2,3]) == True\n\"\"\"\ndef all_unique(data):\n    # Create an empty set to store unique elements\n    seen = set()\n    \n    # Iterate over each element in the data list\n    for x in data:\n        # Check if the element is already in the set\n        if x in seen:\n            return False  # If found, return False indicating duplicates exist\n        else:\n            seen.add(x)  # Add the element to the set\n    \n    return True  # If no duplicates were found, return True\n\n# Test the function with the provided test case\nassert all_unique([1, 2, 3]) == True", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/305": [{"task_id": "Mbpp/305", "solution": "\"\"\"\nWrite a function to return two words from a list of words starting with letter 'p'.\nassert start_withp([\"Python PHP\", \"Java JavaScript\", \"c c++\"])==('Python', 'PHP')\n\"\"\"\ndef start_withp(words):\n    # Split each word in the list by spaces and filter those starting with 'P'\n    p_words = [word.split()[0] for word in words if word.split()[0][0].lower() == 'p']\n    \n    # Return the first two words found that start with 'P' as a tuple\n    return (p_words[0], p_words[1])\n\n# Test the function with the provided test case\nassert start_withp([\"Python PHP\", \"Java JavaScript\", \"c c++\"]) == ('Python', 'PHP')\n", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/270": [{"task_id": "Mbpp/270", "solution": "\"\"\"\nWrite a python function to find the sum of even numbers at even positions of a list.\nassert sum_even_and_even_index([5, 6, 12, 1, 18, 8]) == 30\n\"\"\"\ndef sum_even_and_even_index(lst):\n    # Initialize the sum variable to zero\n    s = 0\n    \n    # Iterate over the list using enumerate to get both index and value\n    for i, x in enumerate(lst):\n        # Check if the index is even and the value is even\n        if i % 2 == 0 and x % 2 == 0:\n            # Add the value to the sum\n            s += x\n            \n    # Return the computed sum\n    return s\n\n# Test the function with the provided test case\nassert sum_even_and_even_index([5, 6, 12, 1, 18, 8]) == 30", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/390": [{"task_id": "Mbpp/390", "solution": "\"\"\"\nWrite a function to apply a given format string to all of the elements in a list.\nassert add_string([1,2,3,4],'temp{0}')==['temp1', 'temp2', 'temp3', 'temp4']\n\"\"\"\ndef add_string(nums, format_str):\n    # Use list comprehension to format each element in the list using the provided format string\n    return [format_str.format(i) for i in nums]\n\n# Test the function with the provided test case\nassert add_string([1, 2, 3, 4], 'temp{0}') == ['temp1', 'temp2', 'temp3', 'temp4']\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/396": [{"task_id": "Mbpp/396", "solution": "\"\"\"\nWrite a function to check whether the given string starts and ends with the same character or not.\nassert check_char(\"abba\") == \"Valid\"\n\"\"\"\ndef check_char(str1):\n    # Check if the first and last characters of the string are the same\n    if str1[0] == str1[-1]:\n        return \"Valid\"\n    else:\n        return \"Invalid\"\n\n# Test the function with the provided test case\nassert check_char(\"abba\") == \"Valid\"\n", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/260": [{"task_id": "Mbpp/260", "solution": "\"\"\"\nWrite a function to find the nth newman\u2013shanks\u2013williams prime number.\nassert newman_prime(3) == 7\n\"\"\"\ndef newman_prime(n):\n    # Initialize variables for the Newman-Shanks-Williams sequence\n    x = 1\n    y = 2\n    z = 0\n    \n    # Loop until we have found n primes\n    while True:\n        # Calculate the next term in the sequence\n        z = (x + y * y - 1) % (2 * y)\n        \n        # Check if the current term is prime\n        if z > 1:\n            # If it's not prime, update x and y for the next iteration\n            x = y\n            y = z\n        else:\n            # If it's prime, decrement n and check if we've reached the desired prime count\n            n -= 1\n            if n == 0:\n                return y\n\n# Test the function with the provided test case\nassert newman_prime(3) == 7", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/309": [{"task_id": "Mbpp/309", "solution": "\"\"\"\nWrite a python function to find the maximum of two numbers.\nassert maximum(5,10) == 10\n\"\"\"\ndef maximum(a, b):\n    # Compare the two numbers and return the maximum\n    if a > b:\n        return a\n    else:\n        return b\n\n# Test the function with the provided test case\nassert maximum(5, 10) == 10\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/266": [{"task_id": "Mbpp/266", "solution": "\"\"\"\nWrite a function to find the lateral surface area of a cube given its side length.\nassert lateralsurface_cube(5)==100\n\"\"\"\ndef lateralsurface_cube(side):\n    # Calculate the lateral surface area of a cube using the formula 4 * side^2\n    return 4 * (side ** 2)\n\n# Test the function with the provided test case\nassert lateralsurface_cube(5) == 100\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/310": [{"task_id": "Mbpp/310", "solution": "\"\"\"\nWrite a function to convert a given string to a tuple of characters.\nassert string_to_tuple(\"python 3.0\")==('p', 'y', 't', 'h', 'o', 'n', '3', '.', '0')\n\"\"\"\ndef string_to_tuple(s):\n    # Convert the string into a tuple of characters using tuple() constructor\n    return tuple(s)\n\n# Test the function with the provided test case\nassert string_to_tuple(\"python 3.0\") == ('p', 'y', 't', 'h', 'o', 'n', '3', '.', '0')\n", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/394": [{"task_id": "Mbpp/394", "solution": "\"\"\"\nWrite a function to check if given tuple contains no duplicates.\nassert check_distinct((1, 4, 5, 6, 1, 4)) == False\n\"\"\"\ndef check_distinct(test_tup):\n    # Convert the tuple into a set to remove duplicates and compare lengths\n    res = len(test_tup) == len(set(test_tup))\n    return res\n\n# Test the function with the provided test case\nassert check_distinct((1, 4, 5, 6, 1, 4)) == False\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/278": [{"task_id": "Mbpp/278", "solution": "\"\"\"\nWrite a function to find the number of elements that occurs before the tuple element in the given tuple.\nassert count_first_elements((1, 5, 7, (4, 6), 10) ) == 3\n\"\"\"\ndef count_first_elements(test_tup):\n    # Count the number of elements before the first tuple element\n    res = len([ele for ele in test_tup if not isinstance(ele, tuple)])\n    return res\n\n# Test the function with the provided test case\nassert count_first_elements((1, 5, 7, (4, 6), 10)) == 3\n", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/279": [{"task_id": "Mbpp/279", "solution": "\"\"\"\nWrite a function to find the nth decagonal number.\nassert is_num_decagonal(3) == 27\n\"\"\"\ndef is_num_decagonal(n):\n    # Calculate the nth decagonal number using the formula\n    return int((4 * n * n - 3 * n) / 2)\n\n# Test the function with the provided test case\nassert is_num_decagonal(3) == 27\n", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/261": [{"task_id": "Mbpp/261", "solution": "\"\"\"\nWrite a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\nassert division_elements((10, 4, 6, 9),(5, 2, 3, 3)) == (2, 2, 2, 3)\n\"\"\"\ndef division_elements(test_tup1, test_tup2):\n    # Perform element-wise division using a generator expression\n    res = tuple(x / y for x, y in zip(test_tup1, test_tup2))\n    return res\n\n# Test the function with the provided test case\nassert division_elements((10, 4, 6, 9), (5, 2, 3, 3)) == (2, 2, 2, 3)\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/308": [{"task_id": "Mbpp/308", "solution": "\"\"\"\nWrite a function to find the specified number of largest products from two given lists, selecting one factor from each list.\nassert large_product([1, 2, 3, 4, 5, 6],[3, 6, 8, 9, 10, 6],3)==[60, 54, 50]\n\"\"\"\ndef large_product(nums1, nums2, n):\n    # Sort both input lists in ascending order\n    nums1.sort()\n    nums2.sort()\n    \n    # Initialize an empty list to store the results\n    res = []\n    \n    # Iterate over the range of n times\n    for i in range(n):\n        # Calculate the product of the largest elements from both lists\n        res.append(nums1[-i - 1] * nums2[-i - 1])\n    \n    # Return the result as a list\n    return res\n\n# Test the function with the provided test case\nassert large_product([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 3) == [60, 54, 50]", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/280": [{"task_id": "Mbpp/280", "solution": "\"\"\"\nWrite a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\nassert sequential_search([11,23,58,31,56,77,43,12,65,19],31) == (True, 3)\n\"\"\"\ndef sequential_search(arr, target):\n    # Iterate through each item in the array\n    for i in range(len(arr)):\n        # Check if the current item matches the target\n        if arr[i] == target:\n            # Return True and the index if the target is found\n            return (True, i)\n    # Return False and -1 if the target is not found\n    return (False, -1)\n\n# Test the function with the provided test case\nassert sequential_search([11, 23, 58, 31, 56, 77, 43, 12, 65, 19], 31) == (True, 3)\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/410": [{"task_id": "Mbpp/410", "solution": "\"\"\"\nWrite a function to find the minimum value in a given heterogeneous list.\nassert min_val(['Python', 3, 2, 4, 5, 'version'])==2\n\"\"\"\ndef min_val(lst):\n    # Initialize the minimum value to None\n    min_value = None\n    \n    # Iterate through each element in the list\n    for i in lst:\n        # Check if the current element is an integer or float\n        if isinstance(i, (int, float)):\n            # If it's the first number encountered or smaller than the current minimum\n            if min_value is None or i < min_value:\n                # Update the minimum value\n                min_value = i\n                \n    return min_value\n\n# Test the function with the provided test case\nassert min_val(['Python', 3, 2, 4, 5, 'version']) == 2", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/285": [{"task_id": "Mbpp/285", "solution": "\"\"\"\nWrite a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\nassert text_match_two_three(\"ac\")==(False)\n\"\"\"\nimport re\n\ndef text_match_two_three(text):\n    # Define the regex pattern to match 'a' followed by 2 to 3 'b's\n    pattern = 'ab{2,3}'\n    \n    # Search for the pattern in the given text\n    if re.search(pattern, text):\n        return True\n    else:\n        return False\n\n# Test the function with the provided test case\nassert text_match_two_three(\"ac\") == (False)\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/297": [{"task_id": "Mbpp/297", "solution": "\"\"\"\nWrite a function to flatten a given nested list structure.\nassert flatten_list([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]])==[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]\n\"\"\"\ndef flatten_list(nested_list):\n    # Initialize an empty list to store the flattened elements\n    flat_list = []\n    \n    # Iterate through each element in the nested list\n    for item in nested_list:\n        # Check if the current item is a list\n        if isinstance(item, list):\n            # Extend the flat_list with the flattened version of the sublist\n            flat_list.extend(flatten_list(item))\n        else:\n            # Append the non-list item directly to the flat_list\n            flat_list.append(item)\n    \n    return flat_list\n\n# Test the function with the provided test case\nassert flatten_list([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/286": [{"task_id": "Mbpp/286", "solution": "\"\"\"\nWrite a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\nassert max_sub_array_sum_repeated([10, 20, -30, -1], 4, 3) == 30\n\"\"\"\ndef max_sub_array_sum_repeated(arr, n, k):\n    # Initialize variables to store the maximum sum and current sum\n    max_so_far = float('-inf')\n    curr_max = 0\n    \n    # Iterate through each element in the repeated array\n    for i in range(n * k):\n        curr_max += arr[i % n]\n        \n        # Update the maximum sum found so far\n        if curr_max > max_so_far:\n            max_so_far = curr_max\n        \n        # If current sum becomes negative, reset it to zero\n        if curr_max < 0:\n            curr_max = 0\n    \n    return max_so_far\n\n# Test the function with the provided test case\nassert max_sub_array_sum_repeated([10, 20, -30, -1], 4, 3) == 30", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/301": [{"task_id": "Mbpp/301", "solution": "\"\"\"\nWrite a function to find the depth of a dictionary.\nassert dict_depth({'a':1, 'b': {'c': {'d': {}}}})==4\n\"\"\"\ndef dict_depth(dic):\n    # Check if the input is a dictionary\n    if isinstance(dic, dict):\n        # If it's not empty, return 1 (for the current level) plus the maximum depth of its values\n        return 1 + (max(map(dict_depth, dic.values())) if dic else 0)\n    # If the input is not a dictionary, return 0 as it has no depth\n    return 0\n\n# Test the function with the provided test case\nassert dict_depth({'a': 1, 'b': {'c': {'d': {}}}}) == 4\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/295": [{"task_id": "Mbpp/295", "solution": "\"\"\"\nWrite a function to return the sum of all divisors of a number.\nassert sum_div(8)==7\n\"\"\"\ndef sum_div(n):\n    # Initialize the sum of divisors to 0\n    s = 0\n    \n    # Loop through possible divisors from 1 to n-1\n    for i in range(1, n):\n        # If i is a divisor of n, add it to the sum\n        if n % i == 0:\n            s += i\n            \n    # Return the total sum of divisors\n    return s\n\n# Test the function with the provided test case\nassert sum_div(8) == 7\n", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/409": [{"task_id": "Mbpp/409", "solution": "\"\"\"\nWrite a function to find the minimum product from the pairs of tuples within a given list.\nassert min_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)] )==8\n\"\"\"\ndef min_product_tuple(test_list):\n    # Calculate the product of each tuple pair and find the minimum value\n    res = min(a * b for a, b in test_list)\n    return res\n\n# Test the function with the provided test case\nassert min_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)]) == 8", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/395": [{"task_id": "Mbpp/395", "solution": "\"\"\"\nWrite a python function to find the first non-repeated character in a given string.\nassert first_non_repeating_character(\"abcabc\") == None\n\"\"\"\ndef first_non_repeating_character(s):\n    # Create a dictionary to store the count of each character\n    char_count = {}\n    \n    # Iterate over each character in the string\n    for char in s:\n        if char in char_count:\n            # Increment the count if the character is already in the dictionary\n            char_count[char] += 1\n        else:\n            # Set the count to 1 if the character is not in the dictionary\n            char_count[char] = 1\n    \n    # Iterate over each character again to find the first non-repeating character\n    for char in s:\n        if char_count[char] == 1:\n            return char\n    \n    # Return None if no non-repeating character is found\n    return None\n\n# Test the function with the provided test case\nassert first_non_repeating_character(\"abcabc\") == None\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/405": [{"task_id": "Mbpp/405", "solution": "\"\"\"\nWrite a function to check whether an element exists within a tuple.\nassert check_tuplex((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"),'r')==True\n\"\"\"\ndef check_tuplex(tuplex, element):\n    # Check if the element exists in the tuple using 'in' keyword\n    return element in tuplex\n\n# Test the function with the provided test case\nassert check_tuplex((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"), 'r') == True\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/306": [{"task_id": "Mbpp/306", "solution": "\"\"\"\nWrite a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nassert max_sum_increasing_subseq([1, 101, 2, 3, 100, 4, 5 ], 7, 4, 6) == 11\n\"\"\"\ndef max_sum_increasing_subseq(arr, n, i, k):\n    # If the current index exceeds the array length or if k is not greater than i, return 0\n    if (i >= n or k <= i):\n        return 0\n    \n    # Initialize result as the maximum between the current element and the next element\n    res = max(arr[i], arr[k])\n    \n    # Iterate through the array starting from the next element after k\n    for j in range(k + 1, n):\n        # Check if the current element is greater than the previous element and if it's less than the current result\n        if ((arr[j] > arr[j - 1]) and (arr[j] < res)):\n            # Recursively call the function with updated parameters and update the result\n            res = max(res, max_sum_increasing_subseq(arr, n, j, k))\n    \n    # Return the final result\n    return res\n\n# Test the function with the provided test case\nassert max_sum_increasing_subseq([1, 101, 2, 3, 100, 4, 5], 7, 4, 6) == 11", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/312": [{"task_id": "Mbpp/312", "solution": "\"\"\"\nWrite a function to find the volume of a cone.\nassert math.isclose(volume_cone(5,12), 314.15926535897927, rel_tol=0.001)\n\"\"\"\nimport math\n\ndef volume_cone(radius, height):\n    # Calculate the volume of a cone using the formula (1/3) * \u03c0 * radius^2 * height\n    return (math.pi * radius ** 2 * height) / 3\n\n# Test the function with the provided test case\nassert math.isclose(volume_cone(5, 12), 314.15926535897927, rel_tol=0.001)", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[2.2, 4.7]]}], "Mbpp/287": [{"task_id": "Mbpp/287", "solution": "\"\"\"\nWrite a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\nassert square_Sum(2) == 20\n\"\"\"\ndef square_Sum(n):\n    # Initialize the result variable to store the sum of squares\n    res = 0\n    \n    # Iterate through the first n even numbers\n    for i in range(1, n + 1):\n        # Square each even number and add it to the result\n        res += (2 * i) ** 2\n    \n    # Return the computed sum of squares\n    return res\n\n# Test the function with the provided test case\nassert square_Sum(2) == 20\n", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[1000000]]}], "Mbpp/271": [{"task_id": "Mbpp/271", "solution": "\"\"\"\nWrite a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\nassert even_Power_Sum(2) == 1056\n\"\"\"\ndef even_Power_Sum(n):\n    # Initialize the result variable to store the sum\n    res = 0\n    \n    # Iterate through the first n even numbers\n    for i in range(1, n + 1):\n        # Calculate the fifth power of the current even number (2 * i)\n        # and add it to the result\n        res += (2 * i) ** 5\n    \n    # Return the final calculated sum\n    return res\n\n# Test the function with the provided test case\nassert even_Power_Sum(2) == 1056", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[1000000]]}], "Mbpp/412": [{"task_id": "Mbpp/412", "solution": "\"\"\"\nWrite a python function to remove odd numbers from a given list.\nassert remove_odd([1,2,3]) == [2]\n\"\"\"\ndef remove_odd(nums):\n    # Use list comprehension to filter out odd numbers\n    return [x for x in nums if x % 2 == 0]\n\n# Test the function with the provided test case\nassert remove_odd([1, 2, 3]) == [2]\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/439": [{"task_id": "Mbpp/439", "solution": "\"\"\"\nWrite a function to join a list of multiple integers into a single integer.\nassert multiple_to_single([11, 33, 50])==113350\n\"\"\"\ndef multiple_to_single(nums):\n    # Convert each integer in the list to a string, concatenate them, and then convert back to an integer\n    result = int(''.join(str(num) for num in nums))\n    return result\n\n# Test the function with the provided test case\nassert multiple_to_single([11, 33, 50]) == 113350\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/413": [{"task_id": "Mbpp/413", "solution": "\"\"\"\nWrite a function to extract the nth element from a given list of tuples.\nassert extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,0)==['Greyson Fulton', 'Brady Kent', 'Wyatt Knott', 'Beau Turnbull']\n\"\"\"\ndef extract_nth_element(test_list, N):\n    # Extract the Nth element from each tuple in the list using list comprehension\n    res = [sub[N] for sub in test_list]\n    return res\n\n# Test the function with the provided test case\nassert extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)], 0) == ['Greyson Fulton', 'Brady Kent', 'Wyatt Knott', 'Beau Turnbull']", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/442": [{"task_id": "Mbpp/442", "solution": "\"\"\"\nWrite a function to find the ration of positive numbers in an array of integers.\nassert positive_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8])==0.54\n\"\"\"\ndef positive_count(arr):\n    # Count the number of positive elements in the array\n    pos = len([x for x in arr if x > 0])\n    \n    # Calculate the ratio of positive numbers\n    return pos / len(arr)\n\n# Test the function with the provided test case\nassert positive_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]) == 0.54", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/426": [{"task_id": "Mbpp/426", "solution": "\"\"\"\nWrite a function to filter odd numbers.\nassert filter_oddnumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1,3,5,7,9]\n\"\"\"\ndef filter_oddnumbers(nums):\n    # Use list comprehension to filter out even numbers and keep only odd numbers\n    return [num for num in nums if num % 2 != 0]\n\n# Test the function with the provided test case\nassert filter_oddnumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 3, 5, 7, 9]\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/428": [{"task_id": "Mbpp/428", "solution": "\"\"\"\nWrite a function to sort the given array by using shell sort.\nassert shell_sort([12, 23, 4, 5, 3, 2, 12, 81, 56, 95]) == [2, 3, 4, 5, 12, 12, 23, 56, 81, 95]\n\"\"\"\ndef shell_sort(arr):\n    # Start with a big gap, then reduce the gap\n    n = len(arr)\n    gap = n // 2\n    \n    while gap > 0:\n        # Do a gapped insertion sort for this gap size.\n        # The first gap elements arr[0..gap-1] are already in gapped order\n        # keep adding one more element until the entire array is gap sorted\n        for i in range(gap, n):\n            temp = arr[i]\n            \n            # shift earlier gap-sorted elements up until the correct location for arr[i] is found\n            j = i\n            while j >= gap and arr[j - gap] > temp:\n                arr[j] = arr[j - gap]\n                j -= gap\n            \n            # put temp (the original arr[i]) in its correct location\n            arr[j] = temp\n        \n        # Reduce gap for next element\n        gap //= 2\n    \n    return arr\n\n# Test the function with the provided test case\nassert shell_sort([12, 23, 4, 5, 3, 2, 12, 81, 56, 95]) == [2, 3, 4, 5, 12, 12, 23, 56, 81, 95]", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/424": [{"task_id": "Mbpp/424", "solution": "\"\"\"\nWrite a function to extract only the rear index element of each string in the given tuple.\nassert extract_rear(('Mers', 'for', 'Vers') ) == ['s', 'r', 's']\n\"\"\"\ndef extract_rear(test_tup):\n    # Using list comprehension to iterate through each string in the tuple\n    res = [ele[-1] for ele in test_tup]\n    return res\n\n# Test the function with the provided test case\nassert extract_rear(('Mers', 'for', 'Vers')) == ['s', 'r', 's']\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/422": [{"task_id": "Mbpp/422", "solution": "\"\"\"\nWrite a python function to find the average of cubes of first n natural numbers.\nassert find_Average_Of_Cube(2) == 4.5\n\"\"\"\ndef find_Average_Of_Cube(n):\n    # Initialize sum to store the sum of cubes of first n natural numbers\n    sum = 0\n    \n    # Loop through each number from 1 to n\n    for i in range(1, n + 1):\n        # Add the cube of the current number to the sum\n        sum += (i ** 3)\n    \n    # Calculate the average by dividing the sum by n\n    avg = sum / n\n    \n    return avg\n\n# Test the function with the provided test case\nassert find_Average_Of_Cube(2) == 4.5", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/414": [{"task_id": "Mbpp/414", "solution": "\"\"\"\nWrite a python function to check whether any value in a sequence exists in a sequence or not.\nassert overlapping([1,2,3,4,5],[6,7,8,9]) == False\n\"\"\"\ndef overlapping(list1, list2):\n    # Check if there is any common element between the two lists\n    return bool(set(list1) & set(list2))\n\n# Test the function with the provided test case\nassert overlapping([1, 2, 3, 4, 5], [6, 7, 8, 9]) == False", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/448": [{"task_id": "Mbpp/448", "solution": "\"\"\"\nWrite a function to calculate the sum of perrin numbers.\nassert cal_sum(9) == 49\n\"\"\"\ndef cal_sum(n):\n    # Initialize the first three Perrin numbers\n    p0 = 3\n    p1 = 0\n    p2 = 2\n    \n    # Base cases for n < 3\n    if n == 0:\n        return p0\n    elif n == 1:\n        return p0 + p1\n    elif n == 2:\n        return p0 + p1 + p2\n    \n    # Calculate the sum of Perrin numbers up to n\n    total = p0 + p1 + p2\n    for i in range(3, n):\n        next_p = p0 + p1 + p2\n        total += next_p\n        p0, p1, p2 = p1, p2, next_p\n    \n    return total\n\n# Test the function with the provided test case\nassert cal_sum(9) == 49", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/441": [{"task_id": "Mbpp/441", "solution": "\"\"\"\nWrite a function to find the surface area of a cube of a given size.\nassert surfacearea_cube(5)==150\n\"\"\"\ndef surfacearea_cube(side):\n    # Calculate the surface area of the cube using the formula 6 * side^2\n    return 6 * (side ** 2)\n\n# Test the function with the provided test case\nassert surfacearea_cube(5) == 150\n", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[1000.99]]}], "Mbpp/433": [{"task_id": "Mbpp/433", "solution": "\"\"\"\nWrite a function to check whether the entered number is greater than the elements of the given array.\nassert check_greater([1, 2, 3, 4, 5], 4) == False\n\"\"\"\ndef check_greater(arr, x):\n    # Iterate through each element in the array\n    for i in arr:\n        # Check if the current element is less than or equal to x\n        if i <= x:\n            return True\n    # If no element is found that is less than or equal to x, return False\n    return False\n\n# Test the function with the provided test case\nassert check_greater([1, 2, 3, 4, 5], 4) == False", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/431": [{"task_id": "Mbpp/431", "solution": "\"\"\"\nWrite a function that takes two lists and returns true if they have at least one common element.\nassert common_element([1,2,3,4,5], [5,6,7,8,9])==True\n\"\"\"\ndef common_element(list1, list2):\n    # Create sets from both lists to remove duplicates and allow for efficient intersection\n    set1 = set(list1)\n    set2 = set(list2)\n    \n    # Check if there is any common element between the two sets\n    if set1.intersection(set2):\n        return True\n    else:\n        return False\n\n# Test the function with the provided test case\nassert common_element([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]) == True", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[[1, 2, 3, [4, 5]], [[4, 5], 6, 7, 8]]]}], "Mbpp/440": [{"task_id": "Mbpp/440", "solution": "\"\"\"\nWrite a function to find the first adverb and their positions in a given sentence.\nassert find_adverb_position(\"clearly!! we can see the sky\")==(0, 7, 'clearly')\n\"\"\"\ndef find_adverb_position(sentence):\n    # Split the sentence into words\n    words = sentence.split()\n    \n    # Iterate through each word in the list of words\n    for i in range(len(words)):\n        # Check if the current word ends with 'ly' which indicates it's an adverb\n        if words[i].endswith('ly'):\n            # Return the position (index) and the word itself\n            return (i, i + len(words[i]), words[i])\n\n# Test the function with the provided test case\nassert find_adverb_position(\"clearly!! we can see the sky\") == (0, 7, 'clearly')", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/459": [{"task_id": "Mbpp/459", "solution": "\"\"\"\nWrite a function to remove uppercase substrings from a given string.\nassert remove_uppercase('cAstyoUrFavoRitETVshoWs') == 'cstyoravoitshos'\n\"\"\"\ndef remove_uppercase(s):\n    # Initialize an empty list to store characters\n    result = []\n    \n    # Iterate through each character in the input string\n    for char in s:\n        # Check if the character is not uppercase\n        if not char.isupper():\n            # If it's not uppercase, append it to the result list\n            result.append(char)\n    \n    # Join the list of characters into a single string and return it\n    return ''.join(result)\n\n# Test the function with the provided test case\nassert remove_uppercase('cAstyoUrFavoRitETVshoWs') == 'cstyoravoitshos'", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [["ThiS%^%!s&a(mY)TesTStR%i*ng"]]}], "Mbpp/450": [{"task_id": "Mbpp/450", "solution": "\"\"\"\nWrite a function to extract specified size of strings from a given list of string values.\nassert extract_string(['Python', 'list', 'exercises', 'practice', 'solution'] ,8)==['practice', 'solution']\n\"\"\"\ndef extract_string(list1, n):\n    # Use list comprehension to filter strings with length equal to n\n    result = [x for x in list1 if len(x) == n]\n    return result\n\n# Test the function with the provided test case\nassert extract_string(['Python', 'list', 'exercises', 'practice', 'solution'], 8) == ['practice', 'solution']\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/432": [{"task_id": "Mbpp/432", "solution": "\"\"\"\nWrite a function to find the median length of a trapezium.\nassert median_trapezium(15,25,35)==20\n\"\"\"\ndef median_trapezium(base_a, base_b, height):\n    # Calculate the median length of the trapezium using the formula\n    median = 0.5 * (base_a + base_b)\n    return median\n\n# Test the function with the provided test case\nassert median_trapezium(15, 25, 35) == 20\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/418": [{"task_id": "Mbpp/418", "solution": "\"\"\"\nWrite a python function to find the element of a list having maximum length.\nassert Find_Max([['A'],['A','B'],['A','B','C']]) == ['A','B','C']\n\"\"\"\ndef Find_Max(test_list):\n    # Use the max function with key=len to find the sublist with the maximum length\n    res = max(test_list, key=len)\n    return res\n\n# Test the function with the provided test case\nassert Find_Max([['A'], ['A', 'B'], ['A', 'B', 'C']]) == ['A', 'B', 'C']", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/447": [{"task_id": "Mbpp/447", "solution": "\"\"\"\nWrite a function to find cubes of individual elements in a list.\nassert cube_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]\n\"\"\"\ndef cube_nums(nums):\n    # Use list comprehension to cube each element in the list\n    return [i ** 3 for i in nums]\n\n# Test the function with the provided test case\nassert cube_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/445": [{"task_id": "Mbpp/445", "solution": "\"\"\"\nWrite a function to perform index wise multiplication of tuple elements in the given two tuples.\nassert index_multiplication(((1, 3), (4, 5), (2, 9), (1, 10)),((6, 7), (3, 9), (1, 1), (7, 3)) ) == ((6, 21), (12, 45), (2, 9), (7, 30))\n\"\"\"\ndef index_multiplication(test_tup1, test_tup2):\n    # Perform index-wise multiplication using zip and map functions\n    res = tuple(map(lambda x, y: (x[0] * y[0], x[1] * y[1]), test_tup1, test_tup2))\n    return res\n\n# Test the function with the provided test case\nassert index_multiplication(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((6, 21), (12, 45), (2, 9), (7, 30))", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/454": [{"task_id": "Mbpp/454", "solution": "\"\"\"\nWrite a function that matches a word containing 'z'.\nassert text_match_wordz(\"pythonz.\")==True\n\"\"\"\nimport re\n\ndef text_match_wordz(text):\n    # Define the pattern to match words containing 'z'\n    pattern = '\\w*z.\\w*'\n    \n    # Use regular expression search to find matches\n    if re.search(pattern,  text):\n        return True\n    else:\n        return False\n\n# Test the function with the provided test case\nassert text_match_wordz(\"pythonz.\") == True", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [["*z"]]}], "Mbpp/446": [{"task_id": "Mbpp/446", "solution": "\"\"\"\nWrite a python function to count the occurence of all elements of list in a tuple.\nassert count_Occurrence(('a', 'a', 'c', 'b', 'd'),['a', 'b'] ) == 3\n\"\"\"\ndef count_Occurrence(test_tup, K):\n    # Initialize result counter\n    res = 0\n    \n    # Iterate through each element in the tuple\n    for ele in test_tup:\n        # Check if the element is in the list K\n        if ele in K:\n            # Increment the result counter\n            res += 1\n            \n    return res\n\n# Test the function with provided data points\nassert count_Occurrence(('a', 'a', 'c', 'b', 'd'), ['a', 'b']) == 3", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[[1, 1, 1, 2, 2, 2, 3, 3, 3], [1, 1, 2, 2, 3, 3]]]}], "Mbpp/461": [{"task_id": "Mbpp/461", "solution": "\"\"\"\nWrite a python function to count the upper case characters in a given string.\nassert upper_ctr('PYthon') == 1\n\"\"\"\ndef upper_ctr(str):\n    # Initialize a counter for uppercase characters\n    ctr = 0\n    \n    # Iterate through each character in the string\n    for i in str:\n        # Check if the character is an uppercase letter\n        if i >= 'A' and i <= 'Z':\n            # Increment the counter if it's an uppercase letter\n            ctr += 1\n            \n    # Return the total count of uppercase characters\n    return ctr\n\n# Test the function with the provided test case\nassert upper_ctr('PYthon') == 1", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/415": [{"task_id": "Mbpp/415", "solution": "\"\"\"\nWrite a python function to find a pair with highest product from a given array of integers.\nassert max_Product([1,2,3,4,7,0,8,4]) == (7,8)\n\"\"\"\ndef max_Product(arr):\n    # Initialize two variables to store the maximum and second maximum elements\n    max1 = float('-inf')\n    max2 = float('-inf')\n    \n    # Iterate through each element in the array\n    for i in range(0, len(arr)):\n        # Update max1 if the current element is greater than max1\n        if arr[i] > max1:\n            max2 = max1  # Update max2 to be the previous max1 value\n            max1 = arr[i]  # Update max1 to be the current element\n        # If the current element is not greater than max1 but is greater than max2\n        elif arr[i] > max2:\n            max2 = arr[i]  # Update max2 to be the current element\n    \n    # Return the product of the two largest elements\n    return (max1, max2)\n\n# Test the function with the provided test case\nassert max_Product([1, 2, 3, 4, 7, 0, 8, 4]) == (7, 8)", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/438": [{"task_id": "Mbpp/438", "solution": "\"\"\"\nWrite a function to count bidirectional tuple pairs.\nassert count_bidirectional([(5, 6), (1, 2), (6, 5), (9, 1), (6, 5), (2, 1)] ) == 3\n\"\"\"\ndef count_bidirectional(test_list):\n    # Initialize a counter for bidirectional pairs\n    res = 0\n    \n    # Iterate through each pair in the list\n    for ele in test_list:\n        # Check if there exists a reverse pair in the list\n        if (ele[1], ele[0]) in test_list:\n            res += 1\n    \n    return res\n\n# Test the function with the provided test case\nassert count_bidirectional([(5, 6), (1, 2), (6, 5), (9, 1), (6, 5), (2, 1)]) == 3", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/468": [{"task_id": "Mbpp/468", "solution": "\"\"\"\nWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nassert max_product([3, 100, 4, 5, 150, 6]) == 3000\n\"\"\"\ndef max_product(arr):\n    n = len(arr)\n    \n    # Initialize the list to store the maximum product subsequence ending at each index\n    dp = [0] * n\n    \n    # The maximum product subsequence for any single element is the element itself\n    for i in range(n):\n        dp[i] = arr[i]\n    \n    # Iterate through the array to fill the dp array\n    for i in range(1, n):\n        for j in range(i):\n            # Check if the current element forms an increasing subsequence with the previous elements\n            if arr[i] > arr[j]:\n                # Update the dp value to be the maximum product found so far\n                dp[i] = max(dp[i], dp[j] * arr[i])\n    \n    # Return the maximum value from the dp array, which represents the maximum product subsequence\n    return max(dp)\n\n# Test the function with the provided test case\nassert max_product([3, 100, 4, 5, 150, 6]) == 3000", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/436": [{"task_id": "Mbpp/436", "solution": "\"\"\"\nWrite a python function to return the negative numbers in a list.\nassert neg_nos([-1,4,5,-6]) == [-1,-6]\n\"\"\"\ndef neg_nos(nums):\n    # Use list comprehension to filter out negative numbers from the list\n    return [num for num in nums if num < 0]\n\n# Test the function with the provided test case\nassert neg_nos([-1, 4, 5, -6]) == [-1, -6]\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/421": [{"task_id": "Mbpp/421", "solution": "\"\"\"\nWrite a function to concatenate each element of tuple by the delimiter.\nassert concatenate_tuple((\"ID\", \"is\", 4, \"UTS\") ) == 'ID-is-4-UTS'\n\"\"\"\ndef concatenate_tuple(test_tup):\n    # Convert all elements in the tuple to strings and join them using '-'\n    res = '-'.join(str(ele) for ele in test_tup)\n    return res\n\n# Test the function with the provided test case\nassert concatenate_tuple((\"ID\", \"is\", 4, \"UTS\")) == 'ID-is-4-UTS'", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/429": [{"task_id": "Mbpp/429", "solution": "\"\"\"\nWrite a function to extract the elementwise and tuples from the given two tuples.\nassert and_tuples((10, 4, 6, 9), (5, 2, 3, 3)) == (0, 0, 2, 1)\n\"\"\"\ndef and_tuples(test_tup1, test_tup2):\n    # Initialize an empty list to store results\n    res = []\n    \n    # Iterate over pairs of elements from both tuples using zip\n    for ele1, ele2 in zip(test_tup1, test_tup2):\n        # Calculate the AND operation on each pair and append to the result list\n        res.append(ele1 & ele2)\n    \n    # Convert the result list back to a tuple and return it\n    return tuple(res)\n\n# Test the function with the provided test case\nassert and_tuples((10, 4, 6, 9), (5, 2, 3, 3)) == (0, 0, 2, 1)\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/455": [{"task_id": "Mbpp/455", "solution": "\"\"\"\nWrite a function to check whether the given month number contains 31 days or not.\nassert check_monthnumb_number(5)==True\n\"\"\"\ndef check_monthnumb_number(month):\n    # Check if the month has 31 days\n    if month == 1 or month == 3 or month == 5 or month == 7 or month == 8 or month == 10 or month == 12:\n        return True\n    else:\n        return False\n\n# Test the function with the provided test case\nassert check_monthnumb_number(5) == True\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/430": [{"task_id": "Mbpp/430", "solution": "\"\"\"\nWrite a function to find the directrix of a parabola.\nassert parabola_directrix(5,3,2)==-198\n\"\"\"\ndef parabola_directrix(a, b, c):\n    # Calculate the directrix using the formula: -b^2 + 4ac\n    return -b**2 + 4*a*c\n\n# Test the function with the provided test case\nassert parabola_directrix(5, 3, 2) == -198", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/437": [{"task_id": "Mbpp/437", "solution": "\"\"\"\nWrite a function to remove odd characters in a string.\nassert remove_odd(\"python\")==(\"yhn\")\n\"\"\"\ndef remove_odd(s):\n    # Initialize an empty string to store even-indexed characters\n    s1 = \"\"\n    \n    # Iterate over the string using enumerate to get both index and character\n    for i, c in enumerate(s):\n        # Check if the index is even (i.e., character position is even)\n        if i % 2 == 0:\n            # Append the character at even index to the new string\n            s1 += c\n    \n    # Return the string containing only even-indexed characters\n    return s1\n\n# Test the function with the provided test case\nassert remove_odd(\"python\") == \"yhn\"\n", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/425": [{"task_id": "Mbpp/425", "solution": "\"\"\"\nWrite a function to count the number of sublists containing a particular element.\nassert count_element_in_list([[1, 3], [5, 7], [1, 11], [1, 15, 7]],1)==3\n\"\"\"\ndef count_element_in_list(lists, x):\n    # Initialize counter to zero\n    count = 0\n    \n    # Iterate through each sublist in the list\n    for sublist in lists:\n        # Check if the element 'x' is in the current sublist\n        if x in sublist:\n            # Increment the counter if the element is found\n            count += 1\n            \n    # Return the total count of sublists containing the element 'x'\n    return count\n\n# Test the function with the provided test case\nassert count_element_in_list([[1, 3], [5, 7], [1, 11], [1, 15, 7]], 1) == 3", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/419": [{"task_id": "Mbpp/419", "solution": "\"\"\"\nWrite a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\nassert round_and_sum([22.4, 4.0, -16.22, -9.10, 11.00, -12.22, 14.20, -5.20, 17.50])==243\n\"\"\"\ndef round_and_sum(nums):\n    # Calculate the length of the list\n    n = len(nums)\n    \n    # Round each number in the list and calculate the sum\n    total_sum = sum(round(x) for x in nums)\n    \n    # Multiply the total sum by the length of the list and return it\n    return total_sum * n\n\n# Test the function with the provided test case\nassert round_and_sum([22.4, 4.0, -16.22, -9.10, 11.00, -12.22, 14.20, -5.20, 17.50]) == 243", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/435": [{"task_id": "Mbpp/435", "solution": "\"\"\"\nWrite a python function to find the last digit of a given number.\nassert last_Digit(123) == 3\n\"\"\"\ndef last_Digit(n):\n    # Use modulo operator to get the last digit of the number\n    return n % 10\n\n# Test the function with the provided test case\nassert last_Digit(123) == 3\n", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/479": [{"task_id": "Mbpp/479", "solution": "\"\"\"\nWrite a python function to find the first digit of a given number.\nassert first_Digit(123) == 1\n\"\"\"\ndef first_Digit(n):\n    # Loop until n has only one digit\n    while n >= 10:\n        n = int(n / 10)\n    return n\n\n# Test the function with the provided test case\nassert first_Digit(123) == 1\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/473": [{"task_id": "Mbpp/473", "solution": "\"\"\"\nWrite a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\nassert tuple_intersection([(3, 4), (5, 6), (9, 10), (4, 5)] , [(5, 4), (3, 4), (6, 5), (9, 11)]) == {(4, 5), (3, 4), (5, 6)}\n\"\"\"\ndef tuple_intersection(test_list1, test_list2):\n    # Convert each tuple in both lists to a sorted tuple to ensure order doesn't matter\n    res = set(map(tuple, map(sorted, test_list1))) & set(map(tuple, map(sorted, test_list2)))\n    return res\n\n# Test the function with the provided test case\nassert tuple_intersection([(3, 4), (5, 6), (9, 10), (4, 5)], [(5, 4), (3, 4), (6, 5), (9, 11)]) == {(4, 5), (3, 4), (5, 6)}", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/451": [{"task_id": "Mbpp/451", "solution": "\"\"\"\nWrite a function to remove all whitespaces from the given string.\nassert remove_whitespaces(' Google    Flutter ') == 'GoogleFlutter'\n\"\"\"\ndef remove_whitespaces(s):\n    # Use the replace method to remove all whitespace characters from the string\n    return s.replace(\" \", \"\")\n\n# Test the function with the provided test case\nassert remove_whitespaces(' Google    Flutter ') == 'GoogleFlutter'\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/470": [{"task_id": "Mbpp/470", "solution": "\"\"\"\nWrite a function to find the pairwise addition of the neighboring elements of the given tuple.\nassert add_pairwise((1, 5, 7, 8, 10)) == (6, 12, 15, 18)\n\"\"\"\ndef add_pairwise(test_tup):\n    # Use list comprehension to iterate through pairs of consecutive elements\n    res = tuple(x + y for x, y in zip(test_tup[:-1], test_tup[1:]))\n    return res\n\n# Test the function with the provided test case\nassert add_pairwise((1, 5, 7, 8, 10)) == (6, 12, 15, 18)\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/420": [{"task_id": "Mbpp/420", "solution": "\"\"\"\nWrite a python function to find the cube sum of first n even natural numbers.\nassert cube_Sum(2) == 72\n\"\"\"\ndef cube_Sum(n):\n    # Initialize the result variable to store the sum of cubes\n    res = 0\n    \n    # Iterate through the first n even natural numbers\n    for i in range(1, n + 1):\n        # Calculate the cube of each even number and add it to the result\n        res += (2 * i) ** 3\n    \n    # Return the final result\n    return res\n\n# Test the function with the provided test case\nassert cube_Sum(2) == 72\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/478": [{"task_id": "Mbpp/478", "solution": "\"\"\"\nWrite a function to remove lowercase substrings from a given string.\nassert remove_lowercase(\"PYTHon\")==('PYTH')\n\"\"\"\ndef remove_lowercase(s):\n    # Use list comprehension to filter out lowercase characters\n    result = ''.join([i for i in s if i.isupper()])\n    return result\n\n# Test the function with the provided test case\nassert remove_lowercase(\"PYTHon\") == 'PYTH'\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/476": [{"task_id": "Mbpp/476", "solution": "\"\"\"\nWrite a python function to find the sum of the largest and smallest value in a given array.\nassert big_sum([1,2,3]) == 4\n\"\"\"\ndef big_sum(arr):\n    # Find the maximum and minimum values in the array\n    max_val = max(arr)\n    min_val = min(arr)\n    \n    # Return the sum of the maximum and minimum values\n    return max_val + min_val\n\n# Test the function with the provided test case\nassert big_sum([1, 2, 3]) == 4", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/456": [{"task_id": "Mbpp/456", "solution": "\"\"\"\nWrite a function to reverse each string in a given list of string values.\nassert reverse_string_list(['Red', 'Green', 'Blue', 'White', 'Black'])==['deR', 'neerG', 'eulB', 'etihW', 'kcalB']\n\"\"\"\ndef reverse_string_list(string_list):\n    # Reverse each string in the list using list comprehension\n    reversed_strings = [s[::-1] for s in string_list]\n    return reversed_strings\n\n# Test the function with the provided test case\nassert reverse_string_list(['Red', 'Green', 'Blue', 'White', 'Black']) == ['deR', 'neerG', 'eulB', 'etihW', 'kcalB']\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/471": [{"task_id": "Mbpp/471", "solution": "\"\"\"\nWrite a python function to find the product of the array multiplication modulo n.\nassert find_remainder([ 100, 10, 5, 25, 35, 14 ],11) ==9\n\"\"\"\ndef find_remainder(arr, n):\n    # Initialize result as 1\n    res = 1\n    \n    # Iterate through each element in the array\n    for i in range(len(arr)):\n        # Update result by multiplying it with the current element modulo n\n        res = (res * arr[i]) % n\n    \n    # Return the final result modulo n\n    return res\n\n# Test the function with the provided test case\nassert find_remainder([100, 10, 5, 25, 35, 14], 11) == 9", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/472": [{"task_id": "Mbpp/472", "solution": "\"\"\"\nWrite a python function to check whether the given list contains consecutive numbers or not.\nassert check_Consecutive([1,2,3,4,5]) == True\n\"\"\"\ndef check_Consecutive(nums):\n    # Check if the length of the list is 0 or 1, return True as they are trivially consecutive\n    if len(nums) <= 1:\n        return True\n    \n    # Sort the list to ensure consecutive order\n    nums.sort()\n    \n    # Iterate through the sorted list and check for consecutive elements\n    for i in range(len(nums) - 1):\n        # If any two adjacent elements differ by more than 1, return False\n        if nums[i + 1] - nums[i] > 1:\n            return False\n    \n    # If no non-consecutive elements were found, return True\n    return True\n\n# Test the function with the provided test case\nassert check_Consecutive([1, 2, 3, 4, 5]) == True", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[1, 2, 1]]], "plus_fail_tests": [[[4, 3, 3, 4, 5, 2]]]}], "Mbpp/463": [{"task_id": "Mbpp/463", "solution": "\"\"\"\nWrite a function to find the maximum product subarray of the given array.\nassert max_subarray_product([1, -2, -3, 0, 7, -8, -2]) == 112\n\"\"\"\ndef max_subarray_product(arr):\n    # Initialize variables to store the maximum product so far, minimum product so far,\n    # and the current product (which resets at each iteration)\n    max_so_far = arr[0]\n    min_so_far = arr[0]\n    curr_max = arr[0]\n\n    # Iterate through the array starting from the second element\n    for i in range(1, len(arr)):\n        # If the current number is negative, swap the max and min values\n        if arr[i] < 0:\n            max_so_far, min_so_far = min_so_far, max_so_far\n\n        # Update the current maximum and minimum products\n        curr_max = max(arr[i], curr_max * arr[i])\n        min_so_far = min(arr[i], min_so_far * arr[i])\n\n        # Update the overall maximum product found so far\n        max_so_far = max(max_so_far, curr_max)\n\n    return max_so_far\n\n# Test the function with the provided test case\nassert max_subarray_product([1, -2, -3, 0, 7, -8, -2]) == 112", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/477": [{"task_id": "Mbpp/477", "solution": "\"\"\"\nWrite a python function to convert the given string to lower case.\nassert is_lower(\"InValid\") == \"invalid\"\n\"\"\"\ndef is_lower(string):\n    # Check if all characters in the string are lowercase\n    return string.islower()\n\n# Test the function with the provided test case\nassert is_lower(\"InValid\") == \"invalid\"\n", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/427": [{"task_id": "Mbpp/427", "solution": "\"\"\"\nWrite a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nassert change_date_format(\"2026-01-02\") == '02-01-2026'\n\"\"\"\ndef change_date_format(date):\n    # Split the input date string into parts using '-'\n    date_parts = date.split('-')\n    \n    # Reorder the parts to match the desired output format (dd-mm-yyyy)\n    formatted_date = date_parts[2] + '-' + date_parts[1] + '-' + date_parts[0]\n    \n    return formatted_date\n\n# Test the function with the provided test case\nassert change_date_format(\"2026-01-02\") == '02-01-2026'\n", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/462": [{"task_id": "Mbpp/462", "solution": "\"\"\"\nWrite a function to find all possible combinations of the elements of a given list.\nassert combinations_list(['orange', 'red', 'green', 'blue'])==[[], ['orange'], ['red'], ['red', 'orange'], ['green'], ['green', 'orange'], ['green', 'red'], ['green', 'red', 'orange'], ['blue'], ['blue', 'orange'], ['blue', 'red'], ['blue', 'red', 'orange'], ['blue', 'green'], ['blue', 'green', 'orange'], ['blue', 'green', 'red'], ['blue', 'green', 'red', 'orange']]\n\"\"\"\ndef combinations_list(colors):\n    # Initialize an empty list to store all combinations\n    result = []\n    \n    # Iterate over each color in the input list\n    for i in range(len(colors)):\n        # For each color, iterate over the current result list\n        for j in range(len(result)):\n            # Append the current combination with the new color\n            result.append(result[j] + [colors[i]])\n        # Add the single-color combination to the result list\n        result.append([colors[i]])\n    \n    return result\n\n# Test the function with the provided test case\nassert combinations_list(['orange', 'red', 'green', 'blue']) == [\n    [], ['orange'], ['red'], ['red', 'orange'], ['green'],\n    ['green', 'orange'], ['green', 'red'], ['green', 'red', 'orange'],\n    ['blue'], ['blue', 'orange'], ['blue', 'red'], ['blue', 'red', 'orange'],\n    ['blue', 'green'], ['blue', 'green', 'orange'], ['blue', 'green', 'red'],\n    ['blue', 'green', 'red', 'orange']\n]", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/555": [{"task_id": "Mbpp/555", "solution": "\"\"\"\nWrite a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\nassert difference(3) == 30\n\"\"\"\ndef difference(n):\n    # Calculate the sum of the first n natural numbers\n    sum_n = (n * (n + 1)) // 2\n    \n    # Calculate the sum of cubes of the first n natural numbers\n    sum_cube = (n * (n + 1) // 2) ** 2\n    \n    # Return the difference between the sum of cubes and the sum of the first n natural numbers\n    return sum_cube - sum_n\n\n# Test the function with the provided test case\nassert difference(3) == 30\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/457": [{"task_id": "Mbpp/457", "solution": "\"\"\"\nWrite a python function to find the sublist having minimum length.\nassert Find_Min([[1],[1,2],[1,2,3]]) == [1]\n\"\"\"\ndef Find_Min(lst):\n    # Use the min function with key=len to find the sublist with the minimum length\n    return min(lst, key=len)\n\n# Test the function with the provided test case\nassert Find_Min([[1], [1, 2], [1, 2, 3]]) == [1]\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/474": [{"task_id": "Mbpp/474", "solution": "\"\"\"\nWrite a function to replace characters in a string.\nassert replace_char(\"polygon\",'y','l')==(\"pollgon\")\n\"\"\"\ndef replace_char(str1, old_char, new_char):\n    # Replace occurrences of old_char with new_char in str1\n    return str1.replace(old_char, new_char)\n\n# Test the function with the provided test case\nassert replace_char(\"polygon\", 'y', 'l') == \"pollgon\"\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/458": [{"task_id": "Mbpp/458", "solution": "\"\"\"\nWrite a function to find the area of a rectangle.\nassert rectangle_area(10,20)==200\n\"\"\"\ndef rectangle_area(length, width):\n    # Calculate the area of the rectangle using the formula: length * width\n    return length * width\n\n# Test the function with the provided test case\nassert rectangle_area(10, 20) == 200\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/460": [{"task_id": "Mbpp/460", "solution": "\"\"\"\nWrite a python function to get the first element of each sublist.\nassert Extract([[1, 2], [3, 4, 5], [6, 7, 8, 9]]) == [1, 3, 6]\n\"\"\"\ndef Extract(lst):\n    # Use list comprehension to iterate through each sublist and extract the first element\n    return [sublist[0] for sublist in lst]\n\n# Test the function with the provided test case\nassert Extract([[1, 2], [3, 4, 5], [6, 7, 8, 9]]) == [1, 3, 6]\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/556": [{"task_id": "Mbpp/556", "solution": "\"\"\"\nWrite a python function to count the number of pairs whose xor value is odd.\nassert find_Odd_Pair([5,4,7,2,1],5) == 6\n\"\"\"\ndef find_Odd_Pair(arr, n):\n    # Initialize result variable\n    res = 0\n    \n    # Iterate through all elements in the array\n    for i in range(0, n - 1):\n        for j in range(i + 1, n):\n            # Check if XOR of current pair is odd\n            if ((arr[i] ^ arr[j]) & 1):\n                res += 1\n                \n    return res\n\n# Test the function with the provided test case\nassert find_Odd_Pair([5, 4, 7, 2, 1], 5) == 6", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/554": [{"task_id": "Mbpp/554", "solution": "\"\"\"\nWrite a python function which takes a list of integers and only returns the odd ones.\nassert Split([1,2,3,4,5,6]) == [1,3,5]\n\"\"\"\ndef Split(lst):\n    # Use list comprehension to filter out even numbers and keep only odd numbers\n    return [i for i in lst if i % 2 != 0]\n\n# Test the function with the provided test case\nassert Split([1, 2, 3, 4, 5, 6]) == [1, 3, 5]\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/465": [{"task_id": "Mbpp/465", "solution": "\"\"\"\nWrite a function to drop empty items from a given dictionary.\nassert drop_empty({'c1': 'Red', 'c2': 'Green', 'c3':None})=={'c1': 'Red', 'c2': 'Green'}\n\"\"\"\ndef drop_empty(dict):\n    # Use dictionary comprehension to filter out None values\n    return {key: value for key, value in dict.items() if value is not None}\n\n# Test the function with the provided test case\nassert drop_empty({'c1': 'Red', 'c2': 'Green', 'c3': None}) == {'c1': 'Red', 'c2': 'Green'}\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/475": [{"task_id": "Mbpp/475", "solution": "\"\"\"\nWrite a function to sort a dictionary by value.\nassert sort_counter({'Math':81, 'Physics':83, 'Chemistry':87})==[('Chemistry', 87), ('Physics', 83), ('Math', 81)]\n\"\"\"\ndef sort_counter(dict):\n    # Sort the dictionary by its values using sorted() function and lambda as key\n    return sorted(dict.items(), key=lambda x: x[1])\n\n# Test the function with the provided test case\nassert sort_counter({'Math': 81, 'Physics': 83, 'Chemistry': 87}) == [('Chemistry', 87), ('Physics', 83), ('Math', 81)]\n", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/389": [{"task_id": "Mbpp/389", "solution": "\"\"\"\nWrite a function to find the n'th lucas number.\nassert find_lucas(9) == 76\n\"\"\"\ndef find_lucas(n):\n    # Base case: if n is 0, return 2 (first lucas number)\n    if n == 0:\n        return 2\n    # Base case: if n is 1, return 1 (second lucas number)\n    elif n == 1:\n        return 1\n    else:\n        # Recursive call to calculate the nth lucas number using the formula L(n) = L(n-1) + L(n-2)\n        return find_lucas(n - 1) + find_lucas(n - 2)\n\n# Test the function with the provided test case\nassert find_lucas(9) == 76\n", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[30]]}], "Mbpp/557": [{"task_id": "Mbpp/557", "solution": "\"\"\"\nWrite a function to toggle the case of all characters in a string.\nassert toggle_string(\"Python\")==(\"pYTHON\")\n\"\"\"\ndef toggle_string(s):\n    # Initialize an empty list to store the toggled characters\n    result = []\n    \n    # Iterate over each character in the input string\n    for char in s:\n        # Check if the character is uppercase\n        if char.isupper():\n            # Convert to lowercase and add to the result list\n            result.append(char.lower())\n        else:\n            # Convert to uppercase and add to the result list\n            result.append(char.upper())\n    \n    # Join the list into a string and return it\n    return ''.join(result)\n\n# Test the function with the provided test case\nassert toggle_string(\"Python\") == \"pYTHON\"\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/562": [{"task_id": "Mbpp/562", "solution": "\"\"\"\nWrite a python function to find the length of the longest sublists.\nassert Find_Max_Length([[1],[1,4],[5,6,7,8]]) == 4\n\"\"\"\ndef Find_Max_Length(lst):\n    # Use the max function along with a list comprehension to find the maximum length of sublists\n    return max(len(x) for x in lst)\n\n# Test the function with the provided test case\nassert Find_Max_Length([[1], [1, 4], [5, 6, 7, 8]]) == 4\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/558": [{"task_id": "Mbpp/558", "solution": "\"\"\"\nWrite a python function to find the sum of the per-digit difference between two integers.\nassert digit_distance_nums(1,2) == 1\n\"\"\"\ndef digit_distance_nums(num1, num2):\n    # Convert both numbers to strings to easily iterate over each digit\n    str_num1 = str(abs(num1))\n    str_num2 = str(abs(num2))\n    \n    # Initialize the sum variable\n    sum_diff = 0\n    \n    # Iterate over each digit in the longer string\n    for i in range(max(len(str_num1), len(str_num2))):\n        # Get the digit from the first number, or '0' if it's out of bounds\n        digit1 = int(str_num1[i] if i < len(str_num1) else '0')\n        # Get the digit from the second number, or '0' if it's out of bounds\n        digit2 = int(str_num2[i] if i < len(str_num2) else '0')\n        \n        # Add the absolute difference of the digits to the sum\n        sum_diff += abs(digit1 - digit2)\n    \n    return sum_diff\n\n# Test the function with the provided test case\nassert digit_distance_nums(1, 2) == 1", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[12345, 9]]}], "Mbpp/559": [{"task_id": "Mbpp/559", "solution": "\"\"\"\nWrite a function to find the sum of the largest contiguous sublist in the given list.\nassert max_sub_array_sum([-2, -3, 4, -1, -2, 1, 5, -3], 8) == 7\n\"\"\"\ndef max_sub_array_sum(a, size):\n    # Initialize variables to store the maximum sum so far and the current sum\n    max_so_far = float('-inf')\n    curr_max = 0\n    \n    for i in range(0, size):\n        # Update the current sum by adding the current element\n        curr_max = curr_max + a[i]\n        \n        # If the current sum is greater than the maximum sum, update the maximum sum\n        if (max_so_far < curr_max):\n            max_so_far = curr_max\n        \n        # If the current sum becomes negative, reset it to zero\n        if curr_max < 0:\n            curr_max = 0\n    \n    return max_so_far\n\n# Test the function with the provided test case\nassert max_sub_array_sum([-2, -3, 4, -1, -2, 1, 5, -3], 8) == 7", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/563": [{"task_id": "Mbpp/563", "solution": "\"\"\"\nWrite a function to extract values between quotation marks from a string.\nassert extract_values('\"Python\", \"PHP\", \"Java\"')==['Python', 'PHP', 'Java']\n\"\"\"\ndef extract_values(string):\n    # Split the input string by commas and then strip any leading/trailing whitespace or quotes\n    return [i.strip(' ,').strip(\"'\\\"\") for i in string.split(',')]\n\n# Test the function with the provided test case\nassert extract_values('\"Python\", \"PHP\", \"Java\"') == ['Python', 'PHP', 'Java']\n", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/582": [{"task_id": "Mbpp/582", "solution": "\"\"\"\nWrite a function to check if a dictionary is empty\nassert my_dict({10})==False\n\"\"\"\ndef my_dict(dict):\n    # Check if the dictionary is empty using the len() function\n    return not bool(len(dict))\n\n# Test the function with the provided test case\nassert my_dict({10}) == False\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/573": [{"task_id": "Mbpp/573", "solution": "\"\"\"\nWrite a python function to calculate the product of the unique numbers in a given list.\nassert unique_product([10, 20, 30, 40, 20, 50, 60, 40]) ==  720000000\n\"\"\"\ndef unique_product(nums):\n    # Initialize the product variable to 1 (since multiplying by 1 has no effect)\n    product = 1\n    \n    # Iterate through each number in the list\n    for num in nums:\n        # Check if the number appears only once in the list\n        if nums.count(num) == 1:\n            # Multiply the product by the unique number\n            product *= num\n    \n    # Return the final product of all unique numbers\n    return product\n\n# Test the function with the provided test case\nassert unique_product([10, 20, 30, 40, 20, 50, 60, 40]) == 720000000\n", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/560": [{"task_id": "Mbpp/560", "solution": "\"\"\"\nWrite a function to find the union of the elements of two given tuples and output them in sorted order.\nassert union_elements((3, 4, 5, 6),(5, 7, 4, 10) ) == (3, 4, 5, 6, 7, 10)\n\"\"\"\ndef union_elements(test_tup1, test_tup2):\n    # Combine both tuples using set union and convert back to tuple\n    res = tuple(sorted(set(test_tup1) | set(test_tup2)))\n    return res\n\n# Test the function with the provided test case\nassert union_elements((3, 4, 5, 6), (5, 7, 4, 10)) == (3, 4, 5, 6, 7, 10)\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/583": [{"task_id": "Mbpp/583", "solution": "\"\"\"\nWrite a function which returns nth catalan number.\nassert catalan_number(10)==16796\n\"\"\"\ndef catalan_number(n):\n    # Initialize an array to store the Catalan numbers up to n\n    C = [0] * (n + 1)\n    \n    # Base cases for the first two Catalan numbers\n    C[0] = 1\n    if n > 0:\n        C[1] = 1\n    \n    # Calculate the remaining Catalan numbers using the recursive formula\n    for i in range(2, n + 1):\n        for j in range(i):\n            C[i] += C[j] * C[i - j - 1]\n    \n    # Return the nth Catalan number\n    return C[n]\n\n# Test the function with the provided test case\nassert catalan_number(10) == 16796\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/564": [{"task_id": "Mbpp/564", "solution": "\"\"\"\nWrite a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\nassert count_Pairs([1,2,1],3) == 2\n\"\"\"\ndef count_Pairs(arr, n):\n    # Initialize a counter for unequal pairs\n    cnt = 0\n    \n    # Iterate through each element in the array\n    for i in range(n):\n        # Compare the current element with all subsequent elements\n        for j in range(i + 1, n):\n            # If the elements are not equal, increment the counter\n            if arr[i] != arr[j]:\n                cnt += 1\n                \n    return cnt\n\n# Test the function with the provided test case\nassert count_Pairs([1, 2, 1], 3) == 2", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/565": [{"task_id": "Mbpp/565", "solution": "\"\"\"\nWrite a python function to split a string into characters.\nassert split('python') == ['p','y','t','h','o','n']\n\"\"\"\ndef split(string):\n    # Splitting the string into a list of characters\n    return list(string)\n\n# Test the function with the provided test case\nassert split('python') == ['p', 'y', 't', 'h', 'o', 'n']\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/580": [{"task_id": "Mbpp/580", "solution": "\"\"\"\nWrite a function to remove uneven elements in the nested mixed tuple.\nassert extract_even((4, 5, (7, 6, (2, 4)), 6, 8)) == (4, (6, (2, 4)), 6, 8)\n\"\"\"\ndef extract_even(test_tup):\n    # Recursively filter out odd numbers from the nested tuple\n    res = tuple(filter(lambda ele: ele % 2 == 0, test_tup))\n    \n    # Iterate through each element in the result tuple\n    for ele in res:\n        if isinstance(ele, tuple):\n            # Recursively call the function if the element is a tuple\n            res = tuple(map(extract_even, [ele]))\n    \n    return res\n\n# Test the function with the provided test case\nassert extract_even((4, 5, (7, 6, (2, 4)), 6, 8)) == (4, (6, (2, 4)), 6, 8)", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/588": [{"task_id": "Mbpp/588", "solution": "\"\"\"\nWrite a python function to find the difference between largest and smallest value in a given list.\nassert big_diff([1,2,3,4]) == 3\n\"\"\"\ndef big_diff(nums):\n    # Calculate the maximum value in the list\n    max_value = max(nums)\n    \n    # Calculate the minimum value in the list\n    min_value = min(nums)\n    \n    # Return the difference between the maximum and minimum values\n    return max_value - min_value\n\n# Test the function with the provided test case\nassert big_diff([1, 2, 3, 4]) == 3", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/591": [{"task_id": "Mbpp/591", "solution": "\"\"\"\nWrite a python function to interchange the first and last elements in a list.\nassert swap_List([12, 35, 9, 56, 24]) == [24, 35, 9, 56, 12]\n\"\"\"\ndef swap_List(list):\n    # Store the first element in a temporary variable\n    temp = list[0]\n    # Assign the last element to the first position\n    list[0] = list[-1]\n    # Assign the value stored in the temporary variable to the last position\n    list[-1] = temp\n    return list\n\n# Test the function with the provided test case\nassert swap_List([12, 35, 9, 56, 24]) == [24, 35, 9, 56, 12]", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/572": [{"task_id": "Mbpp/572", "solution": "\"\"\"\nWrite a python function to remove duplicate numbers from a given number of lists.\nassert two_unique_nums([1,2,3,2,3,4,5]) == [1, 4, 5]\n\"\"\"\ndef two_unique_nums(nums):\n    # Use set to remove duplicates and then convert back to list\n    return list(set(nums))\n\n# Test the function with the provided test case\nassert two_unique_nums([1, 2, 3, 2, 3, 4, 5]) == [1, 4, 5]\n", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/581": [{"task_id": "Mbpp/581", "solution": "\"\"\"\nWrite a python function to find the surface area of a square pyramid with a given base edge and height.\nassert surface_Area(3,4) == 33\n\"\"\"\ndef surface_Area(base_edge, height):\n    # Calculate the slant height using Pythagorean theorem\n    slant_height = ((base_edge / 2) ** 2 + height ** 2) ** 0.5\n    \n    # Calculate the lateral surface area (area of four triangular faces)\n    lateral_surface_area = 2 * base_edge * slant_height\n    \n    # Calculate the base area\n    base_area = base_edge ** 2\n    \n    # Calculate the total surface area\n    total_surface_area = lateral_surface_area + base_area\n    \n    return total_surface_area\n\n# Test the function with the provided test case\nassert surface_Area(3, 4) == 33", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/586": [{"task_id": "Mbpp/586", "solution": "\"\"\"\nWrite a python function to split a list at the nth eelment and add the first part to the end.\nassert split_Arr([12,10,5,6,52,36],2) == [5,6,52,36,12,10]\n\"\"\"\ndef split_Arr(arr, n):\n    # Split the array into two parts at index n\n    arr = arr[n:] + arr[:n]\n    return arr\n\n# Test the function with the provided test case\nassert split_Arr([12, 10, 5, 6, 52, 36], 2) == [5, 6, 52, 36, 12, 10]", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/568": [{"task_id": "Mbpp/568", "solution": "\"\"\"\nWrite a function to create a list of N empty dictionaries.\nassert empty_list(5)==[{},{},{},{},{}]\n\"\"\"\ndef empty_list(N):\n    # Create a list of N empty dictionaries using list comprehension\n    return [{} for i in range(N)]\n\n# Test the function with the provided test case\nassert empty_list(5) == [{}, {}, {}, {}, {}]\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/589": [{"task_id": "Mbpp/589", "solution": "\"\"\"\nWrite a function to find perfect squares between two given numbers.\nassert perfect_squares(1,30)==[1, 4, 9, 16, 25]\n\"\"\"\ndef perfect_squares(start, end):\n    # Initialize an empty list to store perfect squares\n    res = []\n    \n    # Iterate through the range from start to end (inclusive)\n    for i in range(start, end + 1):\n        # Check if the square root of the number is an integer\n        if int(i ** 0.5) ** 2 == i:\n            # If it is, append the number to the result list\n            res.append(i)\n    \n    # Return the list of perfect squares\n    return res\n\n# Test the function with the provided test case\nassert perfect_squares(1, 30) == [1, 4, 9, 16, 25]", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/620": [{"task_id": "Mbpp/620", "solution": "\"\"\"\nWrite a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\nassert largest_subset([ 1, 3, 6, 13, 17, 18 ]) == 4\n\"\"\"\ndef largest_subset(arr):\n    n = len(arr)\n    \n    # Initialize dp array where dp[i] will store the size of the largest subset ending at index i\n    dp = [1] * n\n    \n    # Iterate over each element in the array\n    for i in range(n):\n        # Check all previous elements to see if they form a valid subset with arr[i]\n        for j in range(i):\n            # If arr[j] divides arr[i], update dp[i]\n            if arr[i] % arr[j] == 0:\n                dp[i] = max(dp[i], dp[j] + 1)\n    \n    # The result is the maximum value in the dp array\n    return max(dp)\n\n# Test the function with the provided test case\nassert largest_subset([1, 3, 6, 13, 17, 18]) == 4", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[10, 5, 3, 15, 20]]], "plus_fail_tests": [[[9, 4, 12, 7, 16, 3, 11, 8, 5, 13]]]}], "Mbpp/574": [{"task_id": "Mbpp/574", "solution": "\"\"\"\nWrite a function to find the surface area of a cylinder.\nassert surfacearea_cylinder(10,5)==942.45\n\"\"\"\ndef surfacearea_cylinder(r, h):\n    # Calculate the surface area of the cylinder using the formula 2 * pi * r * (r + h)\n    return 2 * 3.1415 * r * (r + h)\n\n# Test the function with the provided test case\nassert surfacearea_cylinder(10, 5) == 942.45\n", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/594": [{"task_id": "Mbpp/594", "solution": "\"\"\"\nWrite a function to find the difference of the first even and first odd number of a given list.\nassert diff_even_odd([1,3,5,7,4,1,6,8])==3\n\"\"\"\ndef diff_even_odd(numbers):\n    # Initialize variables to store the first even and first odd numbers\n    first_even = None\n    first_odd = None\n    \n    # Iterate through each number in the list\n    for num in numbers:\n        if first_even is None and num % 2 == 0:  # Check if it's the first even number\n            first_even = num\n        elif first_odd is None and num % 2 != 0:  # Check if it's the first odd number\n            first_odd = num\n        if first_even is not None and first_odd is not None:  # If both have been found, break the loop\n            break\n    \n    # Return the difference between the first even and first odd number\n    return first_even - first_odd\n\n# Test the function with the provided test case\nassert diff_even_odd([1, 3, 5, 7, 4, 1, 6, 8]) == 3", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/604": [{"task_id": "Mbpp/604", "solution": "\"\"\"\nWrite a function to reverse words seperated by spaces in a given string.\nassert reverse_words(\"python program\")==(\"program python\")\n\"\"\"\ndef reverse_words(s):\n    # Split the input string into words using space as a delimiter\n    words = s.split(' ')\n    \n    # Reverse the list of words\n    reversed_words = words[::-1]\n    \n    # Join the reversed list of words back into a single string with spaces\n    reversed_string = ' '.join(reversed_words)\n    \n    return reversed_string\n\n# Test the function with the provided test case\nassert reverse_words(\"python program\") == \"program python\"\n", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[" "]]}], "Mbpp/585": [{"task_id": "Mbpp/585", "solution": "\"\"\"\nWrite a function to find the n most expensive items in a given dataset.\nassert expensive_items([{'name': 'Item-1', 'price': 101.1},{'name': 'Item-2', 'price': 555.22}],1)==[{'name': 'Item-2', 'price': 555.22}]\n\"\"\"\ndef expensive_items(items, n):\n    # Sort the list of items based on their price in descending order\n    sorted_items = sorted(items, key=lambda x: x['price'], reverse=True)\n    \n    # Return the first n items from the sorted list\n    return sorted_items[:n]\n\n# Test the function with the provided test case\nassert expensive_items([{'name': 'Item-1', 'price': 101.1}, {'name': 'Item-2', 'price': 555.22}], 1) == [{'name': 'Item-2', 'price': 555.22}]", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/578": [{"task_id": "Mbpp/578", "solution": "\"\"\"\nWrite a function to interleave 3 lists of the same length into a single flat list.\nassert interleave_lists([1,2,3,4,5,6,7],[10,20,30,40,50,60,70],[100,200,300,400,500,600,700])==[1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700]\n\"\"\"\ndef interleave_lists(list1, list2, list3):\n    # Initialize an empty list to store the interleaved result\n    result = []\n    \n    # Iterate over the indices of the lists (assuming all lists have the same length)\n    for i in range(len(list1)):\n        # Append elements from each list at the current index to the result list\n        result.append(list1[i])\n        result.append(list2[i])\n        result.append(list3[i])\n    \n    # Return the interleaved list\n    return result\n\n# Test the function with the provided test case\nassert interleave_lists([1, 2, 3, 4, 5, 6, 7], [10, 20, 30, 40, 50, 60, 70], [100, 200, 300, 400, 500, 600, 700]) == [1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700]", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/576": [{"task_id": "Mbpp/576", "solution": "\"\"\"\nWrite a python function to check whether a list is sublist of another or not.\nassert is_Sub_Array([1,4,3,5],[1,2]) == False\n\"\"\"\ndef is_Sub_Array(list1, list2):\n    # Check if all elements of list2 are present in list1\n    return set(list2).issubset(set(list1))\n\n# Test the function with the provided test case\nassert is_Sub_Array([1, 4, 3, 5], [1, 2]) == False\n", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[1, 0, 2, 2], [2, 2, 0]]], "plus_fail_tests": [[[-41, -69, false, {"-99": -42.77556548447436, "3": 3.1226647009953297, "8": -46.57347103376453, "2": -46.57347103376453, "5": 59.33643533503681, "-37": 48.432211942516204}], [-41, -69, false, {"-99": -42.77556548447436, "3": 3.1226647009953297, "8": -46.57347103376453, "2": -46.57347103376453, "5": 59.33643533503681, "-37": 48.432211942516204}]]]}], "Mbpp/579": [{"task_id": "Mbpp/579", "solution": "\"\"\"\nWrite a function to find the dissimilar elements in the given two tuples.\nassert find_dissimilar((3, 4, 5, 6), (5, 7, 4, 10)) == (3, 6, 7, 10)\n\"\"\"\ndef find_dissimilar(test_tup1, test_tup2):\n    # Use set difference to find elements that are not common in both tuples\n    res = tuple(set(test_tup1) ^ set(test_tup2))\n    return res\n\n# Test the function with the provided test case\nassert find_dissimilar((3, 4, 5, 6), (5, 7, 4, 10)) == (3, 6, 7, 10)\n", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[["a", "b", "c", "d", "e", "f", "g"], ["h", "i", "j", "k", "l", "m", "n"]]]}], "Mbpp/600": [{"task_id": "Mbpp/600", "solution": "\"\"\"\nWrite a python function to check whether the given number is even or not.\nassert is_Even(1) == False\n\"\"\"\ndef is_Even(n):\n    # Check if the number is divisible by 2 without any remainder\n    return n % 2 == 0\n\n# Test the function with the provided test case\nassert is_Even(1) == False", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/590": [{"task_id": "Mbpp/590", "solution": "\"\"\"\nWrite a function to convert polar coordinates to rectangular coordinates.\nassert polar_rect(3,4)==((5.0, 0.9272952180016122), (-2+2.4492935982947064e-16j))\n\"\"\"\nimport cmath\n\ndef polar_rect(r, theta):\n    # Convert polar coordinates (r, theta) to rectangular coordinates (x, y)\n    x = r * cmath.cos(theta)\n    y = r * cmath.sin(theta)\n    \n    return ((x.real, x.imag), (y.real, y.imag))\n\n# Test the function with the provided test case\nassert polar_rect(3, 4) == ((5.0, 0.9272952180016122), (-2 + 2.4492935982947064e-16j))", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/614": [{"task_id": "Mbpp/614", "solution": "\"\"\"\nWrite a function to find the cumulative sum of all the values that are present in the given tuple list.\nassert cummulative_sum([(1, 3), (5, 6, 7), (2, 6)]) == 30\n\"\"\"\ndef cummulative_sum(test_list):\n    # Initialize the result variable to zero\n    res = 0\n    \n    # Iterate through each sublist in the test list\n    for sub in test_list:\n        # Add up all elements in the current sublist and add to the result\n        res += sum(sub)\n    \n    # Return the total cumulative sum\n    return res\n\n# Test the function with the provided test case\nassert cummulative_sum([(1, 3), (5, 6, 7), (2, 6)]) == 30\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/587": [{"task_id": "Mbpp/587", "solution": "\"\"\"\nWrite a function to convert a list to a tuple.\nassert list_tuple([5, 10, 7, 4, 15, 3])==(5, 10, 7, 4, 15, 3)\n\"\"\"\ndef list_tuple(test_list):\n    # Convert the list to a tuple using tuple() constructor\n    res = tuple(test_list)\n    return res\n\n# Test the function with the provided test case\nassert list_tuple([5, 10, 7, 4, 15, 3]) == (5, 10, 7, 4, 15, 3)\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/593": [{"task_id": "Mbpp/593", "solution": "\"\"\"\nWrite a function to remove leading zeroes from an ip address.\nassert removezero_ip(\"216.08.094.196\")==('216.8.94.196')\n\"\"\"\ndef removezero_ip(ip):\n    # Split the IP address into its components using '.' as the delimiter\n    ip = ip.split('.')\n    \n    # Convert each component to an integer and then back to string to remove any leading zeros\n    ip = [str(int(i)) for i in ip]\n    \n    # Join the modified components back together using '.' as the delimiter\n    return '.'.join(ip)\n\n# Test the function with the provided test case\nassert removezero_ip(\"216.08.094.196\") == '216.8.94.196'\n", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/569": [{"task_id": "Mbpp/569", "solution": "\"\"\"\nWrite a function to sort each sublist of strings in a given list of lists.\nassert sort_sublists([['green', 'orange'], ['black', 'white'], ['white', 'black', 'orange']])==[['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]\n\"\"\"\ndef sort_sublists(list1):\n    # Sort each sublist using list comprehension and the sorted() function\n    result = [sorted(sublist) for sublist in list1]\n    return result\n\n# Test the function with the provided test case\nassert sort_sublists([['green', 'orange'], ['black', 'white'], ['white', 'black', 'orange']]) == [['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/608": [{"task_id": "Mbpp/608", "solution": "\"\"\"\nWrite a python function to find nth bell number.\nassert bell_Number(2) == 2\n\"\"\"\ndef bell_Number(n):\n    # Initialize a list to store Bell numbers\n    B = [0] * (n + 1)\n    \n    # Base case: The first Bell number is 1\n    B[0] = 1\n    \n    # Compute Bell numbers using dynamic programming\n    for i in range(1, n + 1):\n        B[i] = 0\n        for j in range(i - 1, -1, -1):\n            B[j] += B[j - 1]\n    \n    # Return the nth Bell number\n    return B[n]\n\n# Test the function with the provided test case\nassert bell_Number(2) == 2\n", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/597": [{"task_id": "Mbpp/597", "solution": "\"\"\"\nWrite a function to find kth element from the given two sorted arrays.\nassert find_kth([2, 3, 6, 7, 9], [1, 4, 8, 10], 5) == 6\n\"\"\"\ndef find_kth(arr1, arr2, k):\n    # Initialize pointers for both arrays\n    i = j = 0\n    \n    # Iterate until we reach the k-th element\n    while (i + j < k):\n        if i == len(arr1): \n            return arr2[j]\n        elif j == len(arr2): \n            return arr1[i]\n        elif arr1[i] <= arr2[j]: \n            i += 1\n        else: \n            j += 1\n    \n    # Return the k-th element\n    return min(arr1[i], arr2[j])\n\n# Test the function with the provided test case\nassert find_kth([2, 3, 6, 7, 9], [1, 4, 8, 10], 5) == 6", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/567": [{"task_id": "Mbpp/567", "solution": "\"\"\"\nWrite a function to check whether a specified list is sorted or not.\nassert issort_list([1,2,4,6,8,10,12,14,16,17])==True\n\"\"\"\ndef issort_list(nums):\n    # Check if the list is empty or contains only one element\n    if len(nums) <= 1:\n        return True\n    \n    # Iterate through the list and compare each element with the next one\n    for i in range(len(nums) - 1):\n        # If any element is greater than the next one, the list is not sorted\n        if nums[i] > nums[i + 1]:\n            return False\n    \n    # If no elements are out of order, the list is sorted\n    return True\n\n# Test the function with the provided test case\nassert issort_list([1, 2, 4, 6, 8, 10, 12, 14, 16, 17]) == True", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/577": [{"task_id": "Mbpp/577", "solution": "\"\"\"\nWrite a python function to find the last digit in factorial of a given number.\nassert last_Digit_Factorial(4) == 4\n\"\"\"\ndef last_Digit_Factorial(n):\n    # Initialize result\n    fact = 1\n    \n    # If n is less than or equal to 4, return n directly\n    if (n <= 4):\n        return n\n    \n    # For n greater than 4, calculate the product of numbers from 5 to n\n    for i in range(5, n + 1):\n        fact *= i\n    \n    # Return the last digit of the factorial\n    return fact % 10\n\n# Test the function with the provided test case\nassert last_Digit_Factorial(4) == 4", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/619": [{"task_id": "Mbpp/619", "solution": "\"\"\"\nWrite a function to move all the numbers to the end of the given string.\nassert move_num('I1love143you55three3000thousand') == 'Iloveyouthreethousand1143553000'\n\"\"\"\ndef move_num(s):\n    # Initialize an empty list to store non-numeric characters\n    non_nums = []\n    \n    # Iterate through each character in the string\n    for i in s:\n        # Check if the character is not a digit\n        if not i.isdigit():\n            # Append the non-numeric character to the list\n            non_nums.append(i)\n    \n    # Join the non-numeric characters back into a string\n    non_nums_str = ''.join(non_nums)\n    \n    # Return the concatenated result of non-numeric characters followed by numeric characters\n    return non_nums_str + ''.join(filter(str.isdigit, s))\n\n# Test the function with the provided test case\nassert move_num('I1love143you55three3000thousand') == 'Iloveyouthreethousand1143553000'\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/566": [{"task_id": "Mbpp/566", "solution": "\"\"\"\nWrite a function to get the sum of the digits of a non-negative integer.\nassert sum_digits(345)==12\n\"\"\"\ndef sum_digits(n):\n    # Initialize a variable to store the sum of digits\n    s = 0\n    \n    # Loop through each digit in the number\n    while n > 0:\n        # Add the last digit to the sum\n        s += n % 10\n        # Remove the last digit from the number\n        n //= 10\n    \n    # Return the total sum of digits\n    return s\n\n# Test the function with the provided test case\nassert sum_digits(345) == 12\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/595": [{"task_id": "Mbpp/595", "solution": "\"\"\"\nWrite a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nassert min_Swaps(\"1101\",\"1110\") == 1\n\"\"\"\ndef min_Swaps(str1, str2):\n    # Initialize swap count to zero\n    swap_count = 0\n    \n    # Iterate through each character in the strings\n    for i in range(len(str1)):\n        # If characters at the current position are different\n        if str1[i] != str2[i]:\n            # Find the first '1' in str2 from the current position to the end\n            j = i + 1\n            while j < len(str2) and str2[j] != '1':\n                j += 1\n            \n            # If no '1' found, return -1 (impossible to make them equal)\n            if j == len(str2):\n                return -1\n            \n            # Swap the found '1' with the current position\n            str2 = str2[:j] + '0' + str2[j+1:]\n            str2 = str2[:i] + '1' + str2[i+1:]\n            \n            # Increment swap count\n            swap_count += 1\n    \n    # Return the total number of swaps\n    return swap_count\n\n# Test the function with the provided test case\nassert min_Swaps(\"1101\", \"1110\") == 1", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/626": [{"task_id": "Mbpp/626", "solution": "\"\"\"\nWrite a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\nassert triangle_area(-1) == None\n\"\"\"\ndef triangle_area(radius):\n    # Check if the radius is negative\n    if radius < 0:\n        return None\n    \n    # Calculate the area using the formula for the largest triangle inscribed in a semicircle\n    area = (3 * (radius ** 2)) / 4\n    \n    return area\n\n# Test the function with the provided test case\nassert triangle_area(-1) == None", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[2]], "plus_fail_tests": [[0.5]]}], "Mbpp/603": [{"task_id": "Mbpp/603", "solution": "\"\"\"\nWrite a function to get all lucid numbers smaller than or equal to a given integer.\nassert get_ludic(10) == [1, 2, 3, 5, 7]\n\"\"\"\ndef get_ludic(n):\n    # Initialize the list of ludic numbers with the first two ludic numbers\n    ludics = [1, 2]\n    \n    # Continue generating ludic numbers until the last one is greater than n\n    while ludics[-1] < n:\n        next_ludic = ludics[-1] + ludics[-2]\n        if next_ludic > n:\n            break\n        ludics.append(next_ludic)\n    \n    return ludics\n\n# Test the function with the provided test case\nassert get_ludic(10) == [1, 2, 3, 5, 7]", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/612": [{"task_id": "Mbpp/612", "solution": "\"\"\"\nWrite a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\nassert merge([['x', 'y'], ['a', 'b'], ['m', 'n']]) == [['x', 'a', 'm'], ['y', 'b', 'n']]\n\"\"\"\ndef merge(list1):\n    # Initialize two empty lists to store the first and second elements from each sublist\n    list2 = []\n    list3 = []\n    \n    # Iterate over each sublist in the input list\n    for i in range(len(list1)):\n        # Append the first element of the current sublist to list2\n        list2.append(list1[i][0])\n        # Append the second element of the current sublist to list3\n        list3.append(list1[i][1])\n    \n    # Return a list containing list2 and list3\n    return [list2, list3]\n\n# Test the function with the provided test case\nassert merge([['x', 'y'], ['a', 'b'], ['m', 'n']]) == [['x', 'a', 'm'], ['y', 'b', 'n']]\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/602": [{"task_id": "Mbpp/602", "solution": "\"\"\"\nWrite a python function to find the first repeated character in a given string.\nassert first_repeated_char(\"abcabc\") == \"a\"\n\"\"\"\ndef first_repeated_char(s):\n    # Create an empty dictionary to store characters and their indices\n    char_dict = {}\n    \n    # Iterate over each character in the string along with its index\n    for i, c in enumerate(s):\n        # Check if the character is already in the dictionary\n        if c in char_dict:\n            # If it is, return the character as it's the first repeated one\n            return c\n        else:\n            # If not, add the character to the dictionary with its index\n            char_dict[c] = i\n    \n    # If no repeated character is found, return None\n    return None\n\n# Test the function with the provided test case\nassert first_repeated_char(\"abcabc\") == \"a\"\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/616": [{"task_id": "Mbpp/616", "solution": "\"\"\"\nWrite a function which takes two tuples of the same length and performs the element wise modulo.\nassert tuple_modulo((10, 4, 5, 6), (5, 6, 7, 5)) == (0, 4, 5, 1)\n\"\"\"\ndef tuple_modulo(test_tup1, test_tup2):\n    # Perform element-wise modulo operation using zip to iterate over both tuples simultaneously\n    res = tuple(a % b for a, b in zip(test_tup1, test_tup2))\n    return res\n\n# Test the function with the provided test case\nassert tuple_modulo((10, 4, 5, 6), (5, 6, 7, 5)) == (0, 4, 5, 1)\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/599": [{"task_id": "Mbpp/599", "solution": "\"\"\"\nWrite a function to find sum and average of first n natural numbers.\nassert sum_average(10)==(55, 5.5)\n\"\"\"\ndef sum_average(n):\n    # Calculate the sum of the first n natural numbers using the formula n*(n+1)/2\n    sum = int(n * (n + 1) / 2)\n    \n    # Calculate the average by dividing the sum by n\n    avg = float(sum / n)\n    \n    # Return both the sum and the average as a tuple\n    return sum, avg\n\n# Test the function with the provided test case\nassert sum_average(10) == (55, 5.5)\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/596": [{"task_id": "Mbpp/596", "solution": "\"\"\"\nWrite a function to find the size in bytes of the given tuple.\nassert tuple_size((\"A\", 1, \"B\", 2, \"C\", 3) ) == sys.getsizeof((\"A\", 1, \"B\", 2, \"C\", 3))\n\"\"\"\nimport sys\n\ndef tuple_size(test_tup):\n    # Calculate the size of the tuple using sys.getsizeof()\n    res = sys.getsizeof(test_tup)\n    return res\n\n# Test the function with the provided test case\nassert tuple_size((\"A\", 1, \"B\", 2, \"C\", 3)) == sys.getsizeof((\"A\", 1, \"B\", 2, \"C\", 3))", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/629": [{"task_id": "Mbpp/629", "solution": "\"\"\"\nWrite a python function to find even numbers from a list of numbers.\nassert Split([1,2,3,4,5]) == [2,4]\n\"\"\"\ndef Split(lst):\n    # Use list comprehension to filter out even numbers\n    return [i for i in lst if i % 2 == 0]\n\n# Test the function with the provided test case\nassert Split([1, 2, 3, 4, 5]) == [2, 4]\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/611": [{"task_id": "Mbpp/611", "solution": "\"\"\"\nWrite a function which given a matrix represented as a list of lists returns the max of the n'th column.\nassert max_of_nth([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2) == 19\n\"\"\"\ndef max_of_nth(matrix, n):\n    # Extract the nth column from each row using list comprehension\n    nth_column = [row[n] for row in matrix]\n    # Return the maximum value from the nth column\n    return max(nth_column)\n\n# Test the function with the provided test case\nassert max_of_nth([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2) == 19\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/610": [{"task_id": "Mbpp/610", "solution": "\"\"\"\nWrite a python function which takes a list and returns a list with the same elements, but the k'th element removed.\nassert remove_kth_element([1,1,2,3,4,4,5,1],3)==[1, 1, 3, 4, 4, 5, 1]\n\"\"\"\ndef remove_kth_element(nums, k):\n    # Remove the k-th element from the list (index k-1)\n    nums.pop(k - 1)\n    return nums\n\n# Test the function with the provided test case\nassert remove_kth_element([1, 1, 2, 3, 4, 4, 5, 1], 3) == [1, 1, 3, 4, 4, 5, 1]", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/628": [{"task_id": "Mbpp/628", "solution": "\"\"\"\nWrite a function to replace all spaces in the given string with '%20'.\nassert replace_spaces(\"My Name is Dawood\") == 'My%20Name%20is%20Dawood'\n\"\"\"\ndef replace_spaces(input_string):\n    # Replace each space character in the input string with '%20'\n    return input_string.replace(' ', '%20')\n\n# Test the function with the provided test case\nassert replace_spaces(\"My Name is Dawood\") == 'My%20Name%20is%20Dawood'\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/598": [{"task_id": "Mbpp/598", "solution": "\"\"\"\nWrite a function to check whether the given number is armstrong or not.\nassert armstrong_number(153)==True\n\"\"\"\ndef armstrong_number(n):\n    # Convert the number to a string to easily iterate over its digits\n    num = str(n)\n    \n    # Calculate the length of the number (number of digits)\n    len_num = len(num)\n    \n    # Initialize sum variable to store the sum of each digit raised to the power of the number's length\n    sum = 0\n    \n    # Iterate over each digit in the number\n    for i in range(len_num):\n        # Add the digit raised to the power of the number's length to the sum\n        sum += int(num[i]) ** len_num\n    \n    # Check if the calculated sum equals the original number\n    return sum == n\n\n# Test the function with the provided test case\nassert armstrong_number(153) == True", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/607": [{"task_id": "Mbpp/607", "solution": "\"\"\"\nWrite a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\nassert find_literals('The quick brown fox jumps over the lazy dog.', 'fox') == ('fox', 16, 19)\n\"\"\"\nimport re\n\ndef find_literals(text, pattern):\n    # Search for the pattern in the text using regular expression\n    match = re.search(pattern, text)\n    \n    # If no match is found, return None\n    if not match:\n        return None\n    \n    # Extract the matched substring, start index, and end index\n    matched_substring = match.group(0)\n    start_index = match.start()\n    end_index = match.end()\n    \n    # Return the results as a tuple\n    return (matched_substring, start_index, end_index)\n\n# Test the function with the provided test case\nassert find_literals('The quick brown fox jumps over the lazy dog.', 'fox') == ('fox', 16, 19)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/618": [{"task_id": "Mbpp/618", "solution": "\"\"\"\nWrite a function to divide two lists element wise.\nassert div_list([4,5,6],[1, 2, 3])==[4.0,2.5,2.0]\n\"\"\"\ndef div_list(list1, list2):\n    # Use list comprehension to iterate over both lists simultaneously\n    return [i / j for i, j in zip(list1, list2)]\n\n# Test the function with the provided test case\nassert div_list([4, 5, 6], [1, 2, 3]) == [4.0, 2.5, 2.0]\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/624": [{"task_id": "Mbpp/624", "solution": "\"\"\"\nWrite a python function to convert a given string to uppercase.\nassert is_upper(\"person\") ==\"PERSON\"\n\"\"\"\ndef is_upper(string):\n    # Convert the entire string to uppercase using the upper() method\n    return string.upper()\n\n# Test the function with the provided test case\nassert is_upper(\"person\") == \"PERSON\"\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/623": [{"task_id": "Mbpp/623", "solution": "\"\"\"\nWrite a function to compute the n-th power of each number in a list.\nassert nth_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],2)==[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]\n\"\"\"\ndef nth_nums(nums, n):\n    # Use list comprehension to raise each element to the power of n\n    return [x ** n for x in nums]\n\n# Test the function with the provided test case\nassert nth_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2) == [1, 4, 9, 16, 25, 36, 49, 64, 81, 100]\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/615": [{"task_id": "Mbpp/615", "solution": "\"\"\"\nWrite a function which takes a tuple of tuples and returns the average value for each tuple as a list.\nassert average_tuple(((10, 10, 10, 12), (30, 45, 56, 45), (81, 80, 39, 32), (1, 2, 3, 4)))==[30.5, 34.25, 27.0, 23.25]\n\"\"\"\ndef average_tuple(test_list):\n    # Calculate the average of each sub-tuple and store it in a list\n    res = [sum(sub) / len(sub) for sub in test_list]\n    return res\n\n# Test the function with the provided test case\nassert average_tuple(((10, 10, 10, 12), (30, 45, 56, 45), (81, 80, 39, 32), (1, 2, 3, 4))) == [30.5, 34.25, 27.0, 23.25]\n", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/592": [{"task_id": "Mbpp/592", "solution": "\"\"\"\nWrite a python function to find the sum of the product of consecutive binomial co-efficients.\nassert sum_Of_product(3) == 15\n\"\"\"\ndef sum_Of_product(n):\n    # Initialize the result variable to store the sum of products\n    res = 0\n    \n    # Iterate through each number from 2 to n (inclusive)\n    for i in range(2, n + 1):\n        # Calculate the product of binomial coefficients C(i, j) * C(i, j-1)\n        res += (i * (i - 1))\n    \n    return res\n\n# Test the function with the provided test case\nassert sum_Of_product(3) == 15", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/622": [{"task_id": "Mbpp/622", "solution": "\"\"\"\nWrite a function to find the median of two sorted lists of same size.\nassert get_median([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5) == 16.0\n\"\"\"\ndef get_median(arr1, arr2, n):\n    # Combine both arrays into one\n    merged = arr1 + arr2\n    \n    # Sort the combined array\n    merged.sort()\n    \n    # Calculate the median based on the length of the merged array\n    if len(merged) % 2 == 0:\n        return (merged[n - 1] + merged[n]) / 2.0\n    else:\n        return float(merged[n - 1])\n\n# Test the function with the provided test case\nassert get_median([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5) == 16.0", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[[1], [2], 0]]}], "Mbpp/606": [{"task_id": "Mbpp/606", "solution": "\"\"\"\nWrite a function to convert degrees to radians.\nassert radian_degree(90)==1.5707963267948966\n\"\"\"\n# Importing the math module for mathematical functions\nimport math\n\ndef radian_degree(degree):\n    # Converting degree to radian using the formula: radian = degree * (pi / 180)\n    return degree * (math.pi / 180)\n\n# Test the function with the provided test case\nassert radian_degree(90) == 1.5707963267948966", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[-92]]}], "Mbpp/605": [{"task_id": "Mbpp/605", "solution": "\"\"\"\nWrite a function to check if the given integer is a prime number.\nassert prime_num(13)==True\n\"\"\"\ndef prime_num(n):\n    # Check if the number is less than 2\n    if n < 2:\n        return False\n    \n    # Check for factors from 2 to sqrt(n)\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    \n    # If no factors were found, it's a prime number\n    return True\n\n# Test the function with the provided test case\nassert prime_num(13) == True", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/722": [{"task_id": "Mbpp/722", "solution": "\"\"\"\nThe input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\nassert filter_data({'Cierra Vega': (6.2, 70), 'Alden Cantrell': (5.9, 65), 'Kierra Gentry': (6.0, 68), 'Pierre Cox': (5.8, 66)},6.0,70)=={'Cierra Vega': (6.2, 70)}\n\"\"\"\ndef filter_data(students, min_height, min_weight):\n    # Initialize an empty dictionary to store filtered results\n    result = {}\n    \n    # Iterate through each student in the input dictionary\n    for student, data in students.items():\n        # Check if the student's height and weight meet or exceed the minimum requirements\n        if data[0] >= min_height and data[1] >= min_weight:\n            # If criteria met, add the student to the result dictionary\n            result[student] = data\n    \n    # Return the filtered dictionary containing only students meeting the criteria\n    return result\n\n# Test the function with provided data points\nassert filter_data({'Cierra Vega': (6.2, 70), 'Alden Cantrell': (5.9, 65), 'Kierra Gentry': (6.0, 68), 'Pierre Cox': (5.8, 66)}, 6.0, 70) == {'Cierra Vega': (6.2, 70)}", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/638": [{"task_id": "Mbpp/638", "solution": "\"\"\"\nWrite a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nassert wind_chill(120,35)==40\n\"\"\"\ndef wind_chill(v, t):\n    # Calculate the wind chill using the formula\n    w = 13.12 + 0.6215 * t -  11.37 * v**0.16 + 0.3965 * t * v**0.16\n    \n    # Round the result to the nearest integer\n    return round(w)\n\n# Test the function with the provided test case\nassert wind_chill(120, 35) == 40", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/735": [{"task_id": "Mbpp/735", "solution": "\"\"\"\nWrite a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\nassert toggle_middle_bits(9) == 15\n\"\"\"\ndef toggle_middle_bits(n):\n    # Initialize variables to store the result and mask\n    res = 0\n    mask = 0\n    \n    # Calculate the number of bits in n\n    num_of_bits = (int)(n.bit_length())\n    \n    # Create a mask with all bits set except the first and last bits\n    for i in range(1, num_of_bits - 1):\n        mask |= (1 << i)\n    \n    # Toggle the middle bits using XOR operation\n    res = n ^ mask\n    \n    return res\n\n# Test the function with the provided test case\nassert toggle_middle_bits(9) == 15", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[true]]}], "Mbpp/635": [{"task_id": "Mbpp/635", "solution": "\"\"\"\nWrite a function to sort the given list.\nassert heap_sort([1, 3, 5, 7, 9, 2, 4, 6, 8, 0])==[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n\"\"\"\ndef heap_sort(arr):\n    # Convert list into a heap\n    heapq.heapify(arr)\n    \n    # Extract elements from the heap one by one\n    sorted_arr = [heapq.heappop(arr) for _ in range(len(arr))]\n    \n    return sorted_arr\n\n# Test the function with the provided test case\nassert heap_sort([1, 3, 5, 7, 9, 2, 4, 6, 8, 0]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/759": [{"task_id": "Mbpp/759", "solution": "\"\"\"\nWrite a function to check whether a given string is a decimal number with a precision of 2.\nassert is_decimal('123.11')==True\n\"\"\"\ndef is_decimal(s):\n    # Check if the string can be converted to a float\n    try:\n        f = float(s)\n    except ValueError:\n        return False\n    \n    # Split the string into integer and fractional parts\n    s = str(f).split('.')\n    \n    # Check if there are exactly two parts and the second part has at most two digits\n    if len(s) == 2 and len(s[1]) <= 2:\n        return True\n    else:\n        return False\n\n# Test the function with the provided test case\nassert is_decimal('123.11') == True", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [["-123.11"]]}], "Mbpp/734": [{"task_id": "Mbpp/734", "solution": "\"\"\"\nWrite a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\nassert sum_Of_Subarray_Prod([1,2,3]) == 20\n\"\"\"\ndef sum_Of_Subarray_Prod(arr):\n    n = len(arr)\n    total_sum = 0\n    \n    # Iterate over each element in the array\n    for i in range(n):\n        product = arr[i]\n        total_sum += product\n        \n        # Calculate the sum of products of subarrays ending at index i\n        for j in range(i + 1, n):\n            product *= arr[j]\n            total_sum += product\n    \n    return total_sum\n\n# Test the function with the provided test case\nassert sum_Of_Subarray_Prod([1, 2, 3]) == 20", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/773": [{"task_id": "Mbpp/773", "solution": "\"\"\"\nWrite a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\nassert occurance_substring('python programming, python language','python')==('python', 0, 6)\n\"\"\"\ndef occurance_substring(string, substring):\n    # Check if the substring exists in the string\n    if substring in string:\n        # Find the starting index of the first occurrence of the substring\n        start = string.find(substring)\n        # Calculate the length of the substring\n        end = start + len(substring) - 1\n        return (substring, start, end)\n    else:\n        # Return None if the substring is not found\n        return None\n\n# Test the function with the provided test case\nassert occurance_substring('python programming, python language', 'python') == ('python', 0, 6)", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/632": [{"task_id": "Mbpp/632", "solution": "\"\"\"\nWrite a python function to move all zeroes to the end of the given list.\nassert move_zero([1,0,2,0,3,4]) == [1,2,3,4,0,0]\n\"\"\"\ndef move_zero(arr):\n    # Initialize an index variable to track non-zero elements' position\n    i = 0\n    \n    # Iterate through the array\n    for j in range(len(arr)):\n        # If the current element is not zero, swap it with the element at the 'i' index\n        if arr[j] != 0:\n            arr[i], arr[j] = arr[j], arr[i]\n            i += 1\n    \n    return arr\n\n# Test the function with the provided test case\nassert move_zero([1, 0, 2, 0, 3, 4]) == [1, 2, 3, 4, 0, 0]", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/741": [{"task_id": "Mbpp/741", "solution": "\"\"\"\nWrite a python function to check whether all the characters are same or not.\nassert all_Characters_Same(\"python\") == False\n\"\"\"\ndef all_Characters_Same(s):\n    # Check if all characters in the string are the same\n    return len(set(s)) == 1\n\n# Test the function with the provided test case\nassert all_Characters_Same(\"python\") == False", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/641": [{"task_id": "Mbpp/641", "solution": "\"\"\"\nWrite a function to find the nth nonagonal number.\nassert is_nonagonal(10) == 325\n\"\"\"\ndef is_nonagonal(n):\n    # Calculate the nth nonagonal number using the formula\n    return int((7 * n * (n - 1)) / 2 + n)\n\n# Test the function with the provided test case\nassert is_nonagonal(10) == 325\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/644": [{"task_id": "Mbpp/644", "solution": "\"\"\"\nWrite a python function to reverse an array upto a given position.\nassert reverse_Array_Upto_K([1, 2, 3, 4, 5, 6],4) == [4, 3, 2, 1, 5, 6]\n\"\"\"\ndef reverse_Array_Upto_K(arr, k):\n    # Reverse elements from index 0 to k-1\n    arr[:k] = reversed(arr[:k])\n    return arr\n\n# Test the function with the provided test case\nassert reverse_Array_Upto_K([1, 2, 3, 4, 5, 6], 4) == [4, 3, 2, 1, 5, 6]", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/754": [{"task_id": "Mbpp/754", "solution": "\"\"\"\nWe say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\nassert extract_index_list([1, 1, 3, 4, 5, 6, 7],[0, 1, 2, 3, 4, 5, 7],[0, 1, 2, 3, 4, 5, 7])==[1, 7]\n\"\"\"\ndef extract_index_list(l1, l2, l3):\n    # Initialize an empty list to store common elements\n    res = []\n    \n    # Iterate over the indices of the lists using zip\n    for i, j, k in zip(l1, l2, l3):\n        # Check if the current elements at the same index are equal\n        if i == j == k:\n            # If they are equal, append the element to the result list\n            res.append(i)\n    \n    # Return the list of common elements\n    return res\n\n# Test the function with the provided test case\nassert extract_index_list([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]) == [1, 7]\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/732": [{"task_id": "Mbpp/732", "solution": "\"\"\"\nWrite a function to replace all occurrences of spaces, commas, or dots with a colon.\nassert replace_specialchar('Python language, Programming language.')==('Python:language::Programming:language:')\n\"\"\"\ndef replace_specialchar(s):\n    # Replace spaces, commas, and dots with a colon\n    s = s.replace(\" \", \":\")\n    s = s.replace(\",\", \":\")\n    s = s.replace(\".\", \":\")\n    return s\n\n# Test the function with the provided test case\nassert replace_specialchar('Python language, Programming language.') == 'Python:language::Programming:language:'\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/775": [{"task_id": "Mbpp/775", "solution": "\"\"\"\nWrite a python function to check whether every odd index contains odd numbers of a given list.\nassert odd_position([2,1,4,3,6,7,6,3]) == True\n\"\"\"\ndef odd_position(nums):\n    # Iterate through the list using enumerate to get both index and value\n    for i, x in enumerate(nums):\n        # Check if the index is odd and the number at that index is not odd\n        if i % 2 != 0 and x % 2 == 0:\n            return False\n    return True\n\n# Test the function with the provided test case\nassert odd_position([2, 1, 4, 3, 6, 7, 6, 3]) == True", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/771": [{"task_id": "Mbpp/771", "solution": "\"\"\"\nWrite a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nassert check_expression(\"{()}[{}]\") == True\n\"\"\"\ndef check_expression(expression):\n    # Initialize an empty stack\n    stack = []\n    \n    # Define a dictionary to hold matching pairs of parentheses\n    match_dict = {')': '(', '}': '{', ']': '['}\n    \n    # Iterate through each character in the expression\n    for char in expression:\n        # If the character is one of the closing parentheses\n        if char in match_dict:\n            # Pop from stack and check if it matches the corresponding opening parenthesis\n            top_element = stack.pop() if stack else '#'\n            \n            # If there's no matching opening parenthesis, return False\n            if match_dict[char] != top_element:\n                return False\n        else:\n            # Push the opening parenthesis onto the stack\n            stack.append(char)\n    \n    # If the stack is empty, all parentheses were matched; otherwise, return False\n    return not stack\n\n# Test the function with the provided test case\nassert check_expression(\"{()}[{}]\") == True", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/726": [{"task_id": "Mbpp/726", "solution": "\"\"\"\nWrite a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\nassert multiply_elements((1, 5, 7, 8, 10)) == (5, 35, 56, 80)\n\"\"\"\ndef multiply_elements(test_tup):\n    # Using list comprehension to multiply each element with its next neighbor\n    res = tuple(x * y for x, y in zip(test_tup, test_tup[1:]))\n    return res\n\n# Test the function with the provided test case\nassert multiply_elements((1, 5, 7, 8, 10)) == (5, 35, 56, 80)\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/749": [{"task_id": "Mbpp/749", "solution": "\"\"\"\nWrite a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\nassert sort_numeric_strings( ['4','12','45','7','0','100','200','-12','-500'])==[-500, -12, 0, 4, 7, 12, 45, 100, 200]\n\"\"\"\ndef sort_numeric_strings(nums):\n    # Convert each string number to an integer and sort the list\n    return sorted(map(int, nums))\n\n# Test the function with the provided test case\nassert sort_numeric_strings(['4', '12', '45', '7', '0', '100', '200', '-12', '-500']) == [-500, -12, 0, 4, 7, 12, 45, 100, 200]\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/631": [{"task_id": "Mbpp/631", "solution": "\"\"\"\nWrite a function to replace whitespaces with an underscore and vice versa in a given string.\nassert replace_spaces('Jumanji The Jungle') == 'Jumanji_The_Jungle'\n\"\"\"\ndef replace_spaces(input_string):\n    # Replace underscores with spaces if they exist\n    if '_' in input_string:\n        return input_string.replace('_', ' ')\n    # Replace spaces with underscores if no underscores are present\n    else:\n        return input_string.replace(' ', '_')\n\n# Test the function with the provided test case\nassert replace_spaces('Jumanji The Jungle') == 'Jumanji_The_Jungle'\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/772": [{"task_id": "Mbpp/772", "solution": "\"\"\"\nWrite a function to remove all the words with k length in the given string.\nassert remove_length('The person is most value tet', 3) == 'person is most value'\n\"\"\"\ndef remove_length(s, k):\n    # Split the string into words\n    words = s.split()\n    \n    # Filter out words of length k\n    filtered_words = [word for word in words if len(word) != k]\n    \n    # Join the remaining words back into a single string\n    return ' '.join(filtered_words)\n\n# Test the function with the provided test case\nassert remove_length('The person is most value tet', 3) == 'person is most value'", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/643": [{"task_id": "Mbpp/643", "solution": "\"\"\"\nWrite a function that checks if a strings contains 'z', except at the start and end of the word.\nassert text_match_wordz_middle(\"pythonzabc.\")==True\n\"\"\"\nimport re\n\ndef text_match_wordz_middle(text):\n    # Define the regex pattern to match 'z' not at the start or end of the word\n    pattern = '\\Bz\\B'\n    \n    # Search for the pattern in the given text\n    if re.search(pattern, text):\n        return True\n    else:\n        return False\n\n# Test the function with the provided test case\nassert text_match_wordz_middle(\"pythonzabc.\") == True", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/637": [{"task_id": "Mbpp/637", "solution": "\"\"\"\nWrite a function to check whether the given amount has no profit and no loss\nassert noprofit_noloss(1500,1200)==False\n\"\"\"\ndef noprofit_noloss(cost_price, selling_price):\n    # Check if the selling price is less than or equal to the cost price\n    if selling_price <= cost_price:\n        return True  # No profit and no loss\n    else:\n        return False  # There is a profit\n\n# Test the function with the provided test case\nassert noprofit_noloss(1500, 1200) == False", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/752": [{"task_id": "Mbpp/752", "solution": "\"\"\"\nWrite a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\nassert jacobsthal_num(5) == 11\n\"\"\"\ndef jacobsthal_num(n):\n    # Base case: if n is 0, return 0\n    if n == 0:\n        return 0\n    # Initialize an array to store Jacobsthal numbers up to n\n    dp = [0] * (n + 1)\n    dp[0], dp[1] = 0, 1\n    \n    # Fill the array using the recurrence relation J(n) = J(n-1) + 2*J(n-2)\n    for i in range(2, n + 1):\n        dp[i] = dp[i - 1] + 2 * dp[i - 2]\n    \n    # Return the nth Jacobsthal number\n    return dp[n]\n\n# Test the function with the provided test case\nassert jacobsthal_num(5) == 11", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/736": [{"task_id": "Mbpp/736", "solution": "\"\"\"\nWrite a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\nassert left_insertion([1,2,4,5],6)==4\n\"\"\"\ndef left_insertion(arr, x):\n    # Initialize the start index to 0\n    start = 0\n    \n    # Iterate through each element in the array\n    for i in range(len(arr)):\n        # Check if the current element is greater than or equal to x\n        if arr[i] >= x:\n            # Return the current index as the left insertion point\n            return i\n    \n    # If no element is found that is greater than or equal to x, return the length of the array\n    return len(arr)\n\n# Test the function with the provided test case\nassert left_insertion([1, 2, 4, 5], 6) == 4", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/770": [{"task_id": "Mbpp/770", "solution": "\"\"\"\nWrite a python function to find the sum of fourth power of first n odd natural numbers.\nassert odd_num_sum(2) == 82\n\"\"\"\ndef odd_num_sum(n):\n    # Initialize the sum variable to store the result\n    sum = 0\n    \n    # Loop through the first n odd numbers\n    for i in range(1, n + 1):\n        # Calculate the fourth power of the current odd number\n        num = (2 * i - 1)\n        # Add the fourth power to the sum\n        sum += num ** 4\n    \n    # Return the total sum of the fourth powers\n    return sum\n\n# Test the function with the provided test case\nassert odd_num_sum(2) == 82", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/723": [{"task_id": "Mbpp/723", "solution": "\"\"\"\nThe input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\nassert count_same_pair([1, 2, 3, 4, 5, 6, 7, 8],[2, 2, 3, 1, 2, 6, 7, 9])==4\n\"\"\"\ndef count_same_pair(nums1, nums2):\n    # Initialize a counter for matching pairs\n    count = 0\n    \n    # Iterate through each pair of elements from both lists\n    for i in range(len(nums1)):\n        if nums1[i] == nums2[i]:\n            count += 1\n            \n    return count\n\n# Test the function with the provided test case\nassert count_same_pair([1, 2, 3, 4, 5, 6, 7, 8], [2, 2, 3, 1, 2, 6, 7, 9]) == 4", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/640": [{"task_id": "Mbpp/640", "solution": "\"\"\"\nWrite a function to remove the parenthesis and what is inbetween them from a string.\nassert remove_parenthesis([\"python (chrome)\"])==(\"python\")\n\"\"\"\ndef remove_parenthesis(text):\n    # Iterate through each character in the input text\n    for i in text:\n        # Check if the current character is an opening parenthesis '('\n        if i == \"(\":\n            # If it is, slice the string from the beginning up to but not including the current index\n            return text[:i]\n    # If no parentheses are found, return the original text\n    return text\n\n# Test the function with the provided test case\nassert remove_parenthesis([\"python (chrome)\"]) == \"python\"\n", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/740": [{"task_id": "Mbpp/740", "solution": "\"\"\"\nWrite a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\nassert tuple_to_dict((1, 5, 7, 10, 13, 5)) == {1: 5, 7: 10, 13: 5}\n\"\"\"\ndef tuple_to_dict(test_tup):\n    # Initialize an empty dictionary\n    res = {}\n    \n    # Iterate over the tuple in steps of 2 to form key-value pairs\n    for i in range(0, len(test_tup), 2):\n        # Assign each pair to the dictionary\n        res[test_tup[i]] = test_tup[i + 1]\n    \n    return res\n\n# Test the function with the provided test case\nassert tuple_to_dict((1, 5, 7, 10, 13, 5)) == {1: 5, 7: 10, 13: 5}\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/743": [{"task_id": "Mbpp/743", "solution": "\"\"\"\nWrite a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\nassert rotate_right([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],3)==[8, 9, 10, 1, 2, 3, 4, 5, 6, 7]\n\"\"\"\ndef rotate_right(arr, n):\n    # Calculate the effective rotation needed\n    n = n % len(arr)\n    \n    # Split the array into two parts\n    first_part = arr[-n:]\n    second_part = arr[:-n]\n    \n    # Concatenate the two parts to get the rotated array\n    return first_part + second_part\n\n# Test the function with the provided test case\nassert rotate_right([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3) == [8, 9, 10, 1, 2, 3, 4, 5, 6, 7]", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[[], 0]]}], "Mbpp/766": [{"task_id": "Mbpp/766", "solution": "\"\"\"\nWrite a function to return a list of all pairs of consecutive items in a given list.\nassert pair_wise([1,1,2,3,3,4,4,5])==[(1, 1), (1, 2), (2, 3), (3, 3), (3, 4), (4, 4), (4, 5)]\n\"\"\"\ndef pair_wise(test_list):\n    # Use list comprehension to iterate through the list and create tuples of consecutive elements\n    res = [(test_list[idx], test_list[idx + 1]) for idx in range(len(test_list) - 1)]\n    return res\n\n# Test the function with the provided test case\nassert pair_wise([1, 1, 2, 3, 3, 4, 4, 5]) == [(1, 1), (1, 2), (2, 3), (3, 3), (3, 4), (4, 4), (4, 5)]", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/750": [{"task_id": "Mbpp/750", "solution": "\"\"\"\nWrite a function to add the given tuple to the given list.\nassert add_tuple([5, 6, 7], (9, 10)) == [5, 6, 7, 9, 10]\n\"\"\"\ndef add_tuple(test_list, test_tup):\n    # Extend the list with elements from the tuple\n    res = test_list.extend(test_tup)\n    return test_list\n\n# Test the function with the provided test case\nassert add_tuple([5, 6, 7], (9, 10)) == [5, 6, 7, 9, 10]\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/746": [{"task_id": "Mbpp/746", "solution": "\"\"\"\nWrite a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\nassert sector_area(4,45)==6.283185307179586\n\"\"\"\ndef sector_area(radius, angle):\n    # Check if the angle is greater than 360 degrees\n    if angle > 360:\n        return None\n    \n    # Calculate the area of the sector using the formula (angle/360) * \u03c0 * radius^2\n    area = (angle / 360) * 3.1415 * radius ** 2\n    \n    return area\n\n# Test the function with the provided test case\nassert sector_area(4, 45) == 6.283185307179586\n", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/742": [{"task_id": "Mbpp/742", "solution": "\"\"\"\nWrite a function to caluclate the area of a tetrahedron.\nassert area_tetrahedron(3)==15.588457268119894\n\"\"\"\ndef area_tetrahedron(a):\n    # Calculate the area of a regular tetrahedron using the formula\n    return (a * a * 0.447213595)\n\n# Test the function with the provided test case\nassert area_tetrahedron(3) == 15.588457268119894\n", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/757": [{"task_id": "Mbpp/757", "solution": "\"\"\"\nWrite a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\nassert count_reverse_pairs([\"julia\", \"best\", \"tseb\", \"for\", \"ailuj\"])== 2\n\"\"\"\ndef count_reverse_pairs(str_list):\n    # Initialize a counter for reverse pairs\n    count = 0\n    \n    # Iterate over each string in the list\n    for i in range(len(str_list)):\n        # Check all other strings in the list\n        for j in range(i + 1, len(str_list)):\n            # If the current string is the reverse of another string\n            if str_list[i] == str_list[j][::-1]:\n                # Increment the counter\n                count += 1\n                \n    # Return the total count of reverse pairs\n    return count\n\n# Test the function with the provided test case\nassert count_reverse_pairs([\"julia\", \"best\", \"tseb\", \"for\", \"ailuj\"]) == 2", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/728": [{"task_id": "Mbpp/728", "solution": "\"\"\"\nWrite a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\nassert sum_list([10,20,30],[15,25,35])==[25,45,65]\n\"\"\"\ndef sum_list(list1, list2):\n    # Initialize an empty list to store the results\n    result = []\n    \n    # Iterate over both lists simultaneously using zip\n    for num1, num2 in zip(list1, list2):\n        # Append the sum of corresponding elements to the result list\n        result.append(num1 + num2)\n    \n    return result\n\n# Test the function with the provided test case\nassert sum_list([10, 20, 30], [15, 25, 35]) == [25, 45, 65]\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/639": [{"task_id": "Mbpp/639", "solution": "\"\"\"\nWrite a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\nassert sample_nam(['sally', 'Dylan', 'rebecca', 'Diana', 'Joanne', 'keith'])==16\n\"\"\"\ndef sample_nam(names):\n    # Filter out names starting with a lowercase letter and calculate the total length of the remaining names\n    return sum(len(name) for name in names if name[0].isupper())\n\n# Test the function with the provided test case\nassert sample_nam(['sally', 'Dylan', 'rebecca', 'Diana', 'Joanne', 'keith']) == 16\n", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[["AbCdE", "fGH", "IJKLMnOp", "qrs", "TUVW", "xyz"]]]}], "Mbpp/760": [{"task_id": "Mbpp/760", "solution": "\"\"\"\nWrite a python function to check whether a list of numbers contains only one distinct element or not.\nassert unique_Element([1,1,1]) == True\n\"\"\"\ndef unique_Element(nums):\n    # Check if all elements in the list are the same\n    return len(set(nums)) == 1\n\n# Test the function with the provided test case\nassert unique_Element([1, 1, 1]) == True", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/764": [{"task_id": "Mbpp/764", "solution": "\"\"\"\nWrite a python function to count number of digits in a given string.\nassert number_ctr('program2bedone') == 1\n\"\"\"\ndef number_ctr(s):\n    # Initialize a counter for digits\n    ctr = 0\n    \n    # Iterate through each character in the string\n    for i in s:\n        # Check if the character is a digit\n        if i.isdigit():\n            ctr += 1\n            \n    return ctr\n\n# Test the function with the provided test case\nassert number_ctr('program2bedone') == 1", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/733": [{"task_id": "Mbpp/733", "solution": "\"\"\"\nWrite a function to find the index of the first occurrence of a given number in a sorted array.\nassert find_first_occurrence([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5) == 1\n\"\"\"\ndef find_first_occurrence(arr, target):\n    # Initialize the left pointer to the start of the array\n    left = 0\n    \n    # Initialize the right pointer to one past the end of the array\n    right = len(arr)\n    \n    # Loop until the pointers meet\n    while left < right:\n        # Calculate the middle index\n        mid = (left + right) // 2\n        \n        # If the element at mid is less than the target, move the left pointer to mid + 1\n        if arr[mid] < target:\n            left = mid + 1\n        else:\n            # Otherwise, move the right pointer to mid\n            right = mid\n    \n    # Return the left pointer as the index of the first occurrence of the target\n    return left\n\n# Test the function with the provided test case\nassert find_first_occurrence([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5) == 1", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/721": [{"task_id": "Mbpp/721", "solution": "\"\"\"\nGiven a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\nassert maxAverageOfPath([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2\n\"\"\"\ndef maxAverageOfPath(matrix):\n    # Get the number of rows (N) in the matrix\n    n = len(matrix)\n    \n    # Initialize a DP table with -1 values\n    dp = [[-1 for _ in range(n)] for _ in range(n)]\n    \n    # Define a recursive function to calculate the maximum average path\n    def getMaxAvg(i, j):\n        # Base case: if out of bounds, return negative infinity\n        if i >= n or j >= n:\n            return float('-inf')\n        \n        # If already calculated, return the stored value\n        if dp[i][j] != -1:\n            return dp[i][j]\n        \n        # Calculate the current cost and add it to the sum of costs\n        curr_cost = matrix[i][j]\n        sum_of_costs = curr_cost\n        \n        # Recursively calculate the maximum average for the next steps\n        avg_right = getMaxAvg(i, j + 1)\n        avg_down = getMaxAvg(i + 1, j)\n        \n        # Add the maximum average of the two possible directions\n        sum_of_costs += max(avg_right, avg_down)\n        \n        # Store the result in the DP table\n        dp[i][j] = sum_of_costs / (1 + max(avg_right, avg_down))\n        \n        return dp[i][j]\n    \n    # Start the calculation from the top-left corner\n    return getMaxAvg(0, 0)\n\n# Test the function with the provided test case\nassert maxAverageOfPath([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/755": [{"task_id": "Mbpp/755", "solution": "\"\"\"\nWrite a function to find the second smallest number in a list.\nassert second_smallest([1, 2, -8, -2, 0, -2])==-2\n\"\"\"\ndef second_smallest(numbers):\n    # Initialize the first and second minimum values as infinity\n    first = second = float('inf')\n    \n    # Iterate through each number in the list\n    for num in numbers:\n        if num <= first:\n            # Update first and second if current number is smaller or equal\n            second = first\n            first = num\n        elif num < second:\n            # Update second only if current number is between first and second\n            second = num\n    \n    # Return the second smallest number found\n    return second\n\n# Test the function with the provided test case\nassert second_smallest([1, 2, -8, -2, 0, -2]) == -2", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[1, 1, -0.5, 0, 2, -2, -2]]], "plus_fail_tests": []}], "Mbpp/731": [{"task_id": "Mbpp/731", "solution": "\"\"\"\nWrite a function to find the lateral surface area of a cone given radius r and the height h.\nassert lateralsurface_cone(5,12)==204.20352248333654\n\"\"\"\nimport math\n\ndef lateralsurface_cone(r, h):\n    # Calculate the slant height using Pythagorean theorem\n    l = math.sqrt(r * r + h * h)\n    \n    # Calculate the lateral surface area of the cone\n    lateral_surface_area = math.pi * r * l\n    \n    return lateral_surface_area\n\n# Test the function with the provided test case\nassert lateralsurface_cone(5, 12) == 204.20352248333654", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/758": [{"task_id": "Mbpp/758", "solution": "\"\"\"\nWrite a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\nassert unique_sublists([[1, 3], [5, 7], [1, 3], [13, 15, 17], [5, 7], [9, 11]] )=={(1, 3): 2, (5, 7): 2, (13, 15, 17): 1, (9, 11): 1}\n\"\"\"\ndef unique_sublists(lst):\n    # Initialize an empty dictionary to store tuples and their counts\n    dict = {}\n    \n    # Iterate over each sublist in the given list\n    for sublist in lst:\n        # Convert the sublist to a tuple and check if it already exists in the dictionary\n        if tuple(sublist) not in dict:\n            # If not, add it with a count of 1\n            dict[tuple(sublist)] = 1\n        else:\n            # If yes, increment the count by 1\n            dict[tuple(sublist)] += 1\n    \n    # Return the dictionary containing tuples and their counts\n    return dict\n\n# Test the function with the provided test case\nassert unique_sublists([[1, 3], [5, 7], [1, 3], [13, 15, 17], [5, 7], [9, 11]]) == {(1, 3): 2, (5, 7): 2, (13, 15, 17): 1, (9, 11): 1}", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/725": [{"task_id": "Mbpp/725", "solution": "\"\"\"\nWrite a function to extract values between quotation marks \" \" of the given string.\nassert extract_quotation('Cortex \"A53\" Based \"multi\" tasking \"Processor\"') == ['A53', 'multi', 'Processor']\n\"\"\"\ndef extract_quotation(s):\n    # Split the string by spaces and filter out elements that contain double quotes\n    return [i for i in s.split() if '\"' in i]\n\n# Test the function with the provided test case\nassert extract_quotation('Cortex \"A53\" Based \"multi\" tasking \"Processor\"') == ['A53', 'multi', 'Processor']\n", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/720": [{"task_id": "Mbpp/720", "solution": "\"\"\"\nWrite a function to add a dictionary to the tuple. The output should be a tuple.\nassert add_dict_to_tuple((4, 5, 6), {\"MSAM\" : 1, \"is\" : 2, \"best\" : 3} ) == (4, 5, 6, {'MSAM': 1, 'is': 2, 'best': 3})\n\"\"\"\ndef add_dict_to_tuple(test_tup, dict_val):\n    # Convert the tuple to a list to allow modification\n    test_list = list(test_tup)\n    \n    # Append the dictionary to the list\n    test_list.append(dict_val)\n    \n    # Convert the list back to a tuple\n    res = tuple(test_list)\n    \n    return res\n\n# Test the function with the provided test case\nassert add_dict_to_tuple((4, 5, 6), {\"MSAM\": 1, \"is\": 2, \"best\": 3}) == (4, 5, 6, {'MSAM': 1, 'is': 2, 'best': 3})", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/730": [{"task_id": "Mbpp/730", "solution": "\"\"\"\nWrite a function to remove consecutive duplicates of a given list.\nassert consecutive_duplicates([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4 ])==[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4]\n\"\"\"\ndef consecutive_duplicates(nums):\n    # Initialize an empty list to store unique elements\n    result = []\n    \n    # Iterate through each element in the input list\n    for i in range(len(nums)):\n        # Check if it's the first element or not equal to the previous element\n        if i == 0 or nums[i] != nums[i - 1]:\n            # If so, append it to the result list\n            result.append(nums[i])\n    \n    return result\n\n# Test the function with the provided test case\nassert consecutive_duplicates([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4]\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/767": [{"task_id": "Mbpp/767", "solution": "\"\"\"\nWrite a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\nassert get_pairs_count([1,1,1,1],2) == 6\n\"\"\"\ndef get_pairs_count(arr, target_sum):\n    # Initialize counter for pairs\n    count = 0\n    \n    # Iterate through each element in the array\n    for i in range(len(arr)):\n        # Check all subsequent elements for pair sum\n        for j in range(i + 1, len(arr)):\n            if arr[i] + arr[j] == target_sum:\n                count += 1\n                \n    return count\n\n# Test the function with the provided test case\nassert get_pairs_count([1, 1, 1, 1], 2) == 6", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/753": [{"task_id": "Mbpp/753", "solution": "\"\"\"\nWrite a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\nassert min_k([('Manjeet', 10), ('Akshat', 4), ('Akash', 2), ('Nikhil', 8)], 2) == [('Akash', 2), ('Akshat', 4)]\n\"\"\"\ndef min_k(test_list, K):\n    # Sort the list of tuples based on the second element in descending order\n    res = sorted(test_list, key=lambda x: x[1], reverse=True)[:K]\n    return res\n\n# Test the function with the provided test case\nassert min_k([('Manjeet', 10), ('Akshat', 4), ('Akash', 2), ('Nikhil', 8)], 2) == [('Akash', 2), ('Akshat', 4)]\n", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/763": [{"task_id": "Mbpp/763", "solution": "\"\"\"\nWrite a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\nassert find_min_diff((1,5,3,19,18,25),6) == 1\n\"\"\"\ndef find_min_diff(arr, n):\n    # Sort the array to bring close numbers together\n    arr.sort()\n    \n    # Initialize minimum difference as the difference of first two elements\n    min_diff = arr[1] - arr[0]\n    \n    # Iterate through the sorted array to find the minimum difference\n    for i in range(1, n-1):\n        diff = arr[i+1] - arr[i]\n        if diff < min_diff:\n            min_diff = diff\n    \n    return min_diff\n\n# Test the function with the provided test case\nassert find_min_diff((1, 5, 3, 19, 18, 25), 6) == 1", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/751": [{"task_id": "Mbpp/751", "solution": "\"\"\"\nWrite a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\nassert check_min_heap([1, 2, 3, 4, 5, 6]) == True\n\"\"\"\ndef check_min_heap(arr):\n    # Function to check if the given array represents a min heap\n    n = len(arr)\n    \n    # Check each non-leaf node for the min heap property\n    for i in range(n // 2 - 1, -1, -1):\n        if arr[i] > arr[2 * i + 1]:\n            return False\n        if (2 * i + 2 < n) and (arr[i] > arr[2 * i + 2]):\n            return False\n    \n    return True\n\n# Test the function with the provided test case\nassert check_min_heap([1, 2, 3, 4, 5, 6]) == True\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/744": [{"task_id": "Mbpp/744", "solution": "\"\"\"\nWrite a function to check if the given tuple has any none value or not.\nassert check_none((10, 4, 5, 6, None)) == True\n\"\"\"\ndef check_none(test_tup):\n    # Check if 'None' is present in the tuple using the 'any()' function\n    res = any(ele is None for ele in test_tup)\n    return res\n\n# Test the function with the provided test case\nassert check_none((10, 4, 5, 6, None)) == True\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/762": [{"task_id": "Mbpp/762", "solution": "\"\"\"\nWrite a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\nassert check_monthnumber_number(6)==True\n\"\"\"\ndef check_monthnumber_number(month):\n    # Check if the month has exactly 30 days\n    return month == 4 or month == 6 or month == 9 or month == 11\n\n# Test the function with the provided test case\nassert check_monthnumber_number(6) == True", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/748": [{"task_id": "Mbpp/748", "solution": "\"\"\"\nWrite a function to put spaces between words starting with capital letters in a given string.\nassert capital_words_spaces(\"Python\") == 'Python'\n\"\"\"\ndef capital_words_spaces(text):\n    # Iterate through each character in the text\n    for i in range(len(text)):\n        # Check if the current character is uppercase and it's not at the beginning of the string\n        if text[i].isupper() and i != 0:\n            # Insert a space before the uppercase letter\n            text = text[:i] + \" \" + text[i:]\n    return text\n\n# Test the function with the provided test case\nassert capital_words_spaces(\"Python\") == 'Python'\n", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [["PythonProgrammingExamples"]], "plus_fail_tests": [["MyNameIsAIAndIAmHereToHelpYou"]]}], "Mbpp/769": [{"task_id": "Mbpp/769", "solution": "\"\"\"\nWrite a python function to get the difference between two lists.\nassert (Diff([10, 15, 20, 25, 30, 35, 40], [25, 40, 35])) == [10, 20, 30, 15]\n\"\"\"\ndef Diff(list1, list2):\n    # Use set operations to find elements in list1 that are not in list2\n    return list(set(list1) - set(list2))\n\n# Test the function with the provided test case\nassert (Diff([10, 15, 20, 25, 30, 35, 40], [25, 40, 35])) == [10, 20, 30, 15]\n", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[1, 2, 3, 4, 5], [6, 7, 1]]], "plus_fail_tests": [[[], [1, 2, 3]]]}], "Mbpp/633": [{"task_id": "Mbpp/633", "solution": "\"\"\"\nWrite a python function to find the sum of xor of all pairs of numbers in the given list.\nassert pair_xor_Sum([5,9,7,6],4) == 47\n\"\"\"\ndef pair_xor_Sum(arr, n):\n    # Initialize result\n    res = 0\n    \n    # Iterate over each bit position (0 to 31 for 32-bit integers)\n    for i in range(32):\n        count_ones = 0\n        count_zeros = 0\n        \n        # Count number of ones and zeros at the current bit position\n        for j in range(n):\n            if arr[j] & (1 << i):\n                count_ones += 1\n            else:\n                count_zeros += 1\n        \n        # Calculate contribution of current bit to the final result\n        res += (count_ones * count_zeros * (1 << i))\n    \n    return res\n\n# Test the function with the provided test case\nassert pair_xor_Sum([5, 9, 7, 6], 4) == 47", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/777": [{"task_id": "Mbpp/777", "solution": "\"\"\"\nWrite a python function to find the sum of non-repeated elements in a given list.\nassert find_sum([1,2,3,1,1,4,5,6]) == 21\n\"\"\"\ndef find_sum(nums):\n    # Initialize the sum to zero\n    total = 0\n    \n    # Iterate through each number in the list\n    for num in nums:\n        # Check if the count of the number in the list is exactly one\n        if nums.count(num) == 1:\n            # Add the number to the total sum\n            total += num\n            \n    # Return the total sum of non-repeated elements\n    return total\n\n# Test the function with the provided test case\nassert find_sum([1, 2, 3, 1, 1, 4, 5, 6]) == 21", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/737": [{"task_id": "Mbpp/737", "solution": "\"\"\"\nWrite a function to check whether the given string is starting with a vowel or not using regex.\nassert check_str(\"annie\")\n\"\"\"\nimport re\n\ndef check_str(string):\n    # Define the regular expression pattern for vowels at the beginning of the string\n    pattern = '^[aeiouAEIOU]'\n    \n    # Use re.match to check if the pattern matches the start of the string\n    if re.match(pattern, string):\n        return True\n    else:\n        return False\n\n# Test the function with the provided test case\nassert check_str(\"annie\") == True", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/782": [{"task_id": "Mbpp/782", "solution": "\"\"\"\nWrite a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\nassert odd_length_sum([1,2,4]) == 14\n\"\"\"\ndef odd_length_sum(arr):\n    n = len(arr)\n    total_sum = 0\n    \n    # Iterate over all possible starting points of subarrays\n    for i in range(n):\n        # Calculate the number of subarrays starting at index i\n        count = (i + 1) * (n - i)\n        \n        # If the count is odd, add the sum of elements from index i to total_sum\n        if count % 2 != 0:\n            total_sum += sum(arr[i:n])\n    \n    return total_sum\n\n# Test the function with the provided test case\nassert odd_length_sum([1, 2, 4]) == 14", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/781": [{"task_id": "Mbpp/781", "solution": "\"\"\"\nWrite a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\nassert count_divisors(10)\n\"\"\"\ndef count_divisors(n):\n    # Initialize a counter for divisors\n    divisor_count = 0\n    \n    # Loop through all numbers from 1 to n (inclusive)\n    for i in range(1, n + 1):\n        # If i is a divisor of n, increment the counter\n        if n % i == 0:\n            divisor_count += 1\n    \n    # Check if the number of divisors is even\n    return divisor_count % 2 == 0\n\n# Test the function with the provided test case\nassert count_divisors(10) == False", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/778": [{"task_id": "Mbpp/778", "solution": "\"\"\"\nWrite a function to pack consecutive duplicates of a given list elements into sublists.\nassert pack_consecutive_duplicates([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4])==[[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]\n\"\"\"\ndef pack_consecutive_duplicates(nums):\n    # Initialize an empty list to store the result\n    result = []\n    \n    # Iterate over the list using enumerate to get both index and value\n    for i, num in enumerate(nums):\n        # Check if it's the first element or not equal to the previous element\n        if i == 0 or nums[i] != nums[i - 1]:\n            # If so, start a new sublist\n            result.append([])\n        \n        # Append the current number to the last sublist in the result\n        result[-1].append(num)\n    \n    return result\n\n# Test the function with the provided test case\nassert pack_consecutive_duplicates([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]) == [[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/780": [{"task_id": "Mbpp/780", "solution": "\"\"\"\nWrite a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\nassert find_combinations([(2, 4), (6, 7), (5, 1), (6, 10)]) == [(8, 11), (7, 5), (8, 14), (11, 8), (12, 17), (11, 11)]\n\"\"\"\nfrom itertools import product\n\ndef find_combinations(test_list):\n    # Generate all possible combinations of sums from each tuple in the list\n    res = [tuple(sum(x) for x in zip(*pair)) for pair in product(*test_list)]\n    return res\n\n# Test the function with the provided test case\nassert find_combinations([(2, 4), (6, 7), (5, 1), (6, 10)]) == [(8, 11), (7, 5), (8, 14), (11, 8), (12, 17), (11, 11)]", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/790": [{"task_id": "Mbpp/790", "solution": "\"\"\"\nWrite a python function to check whether every even index contains even numbers of a given list.\nassert even_position([3,2,1]) == False\n\"\"\"\ndef even_position(nums):\n    # Iterate through the list using enumerate to get both index and value\n    for i, x in enumerate(nums):\n        # Check if the index is even and the number at that index is not even\n        if i % 2 == 0 and x % 2 != 0:\n            return False\n    return True\n\n# Test the function with the provided test case\nassert even_position([3, 2, 1]) == False\n", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/739": [{"task_id": "Mbpp/739", "solution": "\"\"\"\nWrite a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\nassert find_Index(2) == 4\n\"\"\"\ndef find_Index(n):\n    # Calculate the minimum value for n-digit numbers\n    min_val = 10 ** (n - 1)\n    \n    # Calculate the maximum value for n-digit numbers\n    max_val = 10 ** n - 1\n    \n    # Initialize variables to store the result and the current triangular number\n    res = 0\n    i = 1\n    \n    # Loop until we find the smallest triangular number greater than or equal to min_val\n    while True:\n        # Calculate the ith triangular number\n        tri_num = i * (i + 1) // 2\n        \n        # Check if the calculated triangular number is within the range of n-digit numbers\n        if min_val <= tri_num <= max_val:\n            res = i\n            break\n        \n        # Increment the counter to move to the next triangular number\n        i += 1\n    \n    return res\n\n# Test the function with the provided test case\nassert find_Index(2) == 4", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[100]]}], "Mbpp/801": [{"task_id": "Mbpp/801", "solution": "\"\"\"\nWrite a python function to count the number of equal numbers from three given integers.\nassert test_three_equal(1,1,1) == 3\n\"\"\"\ndef test_three_equal(x, y, z):\n    # Check if all three numbers are equal\n    if x == y == z:\n        return 3\n    else:\n        return 0\n\n# Test the function with the provided test case\nassert test_three_equal(1, 1, 1) == 3", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[1, 2, 2]], "plus_fail_tests": [[10, 10, 20]]}], "Mbpp/724": [{"task_id": "Mbpp/724", "solution": "\"\"\"\nWrite a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\nassert power_base_sum(2,100)==115\n\"\"\"\ndef power_base_sum(base, power):\n    # Calculate the result of raising 'base' to the power of 'power'\n    res = pow(base, power)\n    \n    # Initialize a variable to store the sum of digits\n    sum = 0\n    \n    # Loop through each digit in the result\n    while res > 0:\n        # Add the last digit to the sum\n        sum += res % 10\n        \n        # Remove the last digit from the result\n        res //= 10\n    \n    return sum\n\n# Test the function with the provided test case\nassert power_base_sum(2, 100) == 115", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/787": [{"task_id": "Mbpp/787", "solution": "\"\"\"\nWrite a function that matches a string that has an a followed by three 'b'.\nassert not text_match_three(\"ac\")\n\"\"\"\nimport re\n\ndef text_match_three(text):\n    # Define the pattern to match 'a' followed by exactly three 'b's\n    pattern = 'ab{3}'\n    \n    # Search for the pattern in the given text\n    if re.search(pattern, text):\n        return True\n    else:\n        return False\n\n# Test the function with the provided test case\nassert not text_match_three(\"ac\")\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/792": [{"task_id": "Mbpp/792", "solution": "\"\"\"\nWrite a python function to count the number of lists in a given number of lists.\nassert count_list([[1, 3], [5, 7], [9, 11], [13, 15, 17]]) == 4\n\"\"\"\ndef count_list(lists):\n    # Return the length of the list, which represents the number of sublists\n    return len(lists)\n\n# Test the function with the provided test case\nassert count_list([[1, 3], [5, 7], [9, 11], [13, 15, 17]]) == 4\n", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[[2, 3, [4, [5, [6, [7, [8, 9]]]]]]]]}], "Mbpp/796": [{"task_id": "Mbpp/796", "solution": "\"\"\"\nWrite function to find the sum of all items in the given dictionary.\nassert return_sum({'a': 100, 'b':200, 'c':300}) == 600\n\"\"\"\ndef return_sum(dict):\n    # Initialize sum to zero\n    sums = 0\n    \n    # Iterate through each value in the dictionary and add it to the sum\n    for i in dict.values():\n        sums += i\n    \n    # Return the total sum of all values\n    return sums\n\n# Test the function with the provided test case\nassert return_sum({'a': 100, 'b': 200, 'c': 300}) == 600\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/800": [{"task_id": "Mbpp/800", "solution": "\"\"\"\nWrite a function to remove all whitespaces from a string.\nassert remove_all_spaces('python  program')==('pythonprogram')\n\"\"\"\n# Define a function to remove all whitespaces from a given string\ndef remove_all_spaces(str1):\n    # Use the replace method to substitute all spaces with an empty string\n    return str1.replace(\" \", \"\")\n\n# Test cases to validate the function\nassert remove_all_spaces('python  program') == 'pythonprogram'\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/806": [{"task_id": "Mbpp/806", "solution": "\"\"\"\nWrite a function to find maximum run of uppercase characters in the given string.\nassert max_run_uppercase('GeMKSForGERksISBESt') == 5\n\"\"\"\ndef max_run_uppercase(s):\n    # Initialize variables to keep track of the current run length and the maximum run length\n    curr_run = 0\n    max_run = 0\n    \n    # Iterate through each character in the string\n    for i in range(len(s)):\n        # Check if the current character is uppercase\n        if s[i].isupper():\n            # Increment the current run length\n            curr_run += 1\n            # Update the maximum run length if the current run is longer\n            max_run = max(max_run, curr_run)\n        else:\n            # Reset the current run length if the character is not uppercase\n            curr_run = 0\n            \n    return max_run\n\n# Test the function with the provided test case\nassert max_run_uppercase('GeMKSForGERksISBESt') == 5\n", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [["Aaa"]]}], "Mbpp/799": [{"task_id": "Mbpp/799", "solution": "\"\"\"\nWrite a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nassert left_rotate(16,2) == 64\n\"\"\"\ndef left_rotate(n, d):\n    # Perform left rotation on n by d bits\n    return (n << d) | (n >> (32 - d))\n\n# Test the function with the provided test case\nassert left_rotate(16, 2) == 64", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/803": [{"task_id": "Mbpp/803", "solution": "\"\"\"\nWrite a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\nassert not is_perfect_square(10)\n\"\"\"\ndef is_perfect_square(n):\n    # Check if the input number is less than 2\n    if n < 2:\n        return False\n    \n    # Calculate the integer part of the square root of n\n    x = int(n ** 0.5)\n    \n    # Check if the square of x equals n\n    if x * x == n:\n        return True\n    else:\n        return False\n\n# Test the function with the provided test case\nassert not is_perfect_square(10)\n", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[false]]}], "Mbpp/765": [{"task_id": "Mbpp/765", "solution": "\"\"\"\nWrite a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\nassert is_polite(7) == 11\n\"\"\"\ndef is_polite(n):\n    # Initialize count of polite numbers found so far\n    count = 0\n    \n    # Iterate through natural numbers starting from 1\n    i = 1\n    while True:\n        # Check if the current number is not a power of two\n        if (i & (i - 1)) != 0:\n            # Increment the count of polite numbers\n            count += 1\n            \n            # If we have found n polite numbers, return the current number\n            if count == n:\n                return i\n        \n        # Move to the next natural number\n        i += 1\n\n# Test the function with the provided test case\nassert is_polite(7) == 11\n", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/783": [{"task_id": "Mbpp/783", "solution": "\"\"\"\nWrite a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\nassert rgb_to_hsv(255, 255, 255)==(0, 0.0, 100.0)\n\"\"\"\ndef rgb_to_hsv(r, g, b):\n    # Normalize RGB values to the range [0, 1]\n    r /= 255.0\n    g /= 255.0\n    b /= 255.0\n    \n    # Calculate maximum and minimum of RGB values\n    max_val = max(r, g, b)\n    min_val = min(r, g, b)\n    \n    # Calculate the difference between max and min\n    delta = max_val - min_val\n    \n    # Calculate hue (H)\n    if delta == 0:\n        h = 0\n    elif max_val == r:\n        h = ((g - b) / delta) % 6\n    elif max_val == g:\n        h = ((b - r) / delta + 2) % 6\n    else:  # max_val == b\n        h = ((r - g) / delta + 4) % 6\n    \n    # Convert hue from radians to degrees\n    h *= 60\n    \n    # Calculate saturation (S)\n    if max_val == 0:\n        s = 0\n    else:\n        s = (delta / max_val) * 100\n    \n    # Calculate value (V)\n    v = max_val * 100\n    \n    return (h, s, v)\n\n# Test the function with the provided test case\nassert rgb_to_hsv(255, 255, 255) == (0, 0.0, 100.0)", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[10, 215, 110]], "plus_fail_tests": [[1, 3, 0]]}], "Mbpp/788": [{"task_id": "Mbpp/788", "solution": "\"\"\"\nWrite a function to create a new tuple from the given string and list.\nassert new_tuple([\"WEB\", \"is\"], \"best\") == ('WEB', 'is', 'best')\n\"\"\"\ndef new_tuple(test_list, test_str):\n    # Convert the string into a tuple using tuple() and concatenate it with the list converted to a tuple\n    res = tuple(test_list) + (test_str,)\n    return res\n\n# Test the function with the provided test case\nassert new_tuple([\"WEB\", \"is\"], \"best\") == ('WEB', 'is', 'best')\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/786": [{"task_id": "Mbpp/786", "solution": "\"\"\"\nWrite a function to locate the right insertion point for a specified value in sorted order.\nassert right_insertion([1,2,4,5],6)==4\n\"\"\"\ndef right_insertion(arr, x):\n    # Initialize left pointer to 0\n    l = 0\n    \n    # Iterate through each element in the array\n    for i in range(len(arr)):\n        # If current element is less than or equal to x, move left pointer to next position\n        if arr[i] <= x:\n            l += 1\n    \n    # Return the final position of the left pointer\n    return l\n\n# Test the function with the provided test case\nassert right_insertion([1, 2, 4, 5], 6) == 4", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[[50.64327388212607, -72.16612625583227, 95.25630303581863, -75.73998556144497, 11.857449640680656, 90.05081633927793, -90.20293226837086, -12.02758648076636, -35.964731488229475], 7]]}], "Mbpp/784": [{"task_id": "Mbpp/784", "solution": "\"\"\"\nWrite a function to find the product of first even and odd number of a given list.\nassert mul_even_odd([1,3,5,7,4,1,6,8])==4\n\"\"\"\ndef mul_even_odd(numbers):\n    # Initialize variables to store the first even and odd numbers\n    first_even = None\n    first_odd = None\n    \n    # Iterate through each number in the list\n    for num in numbers:\n        if first_even is None and num % 2 == 0:\n            first_even = num  # Assign the first even number found\n        elif first_odd is None and num % 2 != 0:\n            first_odd = num   # Assign the first odd number found\n        \n        # If both even and odd numbers are found, break out of the loop\n        if first_even is not None and first_odd is not None:\n            break\n    \n    # Return the product of the first even and odd numbers\n    return first_even * first_odd\n\n# Test the function with the provided test case\nassert mul_even_odd([1, 3, 5, 7, 4, 1, 6, 8]) == 4", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/809": [{"task_id": "Mbpp/809", "solution": "\"\"\"\nWrite a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\nassert check_smaller((1, 2, 3), (2, 3, 4)) == False\n\"\"\"\ndef check_smaller(test_tup1, test_tup2):\n    # Check if all elements in test_tup2 are less than their corresponding elements in test_tup1\n    res = all(x < y for x, y in zip(test_tup1, test_tup2))\n    return res\n\n# Test the function with the provided test case\nassert check_smaller((1, 2, 3), (2, 3, 4)) == False\n", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/793": [{"task_id": "Mbpp/793", "solution": "\"\"\"\nWrite a python function to find the last position of an element in a sorted array.\nassert last([1,2,3],1) == 0\n\"\"\"\ndef last(arr, x):\n    # Initialize left pointer to 0\n    l = 0\n    \n    # Initialize right pointer to the length of the array minus 1\n    r = len(arr) - 1\n    \n    # Initialize result variable to -1 (indicating not found)\n    res = -1\n    \n    # Perform binary search\n    while l <= r:\n        mid = l + (r - l) // 2\n        \n        # If the middle element is greater than x, move the right pointer to mid-1\n        if arr[mid] > x:\n            r = mid - 1\n        \n        # If the middle element is less than x, move the left pointer to mid+1\n        elif arr[mid] < x:\n            l = mid + 1\n        \n        # If the middle element is equal to x, update result and move the left pointer to mid+1\n        else:\n            res = mid\n            l = mid + 1\n    \n    # Return the last found index or -1 if not found\n    return res\n\n# Test the function with the provided test case\nassert last([1, 2, 3], 1) == 0", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/785": [{"task_id": "Mbpp/785", "solution": "\"\"\"\nWrite a function to convert tuple string to integer tuple.\nassert tuple_str_int(\"(7, 8, 9)\") == (7, 8, 9)\n\"\"\"\ndef tuple_str_int(test_str):\n    # Split the input string by comma and convert each element to an integer\n    res = tuple(int(num) for num in test_str.split(\", \"))\n    return res\n\n# Test the function with the provided test case\nassert tuple_str_int(\"(7, 8, 9)\") == (7, 8, 9)\n", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/797": [{"task_id": "Mbpp/797", "solution": "\"\"\"\nWrite a python function to find the sum of all odd natural numbers within the range l and r.\nassert sum_in_range(2,5) == 8\n\"\"\"\ndef sum_in_range(l, r):\n    # Calculate the sum of all odd numbers between l and r (inclusive)\n    return ((r + 1) // 2 - (l - 1) // 2) * ((r + 1) % 2 + (l - 1) % 2)\n\n# Test the function with the provided test case\nassert sum_in_range(2, 5) == 8", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/791": [{"task_id": "Mbpp/791", "solution": "\"\"\"\nWrite a function to remove tuples from the given tuple.\nassert remove_nested((1, 5, 7, (4, 6), 10)) == (1, 5, 7, 10)\n\"\"\"\ndef remove_nested(test_tup):\n    # Using list comprehension to filter out nested tuples\n    res = tuple(item for item in test_tup if not isinstance(item, tuple))\n    return res\n\n# Test the function with the provided test case\nassert remove_nested((1, 5, 7, (4, 6), 10)) == (1, 5, 7, 10)\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/794": [{"task_id": "Mbpp/794", "solution": "\"\"\"\nWrite a function that matches a string that has an 'a' followed by anything, ending in 'b'.\nassert text_starta_endb(\"aabbbb\")\n\"\"\"\nimport re\n\ndef text_starta_endb(text):\n    # Define the pattern to match 'a' followed by any characters and ending with 'b'\n    pattern = 'ab$'\n    \n    # Use regex search to find if the pattern exists in the text\n    if re.search(pattern, text):\n        return True\n    else:\n        return False\n\n# Test the function with the provided test case\nassert text_starta_endb(\"aabbbb\") == True", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/798": [{"task_id": "Mbpp/798", "solution": "\"\"\"\nWrite a python function to find the sum of an array.\nassert _sum([1, 2, 3]) == 6\n\"\"\"\ndef _sum(arr):\n    # Initialize the sum variable to zero\n    total = 0\n    \n    # Iterate through each element in the array\n    for x in arr:\n        # Add the current element to the total sum\n        total += x\n    \n    # Return the computed sum\n    return total\n\n# Test the function with the provided test case\nassert _sum([1, 2, 3]) == 6\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/804": [{"task_id": "Mbpp/804", "solution": "\"\"\"\nWrite a function to check whether the product of numbers in a list is even or not.\nassert is_product_even([1,2,3])\n\"\"\"\ndef is_product_even(numbers):\n    # Check if all numbers in the list are even\n    return all(x % 2 == 0 for x in numbers)\n\n# Test the function with the provided test case\nassert is_product_even([1, 2, 3]) == False\n", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[[1, 2, 3, 4, 5]]]}], "Mbpp/808": [{"task_id": "Mbpp/808", "solution": "\"\"\"\nWrite a function to check if the given tuples contain the k or not.\nassert check_K((10, 4, 5, 6, 8), 6) == True\n\"\"\"\ndef check_K(test_tup, K):\n    # Check if 'K' is present in the tuple 'test_tup'\n    res = K in test_tup\n    return res\n\n# Test the function with the provided test case\nassert check_K((10, 4, 5, 6, 8), 6) == True", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/807": [{"task_id": "Mbpp/807", "solution": "\"\"\"\nWrite a python function to find the first odd number in a given list of numbers.\nassert first_odd([1,3,5]) == 1\n\"\"\"\ndef first_odd(numbers):\n    # Use a generator expression to iterate through the list\n    return next((num for num in numbers if num % 2 != 0), None)\n\n# Test the function with the provided test case\nassert first_odd([1, 3, 5]) == 1\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/805": [{"task_id": "Mbpp/805", "solution": "\"\"\"\nWrite a function that returns the list in a list of lists whose sum of elements is the highest.\nassert max_sum_list([[1,2,3], [4,5,6], [10,11,12], [7,8,9]])==[10, 11, 12]\n\"\"\"\ndef max_sum_list(lists):\n    # Calculate the sum of each sublist and return the one with the maximum sum\n    return max(lists, key=sum)\n\n# Test the function with the provided test case\nassert max_sum_list([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]) == [10, 11, 12]\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/745": [{"task_id": "Mbpp/745", "solution": "\"\"\"\nWrite a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nassert divisible_by_digits(1,22)==[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]\n\"\"\"\ndef divisible_by_digits(startnum, endnum):\n    # Define a lambda function to check if a number is divisible by all its digits\n    divisible = lambda x: all(int(digit) != 0 and x % int(digit) == 0 for digit in str(x))\n    \n    # Use list comprehension to filter numbers between startnum and endnum that satisfy the condition\n    result = [x for x in range(startnum, endnum + 1) if divisible(x)]\n    \n    return result\n\n# Test the function with the provided test case\nassert divisible_by_digits(1, 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/630": [{"task_id": "Mbpp/630", "solution": "\"\"\"\nWrite a function to extract all the adjacent coordinates of the given coordinate tuple.\nassert get_coordinates((3, 4)) == [[2, 3], [2, 4], [2, 5], [3, 3], [3, 4], [3, 5], [4, 3], [4, 4], [4, 5]]\n\"\"\"\ndef get_coordinates(coord):\n    # Extract x and y from the coordinate tuple\n    x = coord[0]\n    y = coord[1]\n    \n    # Initialize an empty list to store the result\n    res = []\n    \n    # Iterate over possible x values (one less and one more than the current x)\n    for i in range(x - 1, x + 2):\n        # Iterate over possible y values (one less and one more than the current y)\n        for j in range(y - 1, y + 2):\n            # Check if the current point is not the same as the original point\n            if i != x or j != y:\n                # Append the point to the result list\n                res.append([i, j])\n    \n    return res\n\n# Test the function with the provided test case\nassert get_coordinates((3, 4)) == [[2, 3], [2, 4], [2, 5], [3, 3], [3, 4], [3, 5], [4, 3], [4, 4], [4, 5]]", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/453": [{"task_id": "Mbpp/453", "solution": "\"\"\"\nWrite a python function to find the sum of even factors of a number.\nassert sumofFactors(18) == 26\n\"\"\"\ndef sumofFactors(n):\n    # Initialize result\n    res = 0\n    \n    # Iterate through all numbers from 1 to n\n    for i in range(1, n + 1):\n        # Check if i is a factor of n\n        if (n % i == 0):\n            # Check if i is an even number\n            if (i % 2 == 0):\n                res += i\n                \n    return res\n\n# Test the function with the provided test case\nassert sumofFactors(18) == 26", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/255": [{"task_id": "Mbpp/255", "solution": "\"\"\"\nWrite a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\nassert combinations_colors( [\"Red\",\"Green\",\"Blue\"],1)==[('Red',), ('Green',), ('Blue',)]\n\"\"\"\ndef combinations_colors(colors, n):\n    # Initialize an empty list to store the combinations\n    result = []\n    \n    # Helper function to generate combinations recursively\n    def combine(current_combination, remaining_elements):\n        if len(current_combination) == n:\n            result.append(tuple(current_combination))\n            return\n        for element in remaining_elements:\n            current_combination.append(element)\n            combine(current_combination, remaining_elements)\n            current_combination.pop()  # Backtrack to explore other combinations\n    \n    # Start the recursive combination generation from the full list of colors\n    combine([], colors)\n    \n    return result\n\n# Test the function with the provided test case\nassert combinations_colors([\"Red\", \"Green\", \"Blue\"], 1) == [('Red',), ('Green',), ('Blue',)]", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[["Red", "Green", "Blue"], 2]], "plus_fail_tests": [[["A", "B", "C", "D"], 4]]}], "Mbpp/311": [{"task_id": "Mbpp/311", "solution": "\"\"\"\nWrite a python function to set the left most unset bit.\nassert set_left_most_unset_bit(10) == 14\n\"\"\"\ndef set_left_most_unset_bit(n):\n    # Check if all bits of n are set\n    if (n & (n + 1)) == 0:\n        return n\n    \n    i = 0\n    while n != 0:\n        # Set the leftmost unset bit\n        n |= (1 << i)\n        i += 1\n    \n    return n\n\n# Test the function with the provided test case\nassert set_left_most_unset_bit(10) == 14\n", "base_status": "timeout", "plus_status": "timeout", "base_fail_tests": [], "plus_fail_tests": []}]}}