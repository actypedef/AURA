{"date": "2025-06-02 20:52", "hash": "ebe95df0d5220f00cedd6f4bddea35e4", "eval": {"Mbpp/16": [{"task_id": "Mbpp/16", "solution": "\"\"\"\nWrite a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nassert text_lowercase_underscore(\"aab_cbbbc\")==(True)\n\"\"\"\nimport re\n\ndef text_lowercase_underscore(text):\n    # Define the pattern for lowercase letters separated by an underscore\n    pattern = '^[a-z]+_[a-z]+$'\n    \n    # Use regular expression search to find matches according to the pattern\n    if re.search(pattern,  text):\n        return True\n    else:\n        return False\n\n# Test the function with the provided test case\nassert text_lowercase_underscore(\"aab_cbbbc\") == (True)", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/8": [{"task_id": "Mbpp/8", "solution": "\"\"\"\nWrite a function to find squares of individual elements in a list.\nassert square_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]\n\"\"\"\ndef square_nums(nums):\n    # Use list comprehension to square each element in the list\n    return [i ** 2 for i in nums]\n\n# Test the function with the provided test case\nassert square_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 4, 9, 16, 25, 36, 49, 64, 81, 100]\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/59": [{"task_id": "Mbpp/59", "solution": "\"\"\"\nWrite a function to find the nth octagonal number.\nassert is_octagonal(5) == 65\n\"\"\"\ndef is_octagonal(n):\n    # Calculate the nth octagonal number using the formula: n * (3n - 2)\n    return n * (3 * n - 2)\n\n# Test the function with the provided test case\nassert is_octagonal(5) == 65\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/18": [{"task_id": "Mbpp/18", "solution": "\"\"\"\nWrite a function to remove characters from the first string which are present in the second string.\nassert remove_dirty_chars(\"probasscurve\", \"pros\") == 'bacuve'\n\"\"\"\ndef remove_dirty_chars(str1, str2):\n    # Create a set of characters from the second string for quick lookup\n    dirty_chars = set(str2)\n    \n    # Use list comprehension to filter out characters present in the second string\n    result = ''.join([char for char in str1 if char not in dirty_chars])\n    \n    return result\n\n# Test the function with the provided test case\nassert remove_dirty_chars(\"probasscurve\", \"pros\") == 'bacuve'\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/58": [{"task_id": "Mbpp/58", "solution": "\"\"\"\nWrite a python function to check whether the given two integers have opposite sign or not.\nassert opposite_Signs(1,-2) == True\n\"\"\"\ndef opposite_Signs(x, y):\n    # Check if the product of x and y is negative\n    return (x ^ y) < 0\n\n# Test the function with the provided test case\nassert opposite_Signs(1, -2) == True", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/2": [{"task_id": "Mbpp/2", "solution": "\"\"\"\nWrite a function to find the shared elements from the given two lists.\nassert set(similar_elements((3, 4, 5, 6),(5, 7, 4, 10))) == set((4, 5))\n\"\"\"\ndef similar_elements(test_tup1, test_tup2):\n    # Use set intersection to find common elements between the two tuples\n    res = tuple(set(test_tup1) & set(test_tup2))\n    return res\n\n# Test the function with the provided test case\nassert set(similar_elements((3, 4, 5, 6), (5, 7, 4, 10))) == set((4, 5))\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/6": [{"task_id": "Mbpp/6", "solution": "\"\"\"\nWrite a python function to check whether the two numbers differ at one bit position only or not.\nassert differ_At_One_Bit_Pos(13,9) == True\n\"\"\"\ndef differ_At_One_Bit_Pos(x, y):\n    # XOR the two numbers to find differing bits\n    xor_result = x ^ y\n    \n    # Check if there is exactly one bit set in the result\n    return (xor_result & (xor_result - 1)) == 0\n\n# Test the function with the provided test case\nassert differ_At_One_Bit_Pos(13, 9) == True", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/20": [{"task_id": "Mbpp/20", "solution": "\"\"\"\nWrite a function to check if the given number is woodball or not.\nassert is_woodall(383) == True\n\"\"\"\ndef is_woodall(n):\n    # Check if n is less than 2, which cannot be a Woodall number\n    if n < 2:\n        return False\n    \n    # Initialize k to 0\n    k = 0\n    \n    # Loop until n becomes odd\n    while (n & 1) == 0:\n        n >>= 1  # Right shift n by 1 bit\n        k += 1  # Increment k\n    \n    # Check if n is now equal to 1 and k is even\n    return n == 1 and k % 2 == 0\n\n# Test the function with the provided test case\nassert is_woodall(383) == True", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/17": [{"task_id": "Mbpp/17", "solution": "\"\"\"\nWrite a function that returns the perimeter of a square given its side length as input.\nassert square_perimeter(10)==40\n\"\"\"\ndef square_perimeter(side):\n    # Calculate the perimeter of the square using the formula: 4 * side length\n    return 4 * side\n\n# Test the function with the provided test case\nassert square_perimeter(10) == 40\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/64": [{"task_id": "Mbpp/64", "solution": "\"\"\"\nWrite a function to sort a list of tuples using the second value of each tuple.\nassert subject_marks([('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)])==[('Social sciences', 82), ('English', 88), ('Science', 90), ('Maths', 97)]\n\"\"\"\ndef subject_marks(marks):\n    # Sort the list of tuples based on the second item (marks) in descending order\n    return sorted(marks, key=lambda x: x[1], reverse=True)\n\n# Test the function with the provided test case\nassert subject_marks([('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)]) == [('Social sciences', 82), ('English', 88), ('Science', 90), ('Maths', 97)]\n", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/57": [{"task_id": "Mbpp/57", "solution": "\"\"\"\nWrite a python function to find the largest number that can be formed with the given list of digits.\nassert find_Max_Num([1,2,3]) == 321\n\"\"\"\ndef find_Max_Num(digits):\n    # Sort the digits in descending order\n    digits.sort(reverse=True)\n    \n    # Initialize an empty string to store the result\n    max_num = \"\"\n    \n    # Iterate through the sorted digits and append them to the result string\n    for i in range(len(digits)):\n        max_num += str(digits[i])\n    \n    # Convert the result string back to an integer and return it\n    return int(max_num)\n\n# Test the function with the provided test case\nassert find_Max_Num([1, 2, 3]) == 321", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/19": [{"task_id": "Mbpp/19", "solution": "\"\"\"\nWrite a function to find whether a given array of integers contains any duplicate element.\nassert test_duplicate(([1,2,3,4,5]))==False\n\"\"\"\ndef test_duplicate(nums):\n    # Convert the list to a set to remove duplicates and compare lengths\n    return len(set(nums)) != len(nums)\n\n# Test the function with the provided test case\nassert test_duplicate([1, 2, 3, 4, 5]) == False\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/11": [{"task_id": "Mbpp/11", "solution": "\"\"\"\nWrite a python function to remove first and last occurrence of a given character from the string.\nassert remove_Occ(\"hello\",\"l\") == \"heo\"\n\"\"\"\ndef remove_Occ(s, ch):\n    # Find the index of the first occurrence of the character\n    first_occurrence = s.find(ch)\n    \n    # If the character is not found, return the original string\n    if first_occurrence == -1:\n        return s\n    \n    # Remove the first occurrence\n    s = s[:first_occurrence] + s[first_occurrence+1:]\n    \n    # Find the index of the last occurrence of the character\n    last_occurrence = s.rfind(ch)\n    \n    # If the character is not found (which should not happen), return the modified string\n    if last_occurrence == -1:\n        return s\n    \n    # Remove the last occurrence\n    s = s[:last_occurrence] + s[last_occurrence+1:]\n    \n    return s\n\n# Test the function with the provided test case\nassert remove_Occ(\"hello\", \"l\") == \"heo\"", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/56": [{"task_id": "Mbpp/56", "solution": "\"\"\"\nWrite a python function to check if a given number is one less than twice its reverse.\nassert check(70) == False\n\"\"\"\ndef check(n):\n    # Reverse the digits of the number\n    rev = 0\n    temp = n\n    \n    while temp > 0:\n        rem = temp % 10\n        rev = (rev * 10) + rem\n        temp //= 10\n    \n    # Check if the original number is one less than twice its reverse\n    return (2 * rev - 1 == n)\n\n# Test the function with the provided test case\nassert check(70) == False\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/69": [{"task_id": "Mbpp/69", "solution": "\"\"\"\nWrite a function to check whether a list contains the given sublist or not.\nassert is_sublist([2,4,3,5,7],[3,7])==False\n\"\"\"\ndef is_sublist(main_list, sub_list):\n    # Check if the sub_list is empty or equal to the main_list\n    if sub_list == [] or sub_list == main_list:\n        return True\n    # Check if the length of sub_list is greater than main_list\n    elif len(sub_list) > len(main_list):\n        return False\n    else:\n        # Iterate through the main_list to find the start of the sub_list\n        for i in range(len(main_list)):\n            if main_list[i] == sub_list[0]:\n                n = 1\n                # Continue checking subsequent elements\n                while (n < len(sub_list)) and (main_list[i + n] == sub_list[n]):\n                    n += 1\n                # If all elements match, return True\n                if n == len(sub_list):\n                    return True\n    # If no match found, return False\n    return False\n\n# Test the function with the provided test case\nassert is_sublist([2, 4, 3, 5, 7], [3, 7]) == False", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/89": [{"task_id": "Mbpp/89", "solution": "\"\"\"\nWrite a function to find the closest smaller number than n.\nassert closest_num(11) == 10\n\"\"\"\ndef closest_num(n):\n    # Subtract 1 from the given number to get the closest smaller number\n    return (n - 1)\n\n# Test the function with the provided test case\nassert closest_num(11) == 10\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/68": [{"task_id": "Mbpp/68", "solution": "\"\"\"\nWrite a python function to check whether the given array is monotonic or not.\nassert is_Monotonic([6, 5, 4, 4]) == True\n\"\"\"\ndef is_Monotonic(A):\n    # Check if the array is non-decreasing or non-increasing\n    return (all(A[i] <= A[i + 1] for i in range(len(A) - 1)) or \n            all(A[i] >= A[i + 1] for i in range(len(A) - 1)))\n\n# Test the function with the provided test case\nassert is_Monotonic([6, 5, 4, 4]) == True", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/65": [{"task_id": "Mbpp/65", "solution": "\"\"\"\nWrite a function to flatten a list and sum all of its elements.\nassert recursive_list_sum(([1, 2, [3,4],[5,6]]))==21\n\"\"\"\ndef recursive_list_sum(lst):\n    # Initialize sum to zero\n    total = 0\n    \n    # Iterate through each element in the list\n    for i in lst:\n        # Check if the element is a list\n        if isinstance(i, list):\n            # Recursively call the function if it's a list\n            total += recursive_list_sum(i)\n        else:\n            # Add the element to the total sum if it's not a list\n            total += i\n    \n    # Return the total sum of the list elements\n    return total\n\n# Test the function with the provided test case\nassert recursive_list_sum([1, 2, [3, 4], [5, 6]]) == 21", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/85": [{"task_id": "Mbpp/85", "solution": "\"\"\"\nWrite a function to find the surface area of a sphere.\nassert math.isclose(surfacearea_sphere(10), 1256.6370614359173, rel_tol=0.001)\n\"\"\"\nimport math\n\ndef surfacearea_sphere(r):\n    # Calculate the surface area using the formula 4 * pi * r^2\n    return 4 * math.pi * (r ** 2)\n\n# Test the function with the provided test case\nassert math.isclose(surfacearea_sphere(10), 1256.6370614359173, rel_tol=0.001)\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/9": [{"task_id": "Mbpp/9", "solution": "\"\"\"\nWrite a python function to find the minimum number of rotations (greater than 0) required to get the same string.\nassert find_Rotations(\"aaaa\") == 1\n\"\"\"\ndef find_Rotations(str):\n    # Concatenate the string with itself to handle rotations\n    temp = str + str\n    \n    # Initialize the result as the length of the original string\n    res = len(str)\n    \n    # Iterate through the concatenated string to find the minimum rotations\n    for i in range(1, len(str)):\n        count = 0\n        \n        # Compare characters from the current position to the end of the original string\n        for j in range(len(str)):\n            if temp[i + j] != str[j]:\n                count += 1\n        \n        # Update the result if a smaller rotation count is found\n        res = min(res, count)\n    \n    return res\n\n# Test the function with the provided test case\nassert find_Rotations(\"aaaa\") == 1", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/87": [{"task_id": "Mbpp/87", "solution": "\"\"\"\nWrite a function to merge three dictionaries into a single dictionary.\nassert merge_dictionaries_three({ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" }, { \"G\": \"Green\", \"W\": \"White\" },{ \"O\": \"Orange\", \"W\": \"White\", \"B\": \"Black\" })=={'B': 'Black', 'R': 'Red', 'P': 'Pink', 'G': 'Green', 'W': 'White', 'O': 'Orange'}\n\"\"\"\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    # Create an empty dictionary to store the merged results\n    result = {}\n    \n    # Add all items from the first dictionary to the result\n    for key, value in dict1.items():\n        result[key] = value\n    \n    # Add all items from the second dictionary to the result\n    for key, value in dict2.items():\n        result[key] = value\n    \n    # Add all items from the third dictionary to the result\n    for key, value in dict3.items():\n        result[key] = value\n    \n    return result\n\n# Test the function with the provided test case\nassert merge_dictionaries_three(\n    {\"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\"},\n    {\"G\": \"Green\", \"W\": \"White\"},\n    {\"O\": \"Orange\", \"W\": \"White\", \"B\": \"Black\"}\n) == {'B': 'Black', 'R': 'Red', 'P': 'Pink', 'G': 'Green', 'W': 'White', 'O': 'Orange'}", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/91": [{"task_id": "Mbpp/91", "solution": "\"\"\"\nWrite a function to check if a string is present as a substring in a given list of string values.\nassert find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"],\"ack\")==True\n\"\"\"\ndef find_substring(list1, s):\n    # Check if any element in the list contains the substring 's'\n    return any(s in x for x in list1)\n\n# Test the function with the provided test case\nassert find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ack\") == True\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/3": [{"task_id": "Mbpp/3", "solution": "\"\"\"\nWrite a python function to identify non-prime numbers.\nassert is_not_prime(2) == False\n\"\"\"\ndef is_not_prime(n):\n    # Check if the number is less than 2\n    if n < 2:\n        return True\n    # Check for factors from 2 to the square root of n\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return True\n    return False\n\n# Test the function with the provided test case\nassert is_not_prime(2) == False\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/75": [{"task_id": "Mbpp/75", "solution": "\"\"\"\nWrite a function to find tuples which have all elements divisible by k from the given list of tuples.\nassert find_tuples([(6, 24, 12), (7, 9, 6), (12, 18, 21)], 6) == [(6, 24, 12)]\n\"\"\"\ndef find_tuples(test_list, K):\n    # Use list comprehension to filter tuples where all elements are divisible by K\n    res = [tup for tup in test_list if all(ele % K == 0 for ele in tup)]\n    return res\n\n# Test the function with the provided test case\nassert find_tuples([(6, 24, 12), (7, 9, 6), (12, 18, 21)], 6) == [(6, 24, 12)]\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/61": [{"task_id": "Mbpp/61", "solution": "\"\"\"\nWrite a python function to count the number of substrings with the sum of digits equal to their length.\nassert count_Substrings('112112') == 6\n\"\"\"\ndef count_Substrings(s):\n    # Initialize variables to store the result and the cumulative sum\n    res = 0\n    cum_sum = 0\n    \n    # Create a dictionary to store the frequency of (cumulative sum - index)\n    freq = {0: 1}\n    \n    # Iterate over the string with index\n    for i in range(len(s)):\n        # Update the cumulative sum by adding the current digit\n        cum_sum += int(s[i])\n        \n        # Calculate the required value for the substring condition\n        req_val = cum_sum - (i + 1)\n        \n        # Add the frequency of the required value to the result\n        if req_val in freq:\n            res += freq[req_val]\n        \n        # Update the frequency dictionary\n        if req_val in freq:\n            freq[req_val] += 1\n        else:\n            freq[req_val] = 1\n    \n    return res\n\n# Test the function with the provided test case\nassert count_Substrings('112112') == 6", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/77": [{"task_id": "Mbpp/77", "solution": "\"\"\"\nWrite a python function to find whether a number is divisible by 11.\nassert is_Diff (12345) == False\n\"\"\"\ndef is_Diff(n):\n    # Convert the number to a string to easily access each digit\n    s = str(n)\n    \n    # Initialize variables to store the sum of digits at even and odd positions\n    even_sum = 0\n    odd_sum = 0\n    \n    # Iterate through the digits of the number\n    for i in range(len(s)):\n        if i % 2 == 0:\n            # Add digit at even position to even_sum\n            even_sum += int(s[i])\n        else:\n            # Add digit at odd position to odd_sum\n            odd_sum += int(s[i])\n    \n    # Check if the difference between even_sum and odd_sum is divisible by 11\n    return (even_sum - odd_sum) % 11 == 0\n\n# Test the function with the provided test case\nassert is_Diff(12345) == False", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[-1212]]}], "Mbpp/4": [{"task_id": "Mbpp/4", "solution": "\"\"\"\nWrite a function to find the n largest integers from a given list of numbers, returned in descending order.\nassert heap_queue_largest( [25, 35, 22, 85, 14, 65, 75, 22, 58],3)==[85, 75, 65]\n\"\"\"\nimport heapq as hq\n\ndef heap_queue_largest(nums, n):\n    # Use nlargest from heapq to get the n largest elements\n    largest_nums = hq.nlargest(n, nums)\n    return largest_nums\n\n# Test the function with the provided test case\nassert heap_queue_largest([25, 35, 22, 85, 14, 65, 75, 22, 58], 3) == [85, 75, 65]", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/63": [{"task_id": "Mbpp/63", "solution": "\"\"\"\nWrite a function to find the maximum difference between available pairs in the given tuple list.\nassert max_difference([(3, 5), (1, 7), (10, 3), (1, 2)]) == 7\n\"\"\"\ndef max_difference(test_list):\n    # Calculate the absolute difference for each pair in the list\n    res = [abs(b - a) for a, b in test_list]\n    # Return the maximum difference found\n    return max(res)\n\n# Test the function with the provided test case\nassert max_difference([(3, 5), (1, 7), (10, 3), (1, 2)]) == 7\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/12": [{"task_id": "Mbpp/12", "solution": "\"\"\"\nWrite a function to sort a given matrix in ascending order according to the sum of its rows.\nassert sort_matrix([[1, 2, 3], [2, 4, 5], [1, 1, 1]])==[[1, 1, 1], [1, 2, 3], [2, 4, 5]]\n\"\"\"\ndef sort_matrix(mat):\n    # Sort the matrix based on the sum of each row using sorted() function\n    return sorted(mat, key=sum)\n\n# Test the function with the provided test case\nassert sort_matrix([[1, 2, 3], [2, 4, 5], [1, 1, 1]]) == [[1, 1, 1], [1, 2, 3], [2, 4, 5]]\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/79": [{"task_id": "Mbpp/79", "solution": "\"\"\"\nWrite a python function to check whether the length of the word is odd or not.\nassert word_len(\"Hadoop\") == False\n\"\"\"\ndef word_len(word):\n    # Check if the length of the word is even\n    return len(word) % 2 == 0\n\n# Test the function with the provided test case\nassert word_len(\"Hadoop\") == False\n", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/104": [{"task_id": "Mbpp/104", "solution": "\"\"\"\nWrite a function to sort each sublist of strings in a given list of lists.\nassert sort_sublists(([\"green\", \"orange\"], [\"black\", \"white\"], [\"white\", \"black\", \"orange\"]))==[['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]\n\"\"\"\ndef sort_sublists(test_list):\n    # Sort each sublist using list comprehension and sorted() function\n    res = [sorted(sublist) for sublist in test_list]\n    return res\n\n# Test the function with the provided test case\nassert sort_sublists([[\"green\", \"orange\"], [\"black\", \"white\"], [\"white\", \"black\", \"orange\"]]) == [['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/97": [{"task_id": "Mbpp/97", "solution": "\"\"\"\nWrite a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\nassert frequency_lists([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]])=={1: 1, 2: 3, 3: 1, 4: 1, 5: 2, 6: 1, 7: 1, 8: 1, 9: 1}\n\"\"\"\ndef frequency_lists(lists):\n    # Initialize an empty dictionary to store frequencies\n    freq = {}\n    \n    # Iterate through each sublist in the list of lists\n    for sublist in lists:\n        # Iterate through each element in the sublist\n        for element in sublist:\n            # If the element is already in the dictionary, increment its count\n            if element in freq:\n                freq[element] += 1\n            # If the element is not in the dictionary, add it with a count of 1\n            else:\n                freq[element] = 1\n    \n    # Return the dictionary containing frequencies of elements\n    return freq\n\n# Test the function with the provided test case\nassert frequency_lists([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]]) == {1: 1, 2: 3, 3: 1, 4: 1, 5: 2, 6: 1, 7: 1, 8: 1, 9: 1}", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/62": [{"task_id": "Mbpp/62", "solution": "\"\"\"\nWrite a python function to find smallest number in a list.\nassert smallest_num([10, 20, 1, 45, 99]) == 1\n\"\"\"\ndef smallest_num(list):\n    # Initialize the smallest number as the first element of the list\n    small = list[0]\n    \n    # Iterate through each number in the list\n    for x in list:\n        # Update the smallest number if the current number is smaller\n        if x < small:\n            small = x\n    \n    # Return the smallest number found\n    return small\n\n# Test the function with the provided test case\nassert smallest_num([10, 20, 1, 45, 99]) == 1\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/90": [{"task_id": "Mbpp/90", "solution": "\"\"\"\nWrite a python function to find the length of the longest word.\nassert len_log([\"python\",\"PHP\",\"bigdata\"]) == 7\n\"\"\"\ndef len_log(words):\n    # Use the max function with key=len to find the longest word\n    return len(max(words, key=len))\n\n# Test the function with the provided test case\nassert len_log([\"python\", \"PHP\", \"bigdata\"]) == 7\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/70": [{"task_id": "Mbpp/70", "solution": "\"\"\"\nWrite a function to find whether all the given tuples have equal length or not.\nassert get_equal([(11, 22, 33), (44, 55, 66)]) == True\n\"\"\"\ndef get_equal(test_list):\n    # Check if all tuples in the list have the same length as the first tuple\n    res = len(set(len(sub) for sub in test_list)) == 1\n    return res\n\n# Test the function with the provided test case\nassert get_equal([(11, 22, 33), (44, 55, 66)]) == True\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/74": [{"task_id": "Mbpp/74", "solution": "\"\"\"\nWrite a function to check whether it follows the sequence given in the patterns array.\nassert is_samepatterns([\"red\",\"green\",\"green\"], [\"a\", \"b\", \"b\"])==True\n\"\"\"\ndef is_samepatterns(strs, patterns):\n    # Create dictionaries to map strings to patterns and patterns to strings\n    str_to_pattern = {}\n    pattern_to_str = {}\n    \n    # Iterate through each string and its corresponding pattern\n    for s, p in zip(strs, patterns):\n        # Check if the string is already mapped to a different pattern\n        if s in str_to_pattern and str_to_pattern[s] != p:\n            return False\n        # Check if the pattern is already mapped to a different string\n        if p in pattern_to_str and pattern_to_str[p] != s:\n            return False\n        \n        # Map the string to the pattern and vice versa\n        str_to_pattern[s] = p\n        pattern_to_str[p] = s\n    \n    # If all mappings are consistent, return True\n    return True\n\n# Test the function with the provided test case\nassert is_samepatterns([\"red\", \"green\", \"green\"], [\"a\", \"b\", \"b\"]) == True", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[["red", "green", "greenn"], ["a", "b"]]], "plus_fail_tests": [[[], ["a", "b", "c"]]]}], "Mbpp/93": [{"task_id": "Mbpp/93", "solution": "\"\"\"\nWrite a function to calculate the value of 'a' to the power 'b'.\nassert power(3,4) == 81\n\"\"\"\ndef power(a, b):\n    # Base case: any number to the power of 0 is 1\n    if b == 0:\n        return 1\n    # Base case: 0 to the power of any positive number is 0\n    elif a == 0:\n        return 0\n    # Base case: any number to the power of 1 is itself\n    elif b == 1:\n        return a\n    # Recursive case: multiply 'a' by the result of 'a' raised to 'b-1'\n    else:\n        return a * power(a, b - 1)\n\n# Test the function with the provided test case\nassert power(3, 4) == 81\n", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/109": [{"task_id": "Mbpp/109", "solution": "\"\"\"\nWrite a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\nassert odd_Equivalent(\"011001\",6) == 3\n\"\"\"\ndef odd_Equivalent(binary_string, rotations):\n    # Initialize count of odd equivalent strings\n    odd_count = 0\n    \n    # Iterate through each possible rotation\n    for i in range(rotations):\n        # Check if the current rotation has an odd number of '1's\n        if binary_string.count('1') % 2 != 0:\n            odd_count += 1\n        \n        # Rotate the string by moving the first character to the end\n        binary_string = binary_string[1:] + binary_string[0]\n    \n    return odd_count\n\n# Test the function with the provided test case\nassert odd_Equivalent(\"011001\", 6) == 3", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/92": [{"task_id": "Mbpp/92", "solution": "\"\"\"\nWrite a function to check whether the given number is undulating or not.\nassert is_undulating(1212121) == True\n\"\"\"\ndef is_undulating(n):\n    # Convert the number to a string for easy manipulation\n    s = str(n)\n    \n    # Check if the length of the number is less than 3\n    if len(s) < 3:\n        return False\n    \n    # Extract the first two digits\n    a, b = int(s[0]), int(s[1])\n    \n    # If the first two digits are the same, it's not undulating\n    if a == b:\n        return False\n    \n    # Iterate through the string starting from the third digit\n    i = 2\n    while i < len(s):\n        # Check if the current digit matches the previous one\n        if int(s[i]) != int(s[i - 1]):\n            return False\n        \n        # Move to the next pair of digits\n        i += 1\n    \n    # If all checks pass, the number is undulating\n    return True\n\n# Test the function with the provided test case\nassert is_undulating(1212121) == True", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/72": [{"task_id": "Mbpp/72", "solution": "\"\"\"\nWrite a python function to check whether the given number can be represented as the difference of two squares or not.\nassert dif_Square(5) == True\n\"\"\"\ndef dif_Square(n):\n    # Check if n is even or 1\n    if (n % 2 == 0) or (n == 1):\n        return True\n    else:\n        return False\n\n# Test the function with the provided test case\nassert dif_Square(5) == True", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/71": [{"task_id": "Mbpp/71", "solution": "\"\"\"\nWrite a function to sort a list of elements.\nassert comb_sort([5, 15, 37, 25, 79]) == [5, 15, 25, 37, 79]\n\"\"\"\ndef comb_sort(arr):\n    # Initialize gap size and shrink factor\n    gap = len(arr)\n    shrink_factor = 1.3\n    sorted = False\n    \n    while not sorted or gap > 1:\n        # Calculate next gap value\n        if gap > 1:\n            gap = int(gap / shrink_factor)\n        \n        # Set sorted flag to True\n        sorted = True\n        \n        # Perform comparisons and swaps\n        for i in range(len(arr) - gap):\n            if arr[i] > arr[i + gap]:\n                arr[i], arr[i + gap] = arr[i + gap], arr[i]\n                sorted = False\n\n# Test the function with the provided test case\nassert comb_sort([5, 15, 37, 25, 79]) == [5, 15, 25, 37, 79]\n", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/102": [{"task_id": "Mbpp/102", "solution": "\"\"\"\nWrite a function to convert a snake case string to camel case string.\nassert snake_to_camel('python_program')=='PythonProgram'\n\"\"\"\ndef snake_to_camel(snake_str):\n    # Split the snake_case string into words based on underscores\n    words = snake_str.split('_')\n    \n    # Capitalize each word and join them together without any separators\n    return ''.join(word.capitalize() for word in words)\n\n# Test the function with the provided test case\nassert snake_to_camel('python_program') == 'PythonProgram'\n", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/66": [{"task_id": "Mbpp/66", "solution": "\"\"\"\nWrite a python function to count the number of positive numbers in a list.\nassert pos_count([1,-2,3,-4]) == 2\n\"\"\"\ndef pos_count(nums):\n    # Initialize a counter for positive numbers\n    count = 0\n    \n    # Iterate through each number in the list\n    for num in nums:\n        # Check if the number is positive\n        if num > 0:\n            # Increment the counter if the number is positive\n            count += 1\n            \n    # Return the total count of positive numbers\n    return count\n\n# Test the function with the provided test case\nassert pos_count([1, -2, 3, -4]) == 2\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/80": [{"task_id": "Mbpp/80", "solution": "\"\"\"\nWrite a function to find the nth tetrahedral number.\nassert tetrahedral_number(5) == 35\n\"\"\"\ndef tetrahedral_number(n):\n    # Calculate the nth tetrahedral number using the formula n * (n + 1) * (n + 2) / 6\n    return int(n * (n + 1) * (n + 2) / 6)\n\n# Test the function with the provided test case\nassert tetrahedral_number(5) == 35\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/83": [{"task_id": "Mbpp/83", "solution": "\"\"\"\nWrite a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nassert get_Char(\"abc\") == \"f\"\n\"\"\"\ndef get_Char(s):\n    # Initialize result variable\n    res = 0\n    \n    # Iterate through each character in the string\n    for i in range(len(s)):\n        # Add ASCII value of current character to result\n        res += ord(s[i])\n    \n    # Take modulo 26 of the result\n    res %= 26\n    \n    # Convert ASCII value back to character and return\n    return chr(res + ord('a'))\n\n# Test the function with the provided test case\nassert get_Char(\"abc\") == \"f\"\n", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/103": [{"task_id": "Mbpp/103", "solution": "\"\"\"\nWrite a function to find the Eulerian number a(n, m).\nassert eulerian_num(3, 1) == 4\n\"\"\"\ndef eulerian_num(n, m):\n    # Base case: If n equals m or m is 0, return 1\n    if (n == m) or (m == 0):\n        return 1\n    \n    # Recursive relation for Eulerian numbers\n    return ((n - m) * eulerian_num(n - 1, m - 1) + (m + 1) * eulerian_num(n - 1, m))\n\n# Test the function with the provided test case\nassert eulerian_num(3, 1) == 4", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/14": [{"task_id": "Mbpp/14", "solution": "\"\"\"\nWrite a python function to find the volume of a triangular prism.\nassert find_Volume(10,8,6) == 240\n\"\"\"\ndef find_Volume(base, height, length):\n    # Calculate the area of the triangular base using the formula (base * height) / 2\n    area = (base * height) / 2\n    \n    # Calculate the volume of the triangular prism by multiplying the area of the base by the length\n    return area * length\n\n# Test the function with the provided test case\nassert find_Volume(10, 8, 6) == 240\n", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[123456789, 987654321, 12345]]}], "Mbpp/105": [{"task_id": "Mbpp/105", "solution": "\"\"\"\nWrite a python function to count true booleans in the given list.\nassert count([True,False,True]) == 2\n\"\"\"\ndef count(lst):\n    # Use the sum function to count True values in the list\n    return sum(lst)\n\n# Test the function with the provided test case\nassert count([True, False, True]) == 2\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/88": [{"task_id": "Mbpp/88", "solution": "\"\"\"\nWrite a function to get the frequency of all the elements in a list, returned as a dictionary.\nassert freq_count([10,10,10,10,20,20,20,20,40,40,50,50,30])==({10: 4, 20: 4, 40: 2, 50: 2, 30: 1})\n\"\"\"\ndef freq_count(test_list):\n    # Initialize an empty dictionary to store element frequencies\n    res = {}\n    \n    # Iterate over each element in the test list\n    for ele in test_list:\n        # If the element is already in the dictionary, increment its count\n        if ele in res:\n            res[ele] += 1\n        # Otherwise, add the element to the dictionary with a count of 1\n        else:\n            res[ele] = 1\n    \n    # Return the dictionary containing element frequencies\n    return res\n\n# Test the function with the provided test case\nassert freq_count([10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30]) == {10: 4, 20: 4, 40: 2, 50: 2, 30: 1}", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/82": [{"task_id": "Mbpp/82", "solution": "\"\"\"\nWrite a function to find the volume of a sphere.\nassert math.isclose(volume_sphere(10), 4188.790204786391, rel_tol=0.001)\n\"\"\"\nimport math\n\ndef volume_sphere(radius):\n    # Calculate the volume of a sphere using the formula (4/3) * \u03c0 * r^3\n    return (4 / 3) * math.pi * radius ** 3\n\n# Test the function with the provided test case\nassert math.isclose(volume_sphere(10), 4188.790204786391, rel_tol=0.001)\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/101": [{"task_id": "Mbpp/101", "solution": "\"\"\"\nWrite a function to find the kth element in the given array using 1-based indexing.\nassert kth_element([12,3,5,7,19], 2) == 3\n\"\"\"\ndef kth_element(arr, k):\n    # Sort the array in ascending order\n    arr.sort()\n    \n    # Return the k-th element (1-based index)\n    return arr[k - 1]\n\n# Test the function with the provided test case\nassert kth_element([12, 3, 5, 7, 19], 2) == 3\n", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/100": [{"task_id": "Mbpp/100", "solution": "\"\"\"\nWrite a function to find the next smallest palindrome of a specified integer, returned as an integer.\nassert next_smallest_palindrome(99)==101\n\"\"\"\ndef next_smallest_palindrome(n):\n    # Convert the number to a string to easily manipulate digits\n    s = str(n)\n    \n    # If the number has only one digit or is already a palindrome, return the next number\n    if len(s) == 1 or s == s[::-1]:\n        return n + 1\n    \n    # Find the middle index of the number\n    mid = len(s) // 2\n    \n    # Check if the left half of the number is greater than its reverse\n    if s[:mid] > s[mid:][::-1]:\n        # Increment the left half and mirror it to form a new palindrome\n        return int(s[:mid] + s[:mid][::-1])\n    \n    # If the left half is not greater, increment the entire number and check again\n    while True:\n        n += 1\n        s = str(n)\n        if s == s[::-1]:\n            return n\n\n# Test the function with the provided test case\nassert next_smallest_palindrome(99) == 101", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/94": [{"task_id": "Mbpp/94", "solution": "\"\"\"\nGiven a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\nassert index_minimum([('Rash', 143), ('Manjeet', 200), ('Varsha', 100)]) == 'Varsha'\n\"\"\"\ndef index_minimum(test_list):\n    # Find the tuple with the minimum second element and return its first element\n    res = min(test_list, key=lambda x: x[1])[0]\n    return res\n\n# Test the function with the provided test case\nassert index_minimum([('Rash', 143), ('Manjeet', 200), ('Varsha', 100)]) == 'Varsha'\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/108": [{"task_id": "Mbpp/108", "solution": "\"\"\"\nWrite a function to merge three lists into a single sorted list.\nassert merge_sorted_list([25, 24, 15, 4, 5, 29, 110],[19, 20, 11, 56, 25, 233, 154],[24, 26, 54, 48])==[4, 5, 11, 15, 19, 20, 24, 24, 25, 25, 26, 29, 48, 54, 56, 110, 154, 233]\n\"\"\"\ndef merge_sorted_list(nums1, nums2, nums3):\n    # Concatenate all three lists\n    merged = nums1 + nums2 + nums3\n    \n    # Sort the concatenated list\n    merged.sort()\n    \n    return merged\n\n# Test the function with the provided test case\nassert merge_sorted_list([25, 24, 15, 4, 5, 29, 110], [19, 20, 11, 56, 25, 233, 154], [24, 26, 54, 48]) == [4, 5, 11, 15, 19, 20, 24, 24, 25, 25, 26, 29, 48, 54, 56, 110, 154, 233]\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/86": [{"task_id": "Mbpp/86", "solution": "\"\"\"\nWrite a function to find nth centered hexagonal number.\nassert centered_hexagonal_number(10) == 271\n\"\"\"\ndef centered_hexagonal_number(n):\n    # Calculate the nth centered hexagonal number using the formula\n    return 3 * n * (n - 1) + 1\n\n# Test the function with the provided test case\nassert centered_hexagonal_number(10) == 271\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/106": [{"task_id": "Mbpp/106", "solution": "\"\"\"\nWrite a function to append the given list to the given tuples.\nassert add_lists([5, 6, 7], (9, 10)) == (9, 10, 5, 6, 7)\n\"\"\"\ndef add_lists(test_list, test_tup):\n    # Convert the tuple to a list, extend it with the original list, and convert back to a tuple\n    res = tuple(list(test_tup) + test_list)\n    return res\n\n# Test the function with the provided test case\nassert add_lists([5, 6, 7], (9, 10)) == (9, 10, 5, 6, 7)\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/99": [{"task_id": "Mbpp/99", "solution": "\"\"\"\nWrite a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nassert decimal_to_binary(8) == '1000'\n\"\"\"\ndef decimal_to_binary(n):\n    # Base case: if n is 0, return '0' directly\n    if n == 0:\n        return '0'\n    \n    result = ''\n    # Loop until n becomes 0\n    while n > 0:\n        # Prepend the remainder of n divided by 2 to the result string\n        result = str(n % 2) + result\n        # Update n to be the quotient of n divided by 2\n        n //= 2\n    \n    return result\n\n# Test the function with the provided test case\nassert decimal_to_binary(8) == '1000'", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[-5]]}], "Mbpp/111": [{"task_id": "Mbpp/111", "solution": "\"\"\"\nWrite a function to find the common elements in given nested lists.\nassert set(common_in_nested_lists([[12, 18, 23, 25, 45], [7, 12, 18, 24, 28], [1, 5, 8, 12, 15, 16, 18]]))==set([18, 12])\n\"\"\"\ndef common_in_nested_lists(nested_list):\n    # Use set intersection to find common elements across all sublists\n    return set.intersection(*map(set, nested_list))\n\n# Test the function with the provided test case\nassert set(common_in_nested_lists([[12, 18, 23, 25, 45], [7, 12, 18, 24, 28], [1, 5, 8, 12, 15, 16, 18]])) == set([18, 12])", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/7": [{"task_id": "Mbpp/7", "solution": "\"\"\"\nWrite a function to find all words which are at least 4 characters long in a string.\nassert set(find_char_long('Please move back to stream')) == set(['Please', 'move', 'back', 'stream'])\n\"\"\"\ndef find_char_long(text):\n    # Split the text into words using space as a delimiter\n    words = text.split(\" \")\n    \n    # Filter out words that have less than 4 characters\n    result = [word for word in words if len(word) >= 4]\n    \n    return result\n\n# Test the function with the provided test case\nassert set(find_char_long('Please move back to stream')) == set(['Please', 'move', 'back', 'stream'])\n", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [["This is a very long string with no words that are at least 4 characters long."]]}], "Mbpp/95": [{"task_id": "Mbpp/95", "solution": "\"\"\"\nWrite a python function to find the length of the smallest list in a list of lists.\nassert Find_Min_Length([[1],[1,2]]) == 1\n\"\"\"\ndef Find_Min_Length(lst):\n    # Use a generator expression to find the minimum length among all sublists\n    return min(len(x) for x in lst)\n\n# Test the function with the provided test case\nassert Find_Min_Length([[1], [1, 2]]) == 1\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/98": [{"task_id": "Mbpp/98", "solution": "\"\"\"\nWrite a function to multiply all the numbers in a list and divide with the length of the list.\nassert math.isclose(multiply_num((8, 2, 3, -1, 7)), -67.2, rel_tol=0.001)\n\"\"\"\nimport math\n\ndef multiply_num(numbers):\n    # Initialize the product variable to 1 (since multiplying by 1 has no effect)\n    product = 1\n    \n    # Iterate through each number in the tuple and multiply it to the product\n    for x in numbers:\n        product *= x\n    \n    # Divide the product by the length of the tuple to get the average product\n    return product / len(numbers)\n\n# Test the function with the provided test case\nassert math.isclose(multiply_num((8, 2, 3, -1, 7)), -67.2, rel_tol=0.001)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/117": [{"task_id": "Mbpp/117", "solution": "\"\"\"\nWrite a function to convert all possible convertible elements in a list of lists to floats.\nassert list_to_float( [(\"3\", \"4\"), (\"1\", \"26.45\"), (\"7.32\", \"8\"), (\"4\", \"8\")] ) == [(3.0, 4.0), (1.0, 26.45), (7.32, 8.0), (4.0, 8.0)]\n\"\"\"\ndef list_to_float(test_list):\n    # Convert each element in the sublists to float if it's convertible\n    res = [[float(ele) for ele in sub] for sub in test_list]\n    return res\n\n# Test the function with the provided test case\nassert list_to_float([(\"3\", \"4\"), (\"1\", \"26.45\"), (\"7.32\", \"8\"), (\"4\", \"8\")]) == [(3.0, 4.0), (1.0, 26.45), (7.32, 8.0), (4.0, 8.0)]\n", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/115": [{"task_id": "Mbpp/115", "solution": "\"\"\"\nWrite a function to check whether all dictionaries in a list are empty or not.\nassert empty_dit([{},{},{}])==True\n\"\"\"\ndef empty_dit(dict_list):\n    # Check if all dictionaries in the list are empty using a generator expression\n    return all(not d for d in dict_list)\n\n# Test the function with the provided test case\nassert empty_dit([{},{},{}]) == True\n", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[[1, 2], [], []]]], "plus_fail_tests": [[[[], [], [], ["", "not", "gA", "a", "e", "EnIODji", "ML"], [], [], [], [], [], [], [], []]]]}], "Mbpp/113": [{"task_id": "Mbpp/113", "solution": "\"\"\"\nWrite a function to check if a string represents an integer or not.\nassert check_integer(\"python\")==False\n\"\"\"\ndef check_integer(s):\n    # Check if the string is empty\n    if len(s) == 0:\n        return False\n    \n    # Check for leading '+' or '-' signs\n    i = 1 if s[0] in \"+-\" else 0\n    \n    # Iterate through the characters of the string\n    while i < len(s):\n        # If the character is not a digit, return False\n        if not s[i].isdigit():\n            return False\n        i += 1\n    \n    # If all characters are digits, return True\n    return True\n\n# Test the function with the provided test case\nassert check_integer(\"python\") == False\n", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/124": [{"task_id": "Mbpp/124", "solution": "\"\"\"\nWrite a function to get the angle of a complex number.\nassert math.isclose(angle_complex(0,1j), 1.5707963267948966, rel_tol=0.001)\n\"\"\"\nimport cmath\n\ndef angle_complex(x, y):\n    # Create a complex number from real part x and imaginary part y\n    z = complex(x, y)\n    \n    # Calculate the angle (phase) of the complex number using cmath module\n    return cmath.phase(z)\n\n# Test the function with the provided test case\nassert math.isclose(angle_complex(0, 1j), 1.5707963267948966, rel_tol=0.001)", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/67": [{"task_id": "Mbpp/67", "solution": "\"\"\"\nWrite a function to find the number of ways to partition a set of Bell numbers.\nassert bell_number(2)==2\n\"\"\"\ndef bell_number(n):\n    # Initialize a 2D list (matrix) to store Bell numbers\n    B = [[0 for i in range(n + 1)] for j in range(n + 1)]\n    \n    # Base case: The first Bell number is 1\n    B[0][0] = 1\n    \n    # Fill the matrix using the recursive relation\n    for i in range(1, n + 1):\n        B[i][0] = B[i - 1][i - 1]\n        for j in range(1, i + 1):\n            B[i][j] = B[i - 1][j - 1] + B[i][j - 1]\n    \n    # Return the nth Bell number\n    return B[n][0]\n\n# Test the function with the provided test case\nassert bell_number(2) == 2", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/116": [{"task_id": "Mbpp/116", "solution": "\"\"\"\nWrite a function to convert a given tuple of positive integers into a single integer.\nassert tuple_to_int((1,2,3))==123\n\"\"\"\ndef tuple_to_int(test_tup):\n    # Convert each element of the tuple to a string and concatenate them\n    res = int(\"\".join(map(str, test_tup)))\n    return res\n\n# Test the function with the provided test case\nassert tuple_to_int((1, 2, 3)) == 123\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/128": [{"task_id": "Mbpp/128", "solution": "\"\"\"\nWrite a function to find words that are longer than n characters from a given list of words.\nassert long_words(3,\"python is a programming language\")==['python','programming','language']\n\"\"\"\ndef long_words(n, str):\n    # Split the input string into a list of words\n    word_list = str.split(\" \")\n    \n    # Filter words that have more than 'n' characters\n    result = [word for word in word_list if len(word) > n]\n    \n    return result\n\n# Test the function with the provided test case\nassert long_words(3, \"python is a programming language\") == ['python', 'programming', 'language']\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/138": [{"task_id": "Mbpp/138", "solution": "\"\"\"\nWrite a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nassert is_Sum_Of_Powers_Of_Two(10) == True\n\"\"\"\ndef is_Sum_Of_Powers_Of_Two(n):\n    # Loop until n becomes 0\n    while (n != 0):\n        # If n is odd and not equal to 1, it cannot be expressed as a sum of powers of 2\n        if ((n & 1) == 1 and n != 1):\n            return False\n        # Right shift n by 1 bit to check the next bit\n        n = n >> 1\n    \n    # If all bits except one are zero, n can be expressed as a sum of powers of 2\n    return True\n\n# Test the function with the provided test case\nassert is_Sum_Of_Powers_Of_Two(10) == True", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/125": [{"task_id": "Mbpp/125", "solution": "\"\"\"\nWrite a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nassert find_length(\"11000010001\") == 6\n\"\"\"\ndef find_length(s):\n    # Initialize variables to store the maximum length and current sum\n    max_len = 0\n    curr_sum = 0\n    \n    # Iterate through each character in the string\n    for i in range(len(s)):\n        # Increment current sum if '0' is found, decrement otherwise\n        curr_sum += (1 if s[i] == '0' else -1)\n        \n        # If current sum becomes negative, reset it to zero\n        if curr_sum < 0:\n            curr_sum = 0\n        \n        # Update maximum length if current sum is greater than the previous maximum\n        max_len = max(max_len, curr_sum)\n    \n    return max_len\n\n# Test the function with the provided test case\nassert find_length(\"11000010001\") == 6", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/118": [{"task_id": "Mbpp/118", "solution": "\"\"\"\nWrite a function to convert a string to a list of strings split on the space character.\nassert string_to_list(\"python programming\")==['python','programming']\n\"\"\"\ndef string_to_list(string):\n    # Split the input string into a list using space as the delimiter\n    return string.split(' ')\n\n# Test the function with the provided test case\nassert string_to_list(\"python programming\") == ['python', 'programming']\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/140": [{"task_id": "Mbpp/140", "solution": "\"\"\"\nWrite a function to flatten the list of lists into a single set of numbers.\nassert set(extract_singly([(3, 4, 5), (4, 5, 7), (1, 4)])) == set([3, 4, 5, 7, 1])\n\"\"\"\ndef extract_singly(test_list):\n    # Flatten the list of lists using list comprehension and convert it to a set\n    res = set(num for sublist in test_list for num in sublist)\n    return res\n\n# Test the function with the provided test case\nassert set(extract_singly([(3, 4, 5), (4, 5, 7), (1, 4)])) == set([3, 4, 5, 7, 1])\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/135": [{"task_id": "Mbpp/135", "solution": "\"\"\"\nWrite a function to find the nth hexagonal number.\nassert hexagonal_num(10) == 190\n\"\"\"\ndef hexagonal_num(n):\n    # Calculate the nth hexagonal number using the formula: n * (2n - 1)\n    return n * (2 * n - 1)\n\n# Test the function with the provided test case\nassert hexagonal_num(10) == 190\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/167": [{"task_id": "Mbpp/167", "solution": "\"\"\"\nWrite a python function to find the smallest power of 2 greater than or equal to n.\nassert next_power_of_2(0) == 1\n\"\"\"\ndef next_power_of_2(n):\n    # If n is less than or equal to 0, return 1 as the smallest power of 2\n    if (n <= 0):\n        return 1\n    \n    # Initialize p to 1 which will be used to calculate powers of 2\n    p = 1\n    \n    # Loop until p is greater than or equal to n\n    while (p < n):\n        # Double the value of p in each iteration\n        p *= 2\n    \n    # Return the calculated power of 2\n    return p\n\n# Test the function with the provided test case\nassert next_power_of_2(0) == 1\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/132": [{"task_id": "Mbpp/132", "solution": "\"\"\"\nWrite a function to convert a tuple to a string.\nassert tup_string(('e', 'x', 'e', 'r', 'c', 'i', 's', 'e', 's'))==(\"exercises\")\n\"\"\"\ndef tup_string(tup):\n    # Joining tuple elements into a single string\n    result = ''.join(tup)\n    return result\n\n# Test the function with the provided test case\nassert tup_string(('e', 'x', 'e', 'r', 'c', 'i', 's', 'e', 's')) == \"exercises\"\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/139": [{"task_id": "Mbpp/139", "solution": "\"\"\"\nWrite a function to find the circumference of a circle.\nassert math.isclose(circle_circumference(10), 62.830000000000005, rel_tol=0.001)\n\"\"\"\nimport math\n\ndef circle_circumference(radius):\n    # Calculate the circumference using the formula C = 2 * pi * r\n    return 2 * math.pi * radius\n\n# Test the function with the provided test case\nassert math.isclose(circle_circumference(10), 62.830000000000005, rel_tol=0.001)\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/131": [{"task_id": "Mbpp/131", "solution": "\"\"\"\nWrite a python function to reverse only the vowels of a given string (where y is not a vowel).\nassert reverse_vowels(\"Python\") == \"Python\"\n\"\"\"\ndef reverse_vowels(s):\n    # Define a set of vowels for quick lookup\n    vowels = 'aeiouAEIOU'\n    \n    # Convert the string into a list for mutable operations\n    s_list = list(s)\n    \n    # Initialize two pointers, one at the start and one at the end of the string\n    left, right = 0, len(s) - 1\n    \n    # Loop until the two pointers meet or cross each other\n    while left < right:\n        # Move the left pointer to the right until it points to a vowel\n        if s[left] not in vowels:\n            left += 1\n        # Move the right pointer to the left until it points to a vowel\n        elif s[right] not in vowels:\n            right -= 1\n        else:\n            # Swap the vowels found by the left and right pointers\n            s_list[left], s_list[right] = s_list[right], s_list[left]\n            # Move both pointers towards the center\n            left += 1\n            right -= 1\n    \n    # Join the list back into a string and return it\n    return ''.join(s_list)\n\n# Test the function with the provided test case\nassert reverse_vowels(\"Python\") == \"Python\"", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/129": [{"task_id": "Mbpp/129", "solution": "\"\"\"\nWrite a function to calculate whether the matrix is a magic square.\nassert magic_square_test([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]])==True\n\"\"\"\ndef magic_square_test(matrix):\n    # Calculate the sum of the first row to use as a reference\n    n = len(matrix)\n    magic_sum = sum(matrix[0])\n    \n    # Check sums of all rows\n    for i in range(1, n):\n        if sum(matrix[i]) != magic_sum:\n            return False\n    \n    # Check sums of all columns\n    for j in range(n):\n        if sum(matrix[i][j] for i in range(n)) != magic_sum:\n            return False\n    \n    # Check sum of main diagonal\n    if sum(matrix[i][i] for i in range(n)) != magic_sum:\n        return False\n    \n    # Check sum of secondary diagonal\n    if sum(matrix[i][n - 1 - i] for i in range(n)) != magic_sum:\n        return False\n    \n    # If all checks pass, it's a magic square\n    return True\n\n# Test the function with the provided test case\nassert magic_square_test([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]]) == True", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/160": [{"task_id": "Mbpp/160", "solution": "\"\"\"\nWrite a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\nassert find_solution(2, 3, 7) == (2, 1)\n\"\"\"\ndef find_solution(a, b, n):\n    # Iterate over possible values of x from 0 to n//a\n    for x in range(n // a + 1):\n        # Calculate the remaining value after subtracting ax from n\n        rem = n - (x * a)\n        \n        # Check if the remaining value is divisible by b\n        if rem % b == 0:\n            # If so, calculate y and return the tuple (x, y)\n            y = rem // b\n            return (x, y)\n    \n    # If no solution is found, return None\n    return None\n\n# Test the function with the provided test case\nassert find_solution(2, 3, 7) == (2, 1)\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/123": [{"task_id": "Mbpp/123", "solution": "\"\"\"\nWrite a function to sum all amicable numbers from 1 to a specified number.\nassert amicable_numbers_sum(999)==504\n\"\"\"\ndef amicable_numbers_sum(n):\n    # Initialize a list to store the sum of divisors for each number up to n\n    sums = [0] * (n + 1)\n    \n    # Calculate the sum of divisors for each number\n    for i in range(1, n + 1):\n        for j in range(i * 2, n + 1, i):\n            sums[j] += i\n    \n    # Find and sum all amicable pairs\n    return sum(i for i in range(2, n) if sums[i] != i and sums[sums[i]] == i)\n\n# Test the function with the provided test case\nassert amicable_numbers_sum(999) == 504", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/161": [{"task_id": "Mbpp/161", "solution": "\"\"\"\nWrite a function to remove all elements from a given list present in another list.\nassert remove_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [2, 4, 6, 8]) == [1, 3, 5, 7, 9, 10]\n\"\"\"\ndef remove_elements(list1, list2):\n    # Create a new list containing only those elements of list1 that are not in list2\n    result = [element for element in list1 if element not in list2]\n    return result\n\n# Test the function with the provided test case\nassert remove_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [2, 4, 6, 8]) == [1, 3, 5, 7, 9, 10]\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/119": [{"task_id": "Mbpp/119", "solution": "\"\"\"\nWrite a python function to find the element that appears only once in a sorted array.\nassert search([1,1,2,2,3]) == 3\n\"\"\"\ndef search(arr):\n    # Iterate through the array in steps of 2\n    for i in range(0, len(arr) - 1, 2):\n        # Check if the current element is not equal to the next one\n        if arr[i] != arr[i + 1]:\n            return arr[i]\n    # If no unique element is found, return the last element\n    return arr[-1]\n\n# Test the function with the provided test case\nassert search([1, 1, 2, 2, 3]) == 3\n", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/137": [{"task_id": "Mbpp/137", "solution": "\"\"\"\nWrite a function to find the ratio of zeroes to non-zeroes in an array of integers.\nassert math.isclose(zero_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]), 0.181818, rel_tol=0.001)\n\"\"\"\nimport math\n\ndef zero_count(arr):\n    # Calculate the total number of elements in the array\n    n = len(arr)\n    \n    # Count the number of zeroes in the array\n    count_zero = arr.count(0)\n    \n    # Calculate the ratio of zeroes to non-zeroes\n    if count_zero == 0:\n        return 0\n    else:\n        return round(count_zero / (n - count_zero), 6)\n\n# Test the function with the provided test case\nassert math.isclose(zero_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]), 0.181818, rel_tol=0.001)", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/233": [{"task_id": "Mbpp/233", "solution": "\"\"\"\nWrite a function to find the lateral surface area of a cylinder.\nassert math.isclose(lateralsuface_cylinder(10,5), 314.15000000000003, rel_tol=0.001)\n\"\"\"\nimport math\n\ndef lateralsuface_cylinder(r, h):\n    # Calculate the lateral surface area of a cylinder using the formula: 2 * pi * r * h\n    return 2 * math.pi * r * h\n\n# Test the function with the provided test case\nassert math.isclose(lateralsuface_cylinder(10, 5), 314.15000000000003, rel_tol=0.001)\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/143": [{"task_id": "Mbpp/143", "solution": "\"\"\"\nWrite a function to find number of lists present in the given tuple.\nassert find_lists(([1, 2, 3, 4], [5, 6, 7, 8])) == 2\n\"\"\"\ndef find_lists(test_tup):\n    # Initialize a counter for lists\n    res = 0\n    \n    # Iterate through each element in the tuple\n    for ele in test_tup:\n        # Check if the current element is an instance of list\n        if isinstance(ele, list):\n            # Increment the counter if it's a list\n            res += 1\n            \n    return res\n\n# Test the function with the provided test case\nassert find_lists(([1, 2, 3, 4], [5, 6, 7, 8])) == 2\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/222": [{"task_id": "Mbpp/222", "solution": "\"\"\"\nWrite a function to check if all the elements in tuple have same data type or not.\nassert check_type((5, 6, 7, 3, 5, 6) ) == True\n\"\"\"\ndef check_type(test_tup):\n    # Check if all elements in the tuple have the same data type\n    res = all(isinstance(ele, type(test_tup[0])) for ele in test_tup)\n    return res\n\n# Test the function with the provided test case\nassert check_type((5, 6, 7, 3, 5, 6)) == True\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/227": [{"task_id": "Mbpp/227", "solution": "\"\"\"\nWrite a function to find minimum of three numbers.\nassert min_of_three(10,20,0)==0\n\"\"\"\ndef min_of_three(x, y, z):\n    # Initialize the minimum value as x\n    min_val = x\n    \n    # Compare with y and update if y is smaller\n    if y < min_val:\n        min_val = y\n    \n    # Compare with z and update if z is smaller\n    if z < min_val:\n        min_val = z\n    \n    return min_val\n\n# Test the function with the provided test case\nassert min_of_three(10, 20, 0) == 0", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/166": [{"task_id": "Mbpp/166", "solution": "\"\"\"\nWrite a function that counts the number of pairs of integers in a list that xor to an even number.\nassert find_even_pair([5, 4, 7, 2, 1]) == 4\n\"\"\"\ndef find_even_pair(arr):\n    # Initialize count of pairs whose XOR is even\n    count = 0\n    \n    # Iterate through each pair of elements in the array\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            # Check if the XOR of the current pair is even\n            if (arr[i] ^ arr[j]) % 2 == 0:\n                count += 1\n                \n    return count\n\n# Test the function with the provided test case\nassert find_even_pair([5, 4, 7, 2, 1]) == 4", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/127": [{"task_id": "Mbpp/127", "solution": "\"\"\"\nWrite a function to multiply two integers.\nassert multiply_int(10,20)==200\n\"\"\"\ndef multiply_int(x, y):\n    # Multiply two integers x and y\n    return x * y\n\n# Test the function with the provided test case\nassert multiply_int(10, 20) == 200\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/232": [{"task_id": "Mbpp/232", "solution": "\"\"\"\nWrite a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\nassert set(larg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],2))==set([100,90])\n\"\"\"\ndef larg_nnum(nums, n):\n    # Sort the list in descending order and return the first n elements\n    return sorted(nums, reverse=True)[:n]\n\n# Test the function with the provided test case\nassert set(larg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100], 2)) == set([100, 90])\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/242": [{"task_id": "Mbpp/242", "solution": "\"\"\"\nWrite a function to count the total number of characters in a string.\nassert count_charac(\"python programming\")==18\n\"\"\"\ndef count_charac(str):\n    # Initialize a counter variable to zero\n    count = 0\n    \n    # Iterate over each character in the string\n    for i in str:\n        # Increment the counter for each character encountered\n        count += 1\n    \n    # Return the total count of characters\n    return count\n\n# Test the function with the provided test case\nassert count_charac(\"python programming\") == 18\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/133": [{"task_id": "Mbpp/133", "solution": "\"\"\"\nWrite a function to calculate the sum of the negative numbers of a given list of numbers.\nassert sum_negativenum([2, 4, -6, -9, 11, -12, 14, -5, 17])==-32\n\"\"\"\ndef sum_negativenum(numbers):\n    # Initialize the sum of negative numbers to zero\n    neg_sum = 0\n    \n    # Iterate through each number in the list\n    for num in numbers:\n        # Check if the current number is negative\n        if num < 0:\n            # Add the negative number to the sum\n            neg_sum += num\n    \n    # Return the total sum of negative numbers\n    return neg_sum\n\n# Test the function with the provided test case\nassert sum_negativenum([2, 4, -6, -9, 11, -12, 14, -5, 17]) == -32\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/229": [{"task_id": "Mbpp/229", "solution": "\"\"\"\nWrite a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nassert re_arrange_array([-1, 2, -3, 4, 5, 6, -7, 8, 9], 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9]\n\"\"\"\ndef re_arrange_array(arr, n):\n    # Initialize two pointers for the current position to place negative and positive numbers\n    i = 0\n    j = 0\n    \n    # Iterate through the array up to the specified number of elements\n    while j < n:\n        # If the current element is negative, swap it with the element at index i\n        if arr[j] < 0:\n            arr[i], arr[j] = arr[j], arr[i]\n            i += 1\n        j += 1\n    \n    return arr\n\n# Test the function with the provided test case\nassert re_arrange_array([-1, 2, -3, 4, 5, 6, -7, 8, 9], 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9]", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[[10, -5, -2, 7, 0, 0, 0, -10, -5], 9]]}], "Mbpp/130": [{"task_id": "Mbpp/130", "solution": "\"\"\"\nWrite a function to find the item with maximum frequency in a given list.\nassert max_occurrences([2,3,8,4,7,9,8,2,6,5,1,6,1,2,3,2,4,6,9,1,2])==2\n\"\"\"\ndef max_occurrences(nums):\n    # Initialize variables to store the current maximum count and the number with this count\n    max_count = 0\n    max_num = None\n    \n    # Iterate through each unique number in the list\n    for num in set(nums):\n        # Count occurrences of the current number in the list\n        count = nums.count(num)\n        \n        # Update max_count and max_num if the current count is higher\n        if count > max_count:\n            max_count = count\n            max_num = num\n    \n    return max_num\n\n# Test the function with the provided test case\nassert max_occurrences([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]]], "plus_fail_tests": [[[1, 543, 2, 3, 0, 4, 347, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]]]}], "Mbpp/120": [{"task_id": "Mbpp/120", "solution": "\"\"\"\nWrite a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\nassert max_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)] )==36\n\"\"\"\ndef max_product_tuple(test_list):\n    # Calculate the absolute product for each tuple pair\n    res = max([abs(x * y) for x, y in test_list])\n    return res\n\n# Test the function with the provided test case\nassert max_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)]) == 36\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/245": [{"task_id": "Mbpp/245", "solution": "\"\"\"\nWrite a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nassert max_sum([1, 15, 51, 45, 33, 100, 12, 18, 9]) == 194\n\"\"\"\ndef max_sum(arr):\n    n = len(arr)\n    \n    # Initialize variables to store the maximum sum of increasing subsequences\n    inc = [0] * n\n    dec = [0] * n\n    \n    # Fill inc[] such that inc[i] contains the maximum sum of increasing subsequence ending at i\n    for i in range(n):\n        inc[i] = arr[i]\n        for j in range(i):\n            if arr[i] > arr[j] and inc[i] < inc[j] + arr[i]:\n                inc[i] = inc[j] + arr[i]\n    \n    # Fill dec[] such that dec[i] contains the maximum sum of decreasing subsequence starting at i\n    for i in range(n-1, -1, -1):\n        dec[i] = arr[i]\n        for j in range(i+1, n):\n            if arr[i] > arr[j] and dec[i] < dec[j] + arr[i]:\n                dec[i] = dec[j] + arr[i]\n    \n    # Find the maximum sum of bitonic subsequence\n    max_bitonic_sum = 0\n    for i in range(n):\n        max_bitonic_sum = max(max_bitonic_sum, inc[i] + dec[i] - arr[i])\n    \n    return max_bitonic_sum\n\n# Test the function with the provided test case\nassert max_sum([1, 15, 51, 45, 33, 100, 12, 18, 9]) == 194", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/223": [{"task_id": "Mbpp/223", "solution": "\"\"\"\nWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nassert is_majority([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n\"\"\"\ndef binary_search(arr, low, high, x):\n    # Base case: if the search range is invalid\n    if high < low:\n        return -1\n    \n    mid = (low + high) // 2\n    \n    # Check if the middle element is the target and it's the majority element\n    if mid > 0 and arr[mid] == x and arr[mid - 1] != x:\n        return mid\n    elif mid == 0 and arr[mid] == x:\n        return mid\n    # If the target is greater than the middle element, search in the right half\n    elif arr[mid] < x:\n        return binary_search(arr, mid + 1, high, x)\n    # Otherwise, search in the left half\n    else:\n        return binary_search(arr, low, mid - 1, x)\n\ndef is_majority(arr, n, x):\n    # Find the index of the first occurrence of x using binary search\n    i = binary_search(arr, 0, n - 1, x)\n    \n    # If x is not found, return False\n    if i == -1:\n        return False\n    \n    # Calculate the last possible index where x can be the majority element\n    last_occurrence = i + n // 2\n    \n    # Check if the last occurrence is within bounds and is equal to x\n    if last_occurrence < n and arr[last_occurrence] == x:\n        return True\n    \n    return False\n\n# Test the function with the provided test case\nassert is_majority([1, 2, 3, 3, 3, 3, 10], 7, 3) == True", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[[], 1, 0]]}], "Mbpp/230": [{"task_id": "Mbpp/230", "solution": "\"\"\"\nWrite a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\nassert replace_blank(\"hello people\",'@')==(\"hello@people\")\n\"\"\"\ndef replace_blank(str1, ch):\n    # Replace all occurrences of ' ' (space) with the specified character 'ch'\n    return str1.replace(' ', ch)\n\n# Test the function with the provided test case\nassert replace_blank(\"hello people\", '@') == \"hello@people\"\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/165": [{"task_id": "Mbpp/165", "solution": "\"\"\"\nWrite a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\nassert count_char_position(\"xbcefg\") == 2\n\"\"\"\ndef count_char_position(s):\n    # Initialize a counter for matching positions\n    match = 0\n    \n    # Iterate over each character in the string using enumerate to get both index and character\n    for i, c in enumerate(s):\n        # Check if the character's position matches its alphabetical order (case insensitive)\n        if ord(c.lower()) - ord('a') == i:\n            match += 1\n    \n    # Return the total count of matching positions\n    return match\n\n# Test the function with the provided test case\nassert count_char_position(\"xbcefg\") == 2\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/249": [{"task_id": "Mbpp/249", "solution": "\"\"\"\nWrite a function to find the intersection of two arrays.\nassert intersection_array([1, 2, 3, 5, 7, 8, 9, 10],[1, 2, 4, 8, 9])==[1, 2, 8, 9]\n\"\"\"\ndef intersection_array(arr1, arr2):\n    # Use set intersection to find common elements\n    return list(set(arr1) & set(arr2))\n\n# Test the function with the provided test case\nassert intersection_array([1, 2, 3, 5, 7, 8, 9, 10], [1, 2, 4, 8, 9]) == [1, 2, 8, 9]\n", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/170": [{"task_id": "Mbpp/170", "solution": "\"\"\"\nWrite a function to find the sum of numbers in a list within a range specified by two indices.\nassert sum_range_list([2,1,5,6,8,3,4,9,10,11,8,12], 8, 10) == 29\n\"\"\"\ndef sum_range_list(nums, l, r):\n    # Initialize the sum variable to store the result\n    total_sum = 0\n    \n    # Iterate through the sublist from index l to r (inclusive)\n    for i in range(l, r + 1):\n        # Add each element in the sublist to the total sum\n        total_sum += nums[i]\n    \n    # Return the computed sum\n    return total_sum\n\n# Test the function with the provided test case\nassert sum_range_list([2, 1, 5, 6, 8, 3, 4, 9, 10, 11, 8, 12], 8, 10) == 29", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/226": [{"task_id": "Mbpp/226", "solution": "\"\"\"\nWrite a python function to remove the characters which have odd index values of a given string.\nassert odd_values_string('abcdef') == 'ace'\n\"\"\"\ndef odd_values_string(str1):\n    # Initialize an empty string to store the result\n    result = \"\"\n    \n    # Iterate over the string using enumerate to get both index and character\n    for i, char in enumerate(str1):\n        # Check if the index is even (since we want characters at odd positions)\n        if i % 2 == 0:\n            # Append the character to the result string\n            result += char\n    \n    # Return the resulting string\n    return result\n\n# Test the function with the provided test case\nassert odd_values_string('abcdef') == 'ace'\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/171": [{"task_id": "Mbpp/171", "solution": "\"\"\"\nWrite a function to find the perimeter of a regular pentagon from the length of its sides.\nassert perimeter_pentagon(5) == 25\n\"\"\"\ndef perimeter_pentagon(side):\n    # Calculate the perimeter of a regular pentagon by multiplying the side length by 5\n    return 5 * side\n\n# Test the function with the provided test case\nassert perimeter_pentagon(5) == 25\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/168": [{"task_id": "Mbpp/168", "solution": "\"\"\"\nWrite a function to count the number of occurrences of a number in a given list.\nassert frequency([1,2,3], 4) == 0\n\"\"\"\ndef frequency(list1, x):\n    # Initialize a counter to zero\n    freq = 0\n    \n    # Iterate through each element in the list\n    for i in list1:\n        # If the current element matches the target value, increment the counter\n        if (i == x):\n            freq += 1\n            \n    # Return the total count of occurrences\n    return freq\n\n# Test the function with the provided test case\nassert frequency([1, 2, 3], 4) == 0\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/141": [{"task_id": "Mbpp/141", "solution": "\"\"\"\nWrite a function to sort a list of elements.\nassert pancake_sort([15, 79, 25, 38, 69]) == [15, 25, 38, 69, 79]\n\"\"\"\ndef flip(arr, i):\n    # Reverse the array from 0 to i\n    start = 0\n    while start < i:\n        arr[start], arr[i] = arr[i], arr[start]\n        start += 1\n        i -= 1\n\ndef find_max_index(arr, n):\n    # Find the index of the maximum element in arr[0..n-1]\n    max_idx = 0\n    for i in range(1, n):\n        if arr[i] > arr[max_idx]:\n            max_idx = i\n    return max_idx\n\ndef pancake_sort(arr):\n    # Sorts the given array using the Pancake sorting algorithm\n    curr_size = len(arr)\n    while curr_size > 1:\n        # Find the index of the maximum element in arr[0..curr_size-1]\n        mi = find_max_index(arr, curr_size)\n        \n        # Move the maximum number to end of current array if it's not already at the end\n        if mi != curr_size - 1:\n            # First move the maximum number to beginning\n            flip(arr, mi)\n            \n            # Now move the maximum number to end by reversing current array\n            flip(arr, curr_size - 1)\n        curr_size -= 1\n    \n    return arr\n\n# Test the function with the provided test case\nassert pancake_sort([15, 79, 25, 38, 69]) == [15, 25, 38, 69, 79]", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/234": [{"task_id": "Mbpp/234", "solution": "\"\"\"\nWrite a function to find the volume of a cube given its side length.\nassert volume_cube(3)==27\n\"\"\"\ndef volume_cube(side_length):\n    # Calculate the volume of the cube using the formula: side_length^3\n    return side_length ** 3\n\n# Test the function with the provided test case\nassert volume_cube(3) == 27\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/244": [{"task_id": "Mbpp/244", "solution": "\"\"\"\nWrite a python function to find the next perfect square greater than a given number.\nassert next_Perfect_Square(35) == 36\n\"\"\"\ndef next_Perfect_Square(n):\n    # Calculate the square root of the given number\n    x = int(n**0.5)\n    \n    # Increment the square root value to get the next integer\n    x += 1\n    \n    # Return the square of the incremented value\n    return x * x\n\n# Test the function with the provided test case\nassert next_Perfect_Square(35) == 36\n", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/238": [{"task_id": "Mbpp/238", "solution": "\"\"\"\nWrite a python function to count the number of non-empty substrings of a given string.\nassert number_of_substrings(\"abc\") == 6\n\"\"\"\ndef number_of_substrings(s):\n    # Calculate the length of the string\n    n = len(s)\n    \n    # Use the formula for the sum of the first n natural numbers to find the total number of substrings\n    return int(n * (n + 1) / 2)\n\n# Test the function with the provided test case\nassert number_of_substrings(\"abc\") == 6\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/142": [{"task_id": "Mbpp/142", "solution": "\"\"\"\nWrite a function to count number items that are identical in the same position of three given lists.\nassert count_samepair([1,2,3,4,5,6,7,8],[2,2,3,1,2,6,7,9],[2,1,3,1,2,6,7,9])==3\n\"\"\"\ndef count_samepair(nums1, nums2, nums3):\n    # Use zip to iterate over all three lists simultaneously\n    # Count elements where all three corresponding elements are equal\n    return sum(x == y == z for x, y, z in zip(nums1, nums2, nums3))\n\n# Test the function with the provided test case\nassert count_samepair([1, 2, 3, 4, 5, 6, 7, 8], [2, 2, 3, 1, 2, 6, 7, 9], [2, 1, 3, 1, 2, 6, 7, 9]) == 3", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/224": [{"task_id": "Mbpp/224", "solution": "\"\"\"\nWrite a python function to count the number of set bits (binary digits with value 1) in a given number.\nassert count_Set_Bits(2) == 1\n\"\"\"\ndef count_Set_Bits(n):\n    # Initialize count to zero\n    count = 0\n    \n    # Loop until n becomes zero\n    while n > 0:\n        # Increment count if the least significant bit is 1\n        count += n & 1\n        # Right shift n by 1 to check the next bit\n        n >>= 1\n    \n    return count\n\n# Test the function with the provided test case\nassert count_Set_Bits(2) == 1", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/172": [{"task_id": "Mbpp/172", "solution": "\"\"\"\nWrite a function to count the number of occurence of the string 'std' in a given string.\nassert count_occurance(\"letstdlenstdporstd\") == 3\n\"\"\"\ndef count_occurance(s):\n    # Initialize a counter for occurrences of 'std'\n    count = 0\n    \n    # Iterate through the string using a loop\n    for i in range(len(s) - 2):  # Subtract 2 to avoid index out of range error\n        # Check if the substring from current index to next 3 characters is 'std'\n        if s[i:i+3] == \"std\":\n            count += 1  # Increment the counter if condition is met\n    \n    return count\n\n# Test the function with the provided test case\nassert count_occurance(\"letstdlenstdporstd\") == 3", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/145": [{"task_id": "Mbpp/145", "solution": "\"\"\"\nWrite a python function to find the maximum difference between any two elements in a given array.\nassert max_Abs_Diff((2,1,5,3)) == 4\n\"\"\"\ndef max_Abs_Diff(arr):\n    # Initialize the minimum and maximum elements as the first element of the array\n    min_element = arr[0]\n    max_element = arr[0]\n    \n    # Iterate through the array starting from the second element\n    for i in range(1, len(arr)):\n        # Update the minimum element if the current element is smaller\n        if (arr[i] < min_element):\n            min_element = arr[i]\n        \n        # Update the maximum element if the current element is larger\n        elif (arr[i] > max_element):\n            max_element = arr[i]\n    \n    # Return the absolute difference between the maximum and minimum elements\n    return abs(max_element - min_element)\n\n# Test the function with the provided test case\nassert max_Abs_Diff((2, 1, 5, 3)) == 4", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/250": [{"task_id": "Mbpp/250", "solution": "\"\"\"\nWrite a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\nassert count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),4) == 0\n\"\"\"\ndef count_X(test_tup, K):\n    # Initialize counter to zero\n    res = 0\n    \n    # Iterate through each element in the tuple\n    for ele in test_tup:\n        # Check if the current element matches the target element\n        if ele == K:\n            # Increment counter if match found\n            res += 1\n            \n    return res\n\n# Test the function with the provided test case\nassert count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2), 4) == 0", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/240": [{"task_id": "Mbpp/240", "solution": "\"\"\"\nWrite a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\nassert replace_list([1, 3, 5, 7, 9, 10],[2, 4, 6, 8])==[1, 3, 5, 7, 9, 2, 4, 6, 8]\n\"\"\"\ndef replace_list(list1, list2):\n    # Replace the last element of list1 with all elements from list2\n    list1[-1:] = list2\n    return list1\n\n# Test the function with the provided test case\nassert replace_list([1, 3, 5, 7, 9, 10], [2, 4, 6, 8]) == [1, 3, 5, 7, 9, 2, 4, 6, 8]\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/237": [{"task_id": "Mbpp/237", "solution": "\"\"\"\nWrite a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\nassert check_occurences([(3, 1), (1, 3), (2, 5), (5, 2), (6, 3)] ) == {(1, 3): 2, (2, 5): 2, (3, 6): 1}\n\"\"\"\ndef check_occurences(test_list):\n    # Initialize an empty dictionary to store the count of each tuple\n    res = {}\n    \n    # Iterate over each tuple in the test list\n    for ele in test_list:\n        # If the tuple is already in the dictionary, increment its count\n        if ele in res:\n            res[ele] += 1\n        # Otherwise, add the tuple to the dictionary with a count of 1\n        else:\n            res[ele] = 1\n    \n    # Return the dictionary containing the counts of each tuple\n    return res\n\n# Test the function with the provided test case\nassert check_occurences([(3, 1), (1, 3), (2, 5), (5, 2), (6, 3)]) == {(1, 3): 2, (2, 5): 2, (3, 6): 1}", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/251": [{"task_id": "Mbpp/251", "solution": "\"\"\"\nWrite a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\nassert insert_element(['Red', 'Green', 'Black'] ,'c')==['c', 'Red', 'c', 'Green', 'c', 'Black']\n\"\"\"\ndef insert_element(lst, element):\n    # Initialize an empty list to store the result\n    res = []\n    \n    # Iterate over each item in the input list\n    for i in lst:\n        # Append the specified element followed by the current item to the result list\n        res.extend([element, i])\n    \n    # Return the modified list\n    return res\n\n# Test the function with the provided test case\nassert insert_element(['Red', 'Green', 'Black'], 'c') == ['c', 'Red', 'c', 'Green', 'c', 'Black']\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/235": [{"task_id": "Mbpp/235", "solution": "\"\"\"\nWrite a python function to set all even bits of a given number.\nassert even_bit_set_number(10) == 10\n\"\"\"\ndef even_bit_set_number(n):\n    # Initialize variables\n    i = 0\n    res = 0\n    \n    # Iterate through each bit position\n    while n > 0:\n        # Check if the current bit position is even\n        if i % 2 == 0:\n            # Set the bit at the current position in result\n            res |= (1 << i)\n        \n        # Move to the next bit position\n        i += 1\n        # Right shift n to process the next bit\n        n >>= 1\n    \n    # Combine the original number with the result to set even bits\n    return n | res\n\n# Test the function with the provided test case\nassert even_bit_set_number(10) == 10", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/252": [{"task_id": "Mbpp/252", "solution": "\"\"\"\nWrite a python function to convert complex numbers to polar coordinates.\nassert convert(1) == (1.0, 0.0)\n\"\"\"\nimport cmath\n\ndef convert(z):\n    # Convert the complex number z to its polar coordinate representation\n    return cmath.polar(complex(z))\n\n# Test the function with the provided test case\nassert convert(1) == (1.0, 0.0)\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/253": [{"task_id": "Mbpp/253", "solution": "\"\"\"\nWrite a python function that returns the number of integer elements in a given list.\nassert count_integer([1,2,'abc',1.2]) == 2\n\"\"\"\ndef count_integer(lst):\n    # Initialize a counter for integer elements\n    count = 0\n    \n    # Iterate through each element in the list\n    for i in lst:\n        # Check if the element is an instance of int\n        if isinstance(i, int):\n            # Increment the counter if it's an integer\n            count += 1\n            \n    # Return the total count of integer elements\n    return count\n\n# Test the function with the provided test case\nassert count_integer([1, 2, 'abc', 1.2]) == 2\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/164": [{"task_id": "Mbpp/164", "solution": "\"\"\"\nWrite a function to determine if the sum of the divisors of two integers are the same.\nassert are_equivalent(36, 57) == False\n\"\"\"\ndef calculate_divisor_sum(n):\n    # Initialize sum of divisors\n    divisor_sum = 0\n    \n    # Loop through possible divisors from 1 to n-1\n    for i in range(1, n):\n        # If i is a divisor of n, add it to the sum\n        if n % i == 0:\n            divisor_sum += i\n            \n    return divisor_sum\n\ndef are_equivalent(x, y):\n    # Compare the sum of divisors of x and y\n    return calculate_divisor_sum(x) == calculate_divisor_sum(y)\n\n# Test the function with the provided test case\nassert are_equivalent(36, 57) == False", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/84": [{"task_id": "Mbpp/84", "solution": "\"\"\"\nWrite a function to find the nth number in the newman conway sequence.\nassert sequence(10) == 6\n\"\"\"\ndef sequence(n):\n    # Base cases for the Newman-Conway Sequence\n    if n == 1 or n == 2:\n        return 1\n    \n    # Initialize an array to store the sequence values\n    f = [0] * (n + 1)\n    \n    # Set the first two elements of the sequence\n    f[1], f[2] = 1, 1\n    \n    # Compute the rest of the sequence using the recurrence relation\n    for i in range(3, n + 1):\n        f[i] = f[f[i - 1]] + f[i - f[i - 1]]\n    \n    # Return the nth element of the sequence\n    return f[n]\n\n# Test the function with the provided test case\nassert sequence(10) == 6", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[1000000]]}], "Mbpp/96": [{"task_id": "Mbpp/96", "solution": "\"\"\"\nWrite a python function to find the number of divisors of a given integer.\nassert divisor(15) == 4\n\"\"\"\ndef divisor(n):\n    # Initialize a counter for divisors\n    count = 0\n    \n    # Iterate through all numbers from 1 to n (inclusive)\n    for i in range(1, n + 1):\n        # Check if i is a divisor of n\n        if n % i == 0:\n            # If it is, increment the counter\n            count += 1\n            \n    # Return the total count of divisors\n    return count\n\n# Test the function with the provided test case\nassert divisor(15) == 4", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/239": [{"task_id": "Mbpp/239", "solution": "\"\"\"\nWrite a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\nassert get_total_number_of_sequences(10, 4) == 4\n\"\"\"\ndef get_total_number_of_sequences(m, n):\n    # Initialize a 2D list (m+1)x(n+1) with zeros\n    dp = [[0 for i in range(n + 1)] for j in range(m + 1)]\n    \n    # Iterate over all possible values of m and n\n    for i in range(1, m + 1):\n        for j in range(1, n + 1):\n            # If there's only one position in the sequence\n            if j == 1:\n                dp[i][j] = i\n            else:\n                # Calculate the number of sequences ending with i\n                dp[i][j] = dp[i - 1][j] + dp[i // 2][j - 1]\n    \n    # Return the total number of sequences of length n with elements up to m\n    return dp[m][n]\n\n# Test the function with the provided test case\nassert get_total_number_of_sequences(10, 4) == 4", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/126": [{"task_id": "Mbpp/126", "solution": "\"\"\"\nWrite a python function to find the sum of common divisors of two given numbers.\nassert sum(10,15) == 6\n\"\"\"\ndef sum(n1, n2):\n    # Initialize the sum of common divisors\n    s = 0\n    \n    # Iterate through all possible divisors up to the minimum of n1 and n2\n    for i in range(1, min(n1, n2) + 1):\n        # Check if both n1 and n2 are divisible by i\n        if (n1 % i == 0 and n2 % i == 0):\n            # Add the divisor to the sum\n            s += i\n            \n    return s\n\n# Test the function with the provided test case\nassert sum(10, 15) == 6", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[987654321, 123456789]]}], "Mbpp/247": [{"task_id": "Mbpp/247", "solution": "\"\"\"\nWrite a function to find the length of the longest palindromic subsequence in the given string.\nassert lps(\"TENS FOR TENS\") == 5\n\"\"\"\ndef lps(s):\n    # Get the length of the input string\n    n = len(s)\n    \n    # Create a 2D array to store lengths of longest palindromic subsequences\n    L = [[0 for x in range(n)]for y in range(n)]\n    \n    # Strings of length 1 are palindrome of length 1\n    for i in range(n):\n        L[i][i] = 1\n    \n    # Build the table. Note that the lower diagonal values of table are useless and not filled in the process. cl is length of substring\n    for cl in range(2, n+1):\n        for i in range(n-cl+1):\n            j = i + cl - 1\n            if s[i] == s[j] and cl == 2:\n                L[i][j] = 2\n            elif s[i] == s[j]:\n                L[i][j] = L[i+1][j-1] + 2\n            else:\n                L[i][j] = max(L[i][j-1], L[i+1][j])\n    \n    # Length of the longest palindromic subsequnce is in L[0][n-1]\n    return L[0][n-1]\n\n# Test the function with the provided test case\nassert lps(\"TENS FOR TENS\") == 5", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/162": [{"task_id": "Mbpp/162", "solution": "\"\"\"\nWrite a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\nassert sum_series(6) == 12\n\"\"\"\ndef sum_series(n):\n    # Initialize the result variable to store the sum of the series\n    res = 0\n    \n    # Loop through the range from 0 to n//2 (inclusive)\n    for i in range(n // 2 + 1):\n        # Add the value of n - 2*i to the result\n        res += n - 2 * i\n    \n    # Return the computed sum\n    return res\n\n# Test the function with the provided test case\nassert sum_series(6) == 12\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/256": [{"task_id": "Mbpp/256", "solution": "\"\"\"\nWrite a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\nassert count_Primes_nums(5) == 2\n\"\"\"\ndef count_Primes_nums(n):\n    # Initialize a list to track prime status for each number up to n-1\n    primes = [True] * (n - 1)\n    \n    # Iterate over each number starting from 2\n    for i in range(2, int(n**0.5) + 1):\n        if primes[i - 2]:\n            # Mark multiples of i as not prime\n            for j in range(i * i, n, i):\n                primes[j - 2] = False\n    \n    # Count the number of True values in the primes list\n    return sum(primes)\n\n# Test the function with the provided test case\nassert count_Primes_nums(5) == 2", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/264": [{"task_id": "Mbpp/264", "solution": "\"\"\"\nWrite a function to calculate a dog's age in dog's years.\nassert dog_age(12)==61\n\"\"\"\ndef dog_age(human_years):\n    # Check if the input age is negative\n    if human_years < 0:\n        exit()\n    # For the first two years, a dog year is equal to 10.5 human years\n    elif human_years <= 2:\n        dog_years = human_years * 10.5\n    # After two years, each dog year is equal to 4 human years\n    else:\n        dog_years = 21 + (human_years - 2) * 4\n    return dog_years\n\n# Test the function with the provided test case\nassert dog_age(12) == 61\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/286": [{"task_id": "Mbpp/286", "solution": "\"\"\"\nWrite a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\nassert max_sub_array_sum_repeated([10, 20, -30, -1], 4, 3) == 30\n\"\"\"\ndef max_sub_array_sum_repeated(arr, n, k):\n    # Calculate the maximum subarray sum for the original array\n    max_so_far = arr[0]\n    curr_max = arr[0]\n    \n    for i in range(1, n):\n        curr_max = max(arr[i], curr_max + arr[i])\n        max_so_far = max(max_so_far, curr_max)\n    \n    # Calculate the total sum of the array\n    total_sum = sum(arr)\n    \n    # If the total sum is positive, add it (k-1) times to the max_so_far\n    if total_sum > 0:\n        max_so_far += (total_sum * (k - 1))\n    \n    return max_so_far\n\n# Test the function with the provided test case\nassert max_sub_array_sum_repeated([10, 20, -30, -1], 4, 3) == 30", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/274": [{"task_id": "Mbpp/274", "solution": "\"\"\"\nWrite a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\nassert even_binomial_Coeff_Sum(4) == 8\n\"\"\"\ndef even_binomial_Coeff_Sum(n):\n    # Calculate the sum of even indexed binomial coefficients using bit manipulation\n    return (1 << (n - 1))\n\n# Test the function with the provided test case\nassert even_binomial_Coeff_Sum(4) == 8", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/265": [{"task_id": "Mbpp/265", "solution": "\"\"\"\nWrite a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\nassert list_split(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n'],3)==[['a', 'd', 'g', 'j', 'm'], ['b', 'e', 'h', 'k', 'n'], ['c', 'f', 'i', 'l']]\n\"\"\"\ndef list_split(lst, n):\n    # Split the list into sublists where each sublist contains elements at indices divisible by n\n    return [lst[i::n] for i in range(n)]\n\n# Test the function with the provided test case\nassert list_split(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n'], 3) == [['a', 'd', 'g', 'j', 'm'], ['b', 'e', 'h', 'k', 'n'], ['c', 'f', 'i', 'l']]\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/305": [{"task_id": "Mbpp/305", "solution": "\"\"\"\nWrite a function to return two words from a list of words starting with letter 'p'.\nassert start_withp([\"Python PHP\", \"Java JavaScript\", \"c c++\"])==('Python', 'PHP')\n\"\"\"\ndef start_withp(words):\n    # Use list comprehension to filter words starting with 'P' or 'p'\n    p_words = [word for word in words if word[0] == 'P' or word[0] == 'p']\n    \n    # Return the first two words found that match the criteria\n    return (p_words[0], p_words[1])\n\n# Test the function with the provided test case\nassert start_withp([\"Python PHP\", \"Java JavaScript\", \"c c++\"]) == ('Python', 'PHP')\n", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/273": [{"task_id": "Mbpp/273", "solution": "\"\"\"\nWrite a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\nassert substract_elements((10, 4, 5), (2, 5, 18)) == (8, -1, -13)\n\"\"\"\ndef substract_elements(test_tup1, test_tup2):\n    # Using list comprehension to subtract elements of both tuples at the same index\n    res = tuple(x - y for x, y in zip(test_tup1, test_tup2))\n    return res\n\n# Test the function with the provided test case\nassert substract_elements((10, 4, 5), (2, 5, 18)) == (8, -1, -13)\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/280": [{"task_id": "Mbpp/280", "solution": "\"\"\"\nWrite a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\nassert sequential_search([11,23,58,31,56,77,43,12,65,19],31) == (True, 3)\n\"\"\"\ndef sequential_search(arr, x):\n    # Iterate through each element in the array\n    for i in range(len(arr)):\n        # Check if the current element matches the target value\n        if arr[i] == x:\n            # Return True and the index of the element\n            return (True, i)\n    # If no match is found, return False and -1\n    return (False, -1)\n\n# Test the function with the provided test case\nassert sequential_search([11, 23, 58, 31, 56, 77, 43, 12, 65, 19], 31) == (True, 3)\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/257": [{"task_id": "Mbpp/257", "solution": "\"\"\"\nWrite a function that takes in two numbers and returns a tuple with the second number and then the first number.\nassert swap_numbers(10,20)==(20,10)\n\"\"\"\ndef swap_numbers(x, y):\n    # Create a tuple with the elements swapped\n    return (y, x)\n\n# Test the function with the provided test case\nassert swap_numbers(10, 20) == (20, 10)\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/262": [{"task_id": "Mbpp/262", "solution": "\"\"\"\nWrite a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\nassert split_two_parts([1,1,2,3,4,4,5,1],3)==([1, 1, 2], [3, 4, 4, 5, 1])\n\"\"\"\ndef split_two_parts(nums, L):\n    # Split the list into two parts: the first part has length L, and the second part contains the rest\n    return nums[:L], nums[L:]\n\n# Test the function with the provided test case\nassert split_two_parts([1, 1, 2, 3, 4, 4, 5, 1], 3) == ([1, 1, 2], [3, 4, 4, 5, 1])\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/272": [{"task_id": "Mbpp/272", "solution": "\"\"\"\nWrite a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\nassert rear_extract([(1, 'Rash', 21), (2, 'Varsha', 20), (3, 'Kil', 19)]) == [21, 20, 19]\n\"\"\"\ndef rear_extract(test_list):\n    # Using list comprehension to extract the last element from each tuple\n    res = [sub[-1] for sub in test_list]\n    return res\n\n# Test the function with the provided test case\nassert rear_extract([(1, 'Rash', 21), (2, 'Varsha', 20), (3, 'Kil', 19)]) == [21, 20, 19]\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/296": [{"task_id": "Mbpp/296", "solution": "\"\"\"\nWrite a python function to count inversions in an array.\nassert get_Inv_Count([1,20,6,4,5]) == 5\n\"\"\"\ndef merge_and_count(arr, temp_arr, left, mid, right):\n    i = left    # Starting index for left subarray\n    j = mid + 1 # Starting index for right subarray\n    k = left    # Starting index to be sorted\n    inv_count = 0\n\n    # Conditions are checked to ensure that i doesn't exceed mid and j doesn't exceed right\n    while i <= mid and j <= right:\n        if arr[i] <= arr[j]:\n            temp_arr[k] = arr[i]\n            i += 1\n        else:\n            # There are mid - i inversions, because all the remaining elements in the left subarray (arr[i], arr[i+1], ..., arr[mid])\n            # are greater than arr[j]\n            temp_arr[k] = arr[j]\n            inv_count += (mid-i + 1)\n            j += 1\n        k += 1\n\n    # Copy the remaining elements of left subarray, if any\n    while i <= mid:\n        temp_arr[k] = arr[i]\n        i += 1\n        k += 1\n\n    # Copy the remaining elements of right subarray, if any\n    while j <= right:\n        temp_arr[k] = arr[j]\n        j += 1\n        k += 1\n\n    # Copy the sorted subarray into Original array\n    for i in range(left, right + 1):\n        arr[i] = temp_arr[i]\n\n    return inv_count\n\ndef get_Inv_Count(arr):\n    # Create a temporary array and assign it to arr[]\n    temp_arr = [0]*len(arr)\n    return merge_sort_and_count(arr, temp_arr, 0, len(arr)-1)\n\ndef merge_sort_and_count(arr, temp_arr, left, right):\n    inv_count = 0\n    if left < right:\n        mid = (left + right)//2\n\n        inv_count += merge_sort_and_count(arr, temp_arr, left, mid)\n        inv_count += merge_sort_and_count(arr, temp_arr, mid + 1, right)\n        inv_count += merge_and_count(arr, temp_arr, left, mid, right)\n\n    return inv_count\n\n# Test the function with the provided test case\nassert get_Inv_Count([1, 20, 6, 4, 5]) == 5", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/284": [{"task_id": "Mbpp/284", "solution": "\"\"\"\nWrite a function that takes in a list and element and checks whether all items in the list are equal to the given element.\nassert check_element([\"green\", \"orange\", \"black\", \"white\"],'blue')==False\n\"\"\"\ndef check_element(lst, x):\n    # Check if all elements in the list are equal to the given element\n    return all(item == x for item in lst)\n\n# Test the function with the provided test case\nassert check_element([\"green\", \"orange\", \"black\", \"white\"], 'blue') == False\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/268": [{"task_id": "Mbpp/268", "solution": "\"\"\"\nWrite a function to find the n'th star number.\nassert find_star_num(3) == 37\n\"\"\"\ndef find_star_num(n):\n    # Calculate the n'th star number using the formula: (6 * n * (n - 1)) + 1\n    return (6 * n * (n - 1)) + 1\n\n# Test the function with the provided test case\nassert find_star_num(3) == 37\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/266": [{"task_id": "Mbpp/266", "solution": "\"\"\"\nWrite a function to find the lateral surface area of a cube given its side length.\nassert lateralsurface_cube(5)==100\n\"\"\"\ndef lateralsurface_cube(side):\n    # Calculate the lateral surface area of a cube using the formula 4 * side^2\n    return 4 * (side ** 2)\n\n# Test the function with the provided test case\nassert lateralsurface_cube(5) == 100\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/400": [{"task_id": "Mbpp/400", "solution": "\"\"\"\nWrite a function to extract the number of unique tuples in the given list.\nassert extract_freq([(3, 4), (1, 2), (4, 3), (5, 6)] ) == 3\n\"\"\"\ndef extract_freq(test_list):\n    # Convert each tuple in the list to a sorted tuple to ensure uniqueness\n    res = len(set(tuple(sorted(sub)) for sub in test_list))\n    return res\n\n# Test the function with the provided test case\nassert extract_freq([(3, 4), (1, 2), (4, 3), (5, 6)]) == 3\n", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/259": [{"task_id": "Mbpp/259", "solution": "\"\"\"\nWrite a function to maximize the given two tuples.\nassert maximize_elements(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((6, 7), (4, 9), (2, 9), (7, 10))\n\"\"\"\ndef maximize_elements(test_tup1, test_tup2):\n    # Use zip to pair elements from both tuples, map max to find the maximum for each pair, and convert back to tuple of tuples\n    res = tuple(map(max, zip(*test_tup1, *test_tup2)))\n    return res\n\n# Test the function with the provided test case\nassert maximize_elements(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((6, 7), (4, 9), (2, 9), (7, 10))", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/388": [{"task_id": "Mbpp/388", "solution": "\"\"\"\nWrite a python function to find the highest power of 2 that is less than or equal to n.\nassert highest_Power_of_2(10) == 8\n\"\"\"\ndef highest_Power_of_2(n):\n    # Initialize result variable\n    res = 1\n    \n    # Loop until res exceeds n\n    while (res * 2 <= n):\n        res *= 2\n    \n    return res\n\n# Test the function with the provided test case\nassert highest_Power_of_2(10) == 8\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/394": [{"task_id": "Mbpp/394", "solution": "\"\"\"\nWrite a function to check if given tuple contains no duplicates.\nassert check_distinct((1, 4, 5, 6, 1, 4)) == False\n\"\"\"\ndef check_distinct(test_tup):\n    # Convert the tuple to a set to remove duplicates and compare its length to the original tuple\n    res = len(set(test_tup)) == len(test_tup)\n    return res\n\n# Test the function with the provided test case\nassert check_distinct((1, 4, 5, 6, 1, 4)) == False\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/309": [{"task_id": "Mbpp/309", "solution": "\"\"\"\nWrite a python function to find the maximum of two numbers.\nassert maximum(5,10) == 10\n\"\"\"\ndef maximum(a, b):\n    # Compare two numbers and return the larger one\n    if a >= b:\n        return a\n    else:\n        return b\n\n# Test the function with the provided test case\nassert maximum(5, 10) == 10\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/311": [{"task_id": "Mbpp/311", "solution": "\"\"\"\nWrite a python function to set the left most unset bit.\nassert set_left_most_unset_bit(10) == 14\n\"\"\"\ndef set_left_most_unset_bit(n):\n    # Check if all bits of n are set\n    if (n & (n + 1)) == 0:\n        return n\n    \n    # Initialize variables for bit manipulation\n    count = 0\n    temp = n\n    \n    # Find the position of the rightmost unset bit\n    while temp != 0:\n        if (temp & 1) == 0:\n            break\n        count += 1\n        temp >>= 1\n    \n    # Set the leftmost unset bit\n    return n | (1 << count)\n\n# Test the function with the provided test case\nassert set_left_most_unset_bit(10) == 14", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/269": [{"task_id": "Mbpp/269", "solution": "\"\"\"\nWrite a function to find the ascii value of a character.\nassert ascii_value('A')==65\n\"\"\"\ndef ascii_value(char):\n    # Use the ord() function to get the ASCII value of the character\n    return ord(char)\n\n# Test the function with the provided test case\nassert ascii_value('A') == 65\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/312": [{"task_id": "Mbpp/312", "solution": "\"\"\"\nWrite a function to find the volume of a cone.\nassert math.isclose(volume_cone(5,12), 314.15926535897927, rel_tol=0.001)\n\"\"\"\nimport math\n\ndef volume_cone(radius, height):\n    # Calculate the volume of the cone using the formula (1/3) * \u03c0 * r^2 * h\n    return (1.0 / 3) * math.pi * radius ** 2 * height\n\n# Test the function with the provided test case\nassert math.isclose(volume_cone(5, 12), 314.15926535897927, rel_tol=0.001)\n", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[19, 17]], "plus_fail_tests": [[2.2, 4.7]]}], "Mbpp/306": [{"task_id": "Mbpp/306", "solution": "\"\"\"\nWrite a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nassert max_sum_increasing_subseq([1, 101, 2, 3, 100, 4, 5 ], 7, 4, 6) == 11\n\"\"\"\ndef max_sum_increasing_subseq(arr, n, i, k):\n    # Initialize a list to store the maximum sum for each index\n    dp = [0] * n\n    \n    # Base case: The maximum sum at the first index is the value at that index itself\n    dp[0] = arr[0]\n    \n    # Fill the dp array using dynamic programming\n    for j in range(1, n):\n        dp[j] = arr[j]\n        for m in range(j):\n            if arr[m] < arr[j]:\n                dp[j] = max(dp[j], dp[m] + arr[j])\n    \n    # Return the maximum sum of increasing subsequence up to index i including the kth element\n    return dp[i] + arr[k]\n\n# Test the function with the provided test case\nassert max_sum_increasing_subseq([1, 101, 2, 3, 100, 4, 5], 7, 4, 6) == 11", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/297": [{"task_id": "Mbpp/297", "solution": "\"\"\"\nWrite a function to flatten a given nested list structure.\nassert flatten_list([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]])==[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]\n\"\"\"\ndef flatten_list(nested_list):\n    # Initialize an empty list to store the flattened elements\n    flat_list = []\n    \n    # Iterate through each element in the nested list\n    for item in nested_list:\n        # Check if the current item is a list\n        if isinstance(item, list):\n            # Extend the flat_list with the flattened version of the current item\n            flat_list.extend(flatten_list(item))\n        else:\n            # Append the non-list item directly to the flat_list\n            flat_list.append(item)\n    \n    # Return the fully flattened list\n    return flat_list\n\n# Test the function with the provided test case\nassert flatten_list([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/395": [{"task_id": "Mbpp/395", "solution": "\"\"\"\nWrite a python function to find the first non-repeated character in a given string.\nassert first_non_repeating_character(\"abcabc\") == None\n\"\"\"\ndef first_non_repeating_character(s):\n    # Create a dictionary to store the frequency of each character\n    char_count = {}\n    \n    # Iterate over each character in the string\n    for char in s:\n        if char in char_count:\n            # Increment the count if the character is already in the dictionary\n            char_count[char] += 1\n        else:\n            # Initialize the count to 1 if the character is not in the dictionary\n            char_count[char] = 1\n    \n    # Iterate over each character in the string again\n    for char in s:\n        # Check if the count of the character is 1\n        if char_count[char] == 1:\n            # Return the first non-repeated character\n            return char\n    \n    # If no non-repeated character is found, return None\n    return None\n\n# Test the function with the provided test case\nassert first_non_repeating_character(\"abcabc\") == None", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/279": [{"task_id": "Mbpp/279", "solution": "\"\"\"\nWrite a function to find the nth decagonal number.\nassert is_num_decagonal(3) == 27\n\"\"\"\ndef is_num_decagonal(n):\n    # Calculate the nth decagonal number using the formula: n * (4n - 3)\n    return n * (4 * n - 3)\n\n# Test the function with the provided test case\nassert is_num_decagonal(3) == 27\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/409": [{"task_id": "Mbpp/409", "solution": "\"\"\"\nWrite a function to find the minimum product from the pairs of tuples within a given list.\nassert min_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)] )==8\n\"\"\"\ndef min_product_tuple(test_list):\n    # Calculate the product of each tuple pair using a generator expression\n    res = min([abs(x * y) for x, y in test_list])\n    return res\n\n# Test the function with the provided test case\nassert min_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)]) == 8\n", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[[[7, 2], [12, 9], [-5, 6], [8, -3], [0, 0]]]]}], "Mbpp/277": [{"task_id": "Mbpp/277", "solution": "\"\"\"\nWrite a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\nassert dict_filter({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190},170)=={'Cierra Vega': 175, 'Alden Cantrell': 180, 'Pierre Cox': 190}\n\"\"\"\ndef dict_filter(dict1, n):\n    # Use dictionary comprehension to filter out items where value is less than n\n    result = {key: value for key, value in dict1.items() if value >= n}\n    return result\n\n# Test the function with the provided test case\nassert dict_filter({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190}, 170) == {'Cierra Vega': 175, 'Alden Cantrell': 180, 'Pierre Cox': 190}", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/290": [{"task_id": "Mbpp/290", "solution": "\"\"\"\nWrite a function to find the list of maximum length in a list of lists.\nassert max_length([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(3, [13, 15, 17])\n\"\"\"\ndef max_length(lists):\n    # Find the maximum length among all sublists\n    max_len = max(len(x) for x in lists)\n    \n    # Filter and return the sublist(s) with the maximum length\n    result = [x for x in lists if len(x) == max_len]\n    \n    # Return both the maximum length and the sublist(s)\n    return (max_len, result)\n\n# Test the function with the provided test case\nassert max_length([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]]) == (3, [13, 15, 17])", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/282": [{"task_id": "Mbpp/282", "solution": "\"\"\"\nWrite a function to subtract two lists element-wise.\nassert sub_list([1, 2, 3],[4,5,6])==[-3,-3,-3]\n\"\"\"\ndef sub_list(list1, list2):\n    # Use list comprehension to iterate through both lists simultaneously\n    # Subtract each pair of elements from the two lists\n    result = [i - j for i, j in zip(list1, list2)]\n    return result\n\n# Test the function with the provided test case\nassert sub_list([1, 2, 3], [4, 5, 6]) == [-3, -3, -3]\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/281": [{"task_id": "Mbpp/281", "solution": "\"\"\"\nWrite a python function to check if the elements of a given list are unique or not.\nassert all_unique([1,2,3]) == True\n\"\"\"\ndef all_unique(data):\n    # Convert the list to a set to remove duplicates and compare its length to the original list\n    return len(set(data)) == len(data)\n\n# Test the function with the provided test case\nassert all_unique([1, 2, 3]) == True\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/270": [{"task_id": "Mbpp/270", "solution": "\"\"\"\nWrite a python function to find the sum of even numbers at even positions of a list.\nassert sum_even_and_even_index([5, 6, 12, 1, 18, 8]) == 30\n\"\"\"\ndef sum_even_and_even_index(lst):\n    # Initialize the sum variable to store the result\n    total_sum = 0\n    \n    # Iterate over the list using enumerate to get both index and value\n    for i, num in enumerate(lst):\n        # Check if the index is even and the number is even\n        if i % 2 == 0 and num % 2 == 0:\n            # Add the number to the total sum\n            total_sum += num\n    \n    # Return the computed sum\n    return total_sum\n\n# Test the function with the provided test case\nassert sum_even_and_even_index([5, 6, 12, 1, 18, 8]) == 30", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/293": [{"task_id": "Mbpp/293", "solution": "\"\"\"\nWrite a function to find the third side of a right angled triangle.\nassert otherside_rightangle(7,8)==10.63014581273465\n\"\"\"\nimport math\n\ndef otherside_rightangle(a, b):\n    # Calculate the square of the hypotenuse using Pythagorean theorem\n    c_square = (a ** 2) + (b ** 2)\n    \n    # Take the square root of the sum to get the length of the hypotenuse\n    c = math.sqrt(c_square)\n    \n    return c\n\n# Test the function with the provided test case\nassert otherside_rightangle(7, 8) == 10.63014581273465\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/310": [{"task_id": "Mbpp/310", "solution": "\"\"\"\nWrite a function to convert a given string to a tuple of characters.\nassert string_to_tuple(\"python 3.0\")==('p', 'y', 't', 'h', 'o', 'n', '3', '.', '0')\n\"\"\"\ndef string_to_tuple(str):\n    # Convert the input string into a tuple of its characters\n    return tuple(str)\n\n# Test the function with the provided test case\nassert string_to_tuple(\"python 3.0\") == ('p', 'y', 't', 'h', 'o', 'n', '3', '.', '0')\n", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/294": [{"task_id": "Mbpp/294", "solution": "\"\"\"\nWrite a function to find the maximum value in a given heterogeneous list.\nassert max_val(['Python', 3, 2, 4, 5, 'version'])==5\n\"\"\"\ndef max_val(mixed_list):\n    # Filter out non-integer values from the list using a generator expression\n    filtered_values = (item for item in mixed_list if isinstance(item, int))\n    \n    # Use the built-in max() function to find the maximum integer value\n    return max(filtered_values)\n\n# Test the function with the provided test case\nassert max_val(['Python', 3, 2, 4, 5, 'version']) == 5\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/308": [{"task_id": "Mbpp/308", "solution": "\"\"\"\nWrite a function to find the specified number of largest products from two given lists, selecting one factor from each list.\nassert large_product([1, 2, 3, 4, 5, 6],[3, 6, 8, 9, 10, 6],3)==[60, 54, 50]\n\"\"\"\ndef large_product(list1, list2, N):\n    # Calculate all possible products between elements of the two lists\n    product = [list1[i] * list2[j] for i in range(len(list1)) for j in range(len(list2))]\n    \n    # Sort the list of products in descending order\n    product.sort(reverse=True)\n    \n    # Return the first N elements from the sorted list of products\n    return product[:N]\n\n# Test the function with the provided test case\nassert large_product([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 3) == [60, 54, 50]", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/397": [{"task_id": "Mbpp/397", "solution": "\"\"\"\nWrite a function to find the median of three numbers.\nassert median_numbers(25,55,65)==55.0\n\"\"\"\ndef median_numbers(x, y, z):\n    # Sort the numbers and return the middle one as the median\n    if x < y:\n        if y < z:\n            return y\n        elif x < z:\n            return z\n        else:\n            return x\n    else:\n        if x < z:\n            return x\n        elif y < z:\n            return z\n        else:\n            return y\n\n# Test the function with the provided test case\nassert median_numbers(25, 55, 65) == 55.0\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/396": [{"task_id": "Mbpp/396", "solution": "\"\"\"\nWrite a function to check whether the given string starts and ends with the same character or not.\nassert check_char(\"abba\") == \"Valid\"\n\"\"\"\ndef check_char(str1):\n    # Check if the first and last characters of the string are the same\n    if str1[0] == str1[-1]:\n        return \"Valid\"\n    else:\n        return \"Invalid\"\n\n# Test the function with the provided test case\nassert check_char(\"abba\") == \"Valid\"\n", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/287": [{"task_id": "Mbpp/287", "solution": "\"\"\"\nWrite a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\nassert square_Sum(2) == 20\n\"\"\"\ndef square_Sum(n):\n    # Calculate the sum of squares of the first n even natural numbers\n    return int((n * (n + 1) * (2 * n + 1)) / 3)\n\n# Test the function with the provided test case\nassert square_Sum(2) == 20\n", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/267": [{"task_id": "Mbpp/267", "solution": "\"\"\"\nWrite a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\nassert square_Sum(2) == 10\n\"\"\"\ndef square_Sum(n):\n    # Initialize the sum to zero\n    sum = 0\n    \n    # Iterate through the first n odd numbers\n    for i in range(1, 2 * n, 2):\n        # Add the square of each odd number to the sum\n        sum += i ** 2\n    \n    # Return the computed sum\n    return sum\n\n# Test the function with the provided test case\nassert square_Sum(2) == 10", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/301": [{"task_id": "Mbpp/301", "solution": "\"\"\"\nWrite a function to find the depth of a dictionary.\nassert dict_depth({'a':1, 'b': {'c': {'d': {}}}})==4\n\"\"\"\ndef dict_depth(d):\n    # Check if the input is a dictionary\n    if isinstance(d, dict):\n        # If it's not empty, return 1 plus the maximum depth of its values\n        return 1 + (max(map(dict_depth, d.values())) if d else 0)\n    # If the input is not a dictionary, return 0\n    return 0\n\n# Test the function with the provided test case\nassert dict_depth({'a': 1, 'b': {'c': {'d': {}}}}) == 4\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/292": [{"task_id": "Mbpp/292", "solution": "\"\"\"\nWrite a python function to find quotient of two numbers (rounded down to the nearest integer).\nassert find(10,3) == 3\n\"\"\"\ndef find(x, y):\n    # Calculate the quotient using floor division\n    return x // y\n\n# Test the function with the provided test case\nassert find(10, 3) == 3\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/299": [{"task_id": "Mbpp/299", "solution": "\"\"\"\nWrite a function to calculate the maximum aggregate from the list of tuples.\nassert max_aggregate([('Juan Whelan',90),('Sabah Colley',88),('Peter Nichols',7),('Juan Whelan',122),('Sabah Colley',84)])==('Juan Whelan', 212)\n\"\"\"\ndef max_aggregate(test_list):\n    # Initialize an empty dictionary to store the sum of values for each key\n    res_dict = {}\n    \n    # Iterate through each tuple in the test list\n    for key, val in test_list:\n        # If the key is already in the dictionary, add the value to its current total\n        if key in res_dict:\n            res_dict[key] += val\n        else:\n            # Otherwise, set the initial value for this key\n            res_dict[key] = val\n    \n    # Find the key with the maximum value in the dictionary\n    res_key = max(res_dict, key=res_dict.get)\n    \n    # Return the key-value pair with the maximum value\n    return (res_key, res_dict[res_key])\n\n# Test the function with the provided test case\nassert max_aggregate([('Juan Whelan', 90), ('Sabah Colley', 88), ('Peter Nichols', 7), ('Juan Whelan', 122), ('Sabah Colley', 84)]) == ('Juan Whelan', 212)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/285": [{"task_id": "Mbpp/285", "solution": "\"\"\"\nWrite a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\nassert text_match_two_three(\"ac\")==(False)\n\"\"\"\nimport re\n\ndef text_match_two_three(text):\n    # Define the pattern to match 'a' followed by two or three 'b's\n    pattern = 'ab{2,3}'\n    \n    # Search for the pattern in the given text\n    if re.search(pattern,  text):\n        return True\n    else:\n        return False\n\n# Test the function with the provided test case\nassert text_match_two_three(\"ac\") == (False)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/391": [{"task_id": "Mbpp/391", "solution": "\"\"\"\nWrite a function to convert more than one list to nested dictionary.\nassert convert_list_dictionary([\"S001\", \"S002\", \"S003\", \"S004\"],[\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"] ,[85, 98, 89, 92])==[{'S001': {'Adina Park': 85}}, {'S002': {'Leyton Marsh': 98}}, {'S003': {'Duncan Boyle': 89}}, {'S004': {'Saim Richards': 92}}]\n\"\"\"\ndef convert_list_dictionary(list1, list2, list3):\n    # Use zip to iterate over all three lists simultaneously\n    result = [{list1[i]: {list2[i]: list3[i]}} for i in range(len(list1))]\n    return result\n\n# Test the function with the provided test case\nassert convert_list_dictionary(\n    [\"S001\", \"S002\", \"S003\", \"S004\"],\n    [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"],\n    [85, 98, 89, 92]\n) == [{'S001': {'Adina Park': 85}}, {'S002': {'Leyton Marsh': 98}}, {'S003': {'Duncan Boyle': 89}}, {'S004': {'Saim Richards': 92}}]", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[["S001", "S002", "S003", "S004"], ["Adina Park", "Leyton Marsh", "Duncan Boyle", "Saim Richards"], [[1, 2, 3], [4, 5, 6], {"a": "x", "b": "y", "c": "z"}]]]}], "Mbpp/406": [{"task_id": "Mbpp/406", "solution": "\"\"\"\nWrite a python function to find whether the parity of a given number is odd.\nassert find_Parity(12) == False\n\"\"\"\ndef find_Parity(n):\n    # Check if the number is even or odd using bitwise AND operation\n    return (n & 1)\n\n# Test the function with the provided test case\nassert find_Parity(12) == False", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/404": [{"task_id": "Mbpp/404", "solution": "\"\"\"\nWrite a python function to find the minimum of two numbers.\nassert minimum(1,2) == 1\n\"\"\"\ndef minimum(x, y):\n    # Use the min function to find the smallest number between x and y\n    return min(x, y)\n\n# Test the function with the provided test case\nassert minimum(1, 2) == 1\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/283": [{"task_id": "Mbpp/283", "solution": "\"\"\"\nWrite a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nassert validate(1234) == True\n\"\"\"\ndef validate(n):\n    # Convert the number to a string to iterate over each digit\n    s = str(n)\n    \n    # Iterate over each unique digit in the string representation of the number\n    for i in set(s):\n        # Count the frequency of the current digit in the string\n        if s.count(i) > int(i):\n            return False\n    \n    return True\n\n# Test the function with the provided test case\nassert validate(1234) == True\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/261": [{"task_id": "Mbpp/261", "solution": "\"\"\"\nWrite a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\nassert division_elements((10, 4, 6, 9),(5, 2, 3, 3)) == (2, 2, 2, 3)\n\"\"\"\ndef division_elements(test_tup1, test_tup2):\n    # Using map() to apply lambda for division of elements from both tuples\n    res = tuple(map(lambda x, y: x / y if y != 0 else 'Error', test_tup1, test_tup2))\n    return res\n\n# Test the function with the provided test case\nassert division_elements((10, 4, 6, 9), (5, 2, 3, 3)) == (2.0, 2.0, 2.0, 3.0)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/295": [{"task_id": "Mbpp/295", "solution": "\"\"\"\nWrite a function to return the sum of all divisors of a number.\nassert sum_div(8)==7\n\"\"\"\ndef sum_div(n):\n    # Initialize the sum of divisors to 0\n    s = 0\n    \n    # Loop through numbers from 1 to n-1 to find divisors\n    for i in range(1, n):\n        if n % i == 0:  # Check if i is a divisor of n\n            s += i  # Add the divisor to the sum\n    \n    return s\n\n# Test the function with the provided test case\nassert sum_div(8) == 7", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/405": [{"task_id": "Mbpp/405", "solution": "\"\"\"\nWrite a function to check whether an element exists within a tuple.\nassert check_tuplex((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"),'r')==True\n\"\"\"\ndef check_tuplex(tuplex, element):\n    # Check if the element exists in the tuple\n    return element in tuplex\n\n# Test the function with the provided test case\nassert check_tuplex((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"), 'r') == True\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/300": [{"task_id": "Mbpp/300", "solution": "\"\"\"\nWrite a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\nassert math.isclose(count_binary_seq(1), 2.0, rel_tol=0.001)\n\"\"\"\nimport math\n\ndef count_binary_seq(n):\n    # Initialize a list to store binomial coefficients\n    C = [0] * (2 * n + 1)\n    \n    # Base case: C[0] is always 1\n    C[0] = 1\n    \n    # Calculate binomial coefficients using Pascal's triangle\n    for i in range(1, 2 * n + 1):\n        C[i] = 0\n        for j in range(min(i, n), -1, -1):\n            C[j] += C[j - 1]\n    \n    # Initialize result variable\n    res = 0\n    \n    # Sum up the squares of binomial coefficients\n    for i in range(n + 1):\n        res += C[i] ** 2\n    \n    return res\n\n# Test the function with the provided test case\nassert math.isclose(count_binary_seq(1), 2.0, rel_tol=0.001)", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/410": [{"task_id": "Mbpp/410", "solution": "\"\"\"\nWrite a function to find the minimum value in a given heterogeneous list.\nassert min_val(['Python', 3, 2, 4, 5, 'version'])==2\n\"\"\"\ndef min_val(mixed_list):\n    # Filter out non-integer values from the list using a generator expression\n    filtered_values = (item for item in mixed_list if isinstance(item, int))\n    \n    # Use the built-in min() function to find the smallest integer in the filtered list\n    return min(filtered_values)\n\n# Test the function with the provided test case\nassert min_val(['Python', 3, 2, 4, 5, 'version']) == 2\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/276": [{"task_id": "Mbpp/276", "solution": "\"\"\"\nWrite a function that takes in the radius and height of a cylinder and returns the the volume.\nassert math.isclose(volume_cylinder(10,5), 1570.7500000000002, rel_tol=0.001)\n\"\"\"\nimport math\n\ndef volume_cylinder(radius, height):\n    # Calculate the area of the circular base using the formula \u03c0r^2\n    base_area = math.pi * (radius ** 2)\n    \n    # Calculate the volume of the cylinder using the formula V = base_area * height\n    return base_area * height\n\n# Test the function with the provided test case\nassert math.isclose(volume_cylinder(10, 5), 1570.7500000000002, rel_tol=0.001)\n", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[2.951124891044273, 9]]}], "Mbpp/390": [{"task_id": "Mbpp/390", "solution": "\"\"\"\nWrite a function to apply a given format string to all of the elements in a list.\nassert add_string([1,2,3,4],'temp{0}')==['temp1', 'temp2', 'temp3', 'temp4']\n\"\"\"\ndef add_string(list1, str1):\n    # Use list comprehension to iterate over each element in the list\n    # Apply the format string to each element using the format() method\n    result = [str1.format(i) for i in list1]\n    return result\n\n# Test the function with the provided test case\nassert add_string([1, 2, 3, 4], 'temp{0}') == ['temp1', 'temp2', 'temp3', 'temp4']\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/278": [{"task_id": "Mbpp/278", "solution": "\"\"\"\nWrite a function to find the number of elements that occurs before the tuple element in the given tuple.\nassert count_first_elements((1, 5, 7, (4, 6), 10) ) == 3\n\"\"\"\ndef count_first_elements(test_tup):\n    # Initialize counter to zero\n    res = 0\n    # Iterate through each element in the tuple\n    for ele in test_tup:\n        # Check if the current element is not a tuple\n        if not isinstance(ele, tuple):\n            # Increment the counter if it's not a tuple\n            res += 1\n        else:\n            # Break the loop once a tuple is encountered\n            break\n    return res\n\n# Test the function with the provided test case\nassert count_first_elements((1, 5, 7, (4, 6), 10)) == 3", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[[1, 2, 3, 4, 5, 6]]]}], "Mbpp/398": [{"task_id": "Mbpp/398", "solution": "\"\"\"\nWrite a function to compute the sum of digits of each number of a given list.\nassert sum_of_digits([10,2,56])==14\n\"\"\"\ndef sum_of_digits(nums):\n    # Initialize a variable to store the total sum of digits\n    total_sum = 0\n    \n    # Iterate through each number in the list\n    for num in nums:\n        # Convert the number to string to iterate over each digit\n        for digit in str(num):\n            # Add the integer value of the digit to the total sum\n            total_sum += int(digit)\n    \n    # Return the computed total sum of digits\n    return total_sum\n\n# Test the function with the provided test case\nassert sum_of_digits([10, 2, 56]) == 14", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[[10, 20, 4, 5, "b", 70, "a"]]]], "plus_fail_tests": [[[-10, 15, 0, -5, 2]]]}], "Mbpp/407": [{"task_id": "Mbpp/407", "solution": "\"\"\"\nWrite a function to create the next bigger number by rearranging the digits of a given number.\nassert rearrange_bigger(12)==21\n\"\"\"\ndef rearrange_bigger(n):\n    # Convert the number to a list of its digits\n    nums = list(str(n))\n    \n    # Traverse the list from right to left\n    for i in range(len(nums) - 2, -1, -1):\n        # If the current digit is less than the next one\n        if nums[i] < nums[i + 1]:\n            # Extract the part of the list that needs to be rearranged\n            to_rearrange = nums[i:]\n            # Find the smallest digit greater than the first digit of 'to_rearrange'\n            min_greater = min(filter(lambda x: x > to_rearrange[0], to_rearrange))\n            # Remove this digit from 'to_rearrange'\n            to_rearrange.remove(min_greater)\n            # Sort the remaining digits in ascending order\n            to_rearrange.sort()\n            # Reconstruct the list with the new arrangement\n            nums[i:] = [min_greater] + to_rearrange\n            # Return the new number as an integer\n            return int(\"\".join(nums))\n\n# Test the function with the provided test case\nassert rearrange_bigger(12) == 21", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/412": [{"task_id": "Mbpp/412", "solution": "\"\"\"\nWrite a python function to remove odd numbers from a given list.\nassert remove_odd([1,2,3]) == [2]\n\"\"\"\ndef remove_odd(nums):\n    # Use list comprehension to filter out odd numbers\n    return [num for num in nums if num % 2 == 0]\n\n# Test the function with the provided test case\nassert remove_odd([1, 2, 3]) == [2]\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/415": [{"task_id": "Mbpp/415", "solution": "\"\"\"\nWrite a python function to find a pair with highest product from a given array of integers.\nassert max_Product([1,2,3,4,7,0,8,4]) == (7,8)\n\"\"\"\ndef max_Product(arr):\n    # Initialize two variables to store the maximum and second maximum elements\n    x = y = float('-inf')\n    \n    # Iterate through each element in the array\n    for i in arr:\n        # Update the maximum and second maximum if the current element is greater\n        if i > x:\n            y = x  # Move the old maximum to the second maximum\n            x = i  # Update the new maximum\n        elif i > y:\n            y = i  # Update the second maximum if the current element is between x and y\n    \n    # Return the pair of numbers with the highest product\n    return (x, y)\n\n# Test the function with the provided test case\nassert max_Product([1, 2, 3, 4, 7, 0, 8, 4]) == (7, 8)", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/413": [{"task_id": "Mbpp/413", "solution": "\"\"\"\nWrite a function to extract the nth element from a given list of tuples.\nassert extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,0)==['Greyson Fulton', 'Brady Kent', 'Wyatt Knott', 'Beau Turnbull']\n\"\"\"\ndef extract_nth_element(test_list, N):\n    # Extracts the Nth element from each tuple in the list using list comprehension\n    res = [sub[N] for sub in test_list]\n    return res\n\n# Test the function with the provided test case\nassert extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)], 0) == ['Greyson Fulton', 'Brady Kent', 'Wyatt Knott', 'Beau Turnbull']", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/418": [{"task_id": "Mbpp/418", "solution": "\"\"\"\nWrite a python function to find the element of a list having maximum length.\nassert Find_Max([['A'],['A','B'],['A','B','C']]) == ['A','B','C']\n\"\"\"\ndef Find_Max(list1):\n    # Use the max function with key=len to find the sublist with the maximum length\n    return max(list1, key=len)\n\n# Test the function with the provided test case\nassert Find_Max([['A'], ['A', 'B'], ['A', 'B', 'C']]) == ['A', 'B', 'C']\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/450": [{"task_id": "Mbpp/450", "solution": "\"\"\"\nWrite a function to extract specified size of strings from a given list of string values.\nassert extract_string(['Python', 'list', 'exercises', 'practice', 'solution'] ,8)==['practice', 'solution']\n\"\"\"\ndef extract_string(string_list, n):\n    # Use list comprehension to filter strings longer than or equal to length n\n    result = [string for string in string_list if len(string) >= n]\n    return result\n\n# Test the function with the provided test case\nassert extract_string(['Python', 'list', 'exercises', 'practice', 'solution'], 8) == ['practice', 'solution']\n", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/426": [{"task_id": "Mbpp/426", "solution": "\"\"\"\nWrite a function to filter odd numbers.\nassert filter_oddnumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1,3,5,7,9]\n\"\"\"\ndef filter_oddnumbers(nums):\n    # Use list comprehension to filter out even numbers and keep only odd numbers\n    return [num for num in nums if num % 2 != 0]\n\n# Test the function with the provided test case\nassert filter_oddnumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 3, 5, 7, 9]\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/421": [{"task_id": "Mbpp/421", "solution": "\"\"\"\nWrite a function to concatenate each element of tuple by the delimiter.\nassert concatenate_tuple((\"ID\", \"is\", 4, \"UTS\") ) == 'ID-is-4-UTS'\n\"\"\"\ndef concatenate_tuple(test_tup):\n    # Convert all elements in the tuple to strings and join them using '-'\n    res = '-'.join(str(ele) for ele in test_tup)\n    return str(res)\n\n# Test the function with the provided test case\nassert concatenate_tuple((\"ID\", \"is\", 4, \"UTS\")) == 'ID-is-4-UTS'\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/419": [{"task_id": "Mbpp/419", "solution": "\"\"\"\nWrite a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\nassert round_and_sum([22.4, 4.0, -16.22, -9.10, 11.00, -12.22, 14.20, -5.20, 17.50])==243\n\"\"\"\ndef round_and_sum(nums):\n    # Calculate the length of the list\n    n = len(nums)\n    \n    # Round each number in the list and calculate the sum\n    total_sum = sum(map(round, nums))\n    \n    # Multiply the total sum by the length of the list\n    result = total_sum * n\n    \n    return result\n\n# Test the function with the provided test case\nassert round_and_sum([22.4, 4.0, -16.22, -9.10, 11.00, -12.22, 14.20, -5.20, 17.50]) == 243", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/414": [{"task_id": "Mbpp/414", "solution": "\"\"\"\nWrite a python function to check whether any value in a sequence exists in a sequence or not.\nassert overlapping([1,2,3,4,5],[6,7,8,9]) == False\n\"\"\"\ndef overlapping(list1, list2):\n    # Check if there is any common element between the two lists\n    return bool(set(list1) & set(list2))\n\n# Test the function with the provided test case\nassert overlapping([1, 2, 3, 4, 5], [6, 7, 8, 9]) == False", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/428": [{"task_id": "Mbpp/428", "solution": "\"\"\"\nWrite a function to sort the given array by using shell sort.\nassert shell_sort([12, 23, 4, 5, 3, 2, 12, 81, 56, 95]) == [2, 3, 4, 5, 12, 12, 23, 56, 81, 95]\n\"\"\"\ndef shell_sort(arr):\n    # Start with a big gap, then reduce the gap\n    n = len(arr)\n    gap = n // 2\n    \n    # Do a gapped insertion sort for this gap size.\n    # The first gap elements arr[0..gap-1] are already in gapped order\n    # keep adding one more element until the entire array is gap sorted\n    while gap > 0:\n        for i in range(gap, n):\n            temp = arr[i]\n            \n            # shift earlier gap-sorted elements up until the correct location for arr[i] is found\n            j = i\n            while j >= gap and arr[j - gap] > temp:\n                arr[j] = arr[j - gap]\n                j -= gap\n            \n            # put temp (the original arr[i]) in its correct location\n            arr[j] = temp\n        \n        gap //= 2\n\n# Test the function with the provided test case\nassert shell_sort([12, 23, 4, 5, 3, 2, 12, 81, 56, 95]) == [2, 3, 4, 5, 12, 12, 23, 56, 81, 95]", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/439": [{"task_id": "Mbpp/439", "solution": "\"\"\"\nWrite a function to join a list of multiple integers into a single integer.\nassert multiple_to_single([11, 33, 50])==113350\n\"\"\"\ndef multiple_to_single(nums):\n    # Convert each integer in the list to a string and concatenate them\n    result = int(''.join(str(i) for i in nums))\n    return result\n\n# Test the function with the provided test case\nassert multiple_to_single([11, 33, 50]) == 113350\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/432": [{"task_id": "Mbpp/432", "solution": "\"\"\"\nWrite a function to find the median length of a trapezium.\nassert median_trapezium(15,25,35)==20\n\"\"\"\ndef median_trapezium(base_a, base_b, height):\n    # Calculate the median length of the trapezium using the formula: (base_a + base_b) / 2\n    return (base_a + base_b) / 2\n\n# Test the function with the provided test case\nassert median_trapezium(15, 25, 35) == 20\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/448": [{"task_id": "Mbpp/448", "solution": "\"\"\"\nWrite a function to calculate the sum of perrin numbers.\nassert cal_sum(9) == 49\n\"\"\"\ndef cal_sum(n):\n    # Initialize the first three Perrin numbers\n    p0 = 3\n    p1 = 0\n    p2 = 2\n    \n    # Base cases for n < 3\n    if n == 0:\n        return p0\n    elif n == 1:\n        return p0 + p1\n    elif n == 2:\n        return p0 + p1 + p2\n    \n    # Calculate the sum of Perrin numbers up to n\n    total = p0 + p1 + p2\n    for i in range(3, n + 1):\n        # The next Perrin number is the sum of the two preceding ones\n        p_next = p0 + p1\n        total += p_next\n        \n        # Update the values for the next iteration\n        p0 = p1\n        p1 = p2\n        p2 = p_next\n    \n    return total\n\n# Test the function with the provided test case\nassert cal_sum(9) == 49", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/438": [{"task_id": "Mbpp/438", "solution": "\"\"\"\nWrite a function to count bidirectional tuple pairs.\nassert count_bidirectional([(5, 6), (1, 2), (6, 5), (9, 1), (6, 5), (2, 1)] ) == 3\n\"\"\"\ndef count_bidirectional(test_list):\n    # Initialize a counter for bidirectional tuples\n    res = 0\n    \n    # Iterate through each tuple in the list\n    for ele in test_list:\n        # Check if the reverse of the current tuple exists in the list\n        if (ele[1], ele[0]) in test_list:\n            # Increment the counter if a bidirectional pair is found\n            res += 1\n    \n    # Return half the result since each pair is counted twice\n    return res // 2\n\n# Test the function with the provided test case\nassert count_bidirectional([(5, 6), (1, 2), (6, 5), (9, 1), (6, 5), (2, 1)]) == 3", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/458": [{"task_id": "Mbpp/458", "solution": "\"\"\"\nWrite a function to find the area of a rectangle.\nassert rectangle_area(10,20)==200\n\"\"\"\ndef rectangle_area(length, width):\n    # Calculate the area of the rectangle using the formula: length * width\n    return length * width\n\n# Test the function with the provided test case\nassert rectangle_area(10, 20) == 200\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/427": [{"task_id": "Mbpp/427", "solution": "\"\"\"\nWrite a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nassert change_date_format(\"2026-01-02\") == '02-01-2026'\n\"\"\"\ndef change_date_format(date):\n    # Split the input date string into year, month, and day components\n    year, month, day = date.split('-')\n    \n    # Reformat the date to dd-mm-yyyy format\n    return f\"{day}-{month}-{year}\"\n\n# Test the function with the provided test case\nassert change_date_format(\"2026-01-02\") == '02-01-2026'\n", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/437": [{"task_id": "Mbpp/437", "solution": "\"\"\"\nWrite a function to remove odd characters in a string.\nassert remove_odd(\"python\")==(\"yhn\")\n\"\"\"\ndef remove_odd(s):\n    # Initialize an empty list to store even-indexed characters\n    result = []\n    \n    # Iterate over the string using enumerate to get both index and character\n    for i, char in enumerate(s):\n        # Check if the index is even (i.e., character position is even)\n        if i % 2 == 0:\n            # Append the character at the even index to the result list\n            result.append(char)\n    \n    # Join the list of characters into a single string and return it\n    return ''.join(result)\n\n# Test the function with the provided test case\nassert remove_odd(\"python\") == \"yhn\"\n", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/422": [{"task_id": "Mbpp/422", "solution": "\"\"\"\nWrite a python function to find the average of cubes of first n natural numbers.\nassert find_Average_Of_Cube(2) == 4.5\n\"\"\"\ndef find_Average_Of_Cube(n):\n    # Calculate the sum of cubes of the first n natural numbers\n    sum = (n * (n + 1)) // 2\n    # Calculate the cube of the sum\n    cube_sum = sum ** 3\n    # Return the average of the cubes\n    return cube_sum / n\n\n# Test the function with the provided test case\nassert find_Average_Of_Cube(2) == 4.5\n", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/425": [{"task_id": "Mbpp/425", "solution": "\"\"\"\nWrite a function to count the number of sublists containing a particular element.\nassert count_element_in_list([[1, 3], [5, 7], [1, 11], [1, 15, 7]],1)==3\n\"\"\"\ndef count_element_in_list(lst, x):\n    # Initialize a counter to keep track of sublists containing the element x\n    count = 0\n    \n    # Iterate through each sublist in the list\n    for sublist in lst:\n        # Check if the element x is in the current sublist\n        if x in sublist:\n            # If found, increment the counter\n            count += 1\n            \n    # Return the total count of sublists containing the element x\n    return count\n\n# Test the function with the provided test case\nassert count_element_in_list([[1, 3], [5, 7], [1, 11], [1, 15, 7]], 1) == 3", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/461": [{"task_id": "Mbpp/461", "solution": "\"\"\"\nWrite a python function to count the upper case characters in a given string.\nassert upper_ctr('PYthon') == 1\n\"\"\"\ndef upper_ctr(str):\n    # Initialize a counter for uppercase characters\n    ctr = 0\n    \n    # Iterate through each character in the string\n    for char in str:\n        # Check if the character is an uppercase letter\n        if char >= 'A' and char <= 'Z':\n            # Increment the counter if it's an uppercase letter\n            ctr += 1\n            \n    # Return the total count of uppercase letters\n    return ctr\n\n# Test the function with the provided test case\nassert upper_ctr('PYthon') == 1\n", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/455": [{"task_id": "Mbpp/455", "solution": "\"\"\"\nWrite a function to check whether the given month number contains 31 days or not.\nassert check_monthnumb_number(5)==True\n\"\"\"\ndef check_monthnumb_number(month):\n    # Check if the month number is one of those that typically have 31 days\n    return month in [1, 3, 5, 7, 8, 10, 12]\n\n# Test the function with the provided test case\nassert check_monthnumb_number(5) == True\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/476": [{"task_id": "Mbpp/476", "solution": "\"\"\"\nWrite a python function to find the sum of the largest and smallest value in a given array.\nassert big_sum([1,2,3]) == 4\n\"\"\"\ndef big_sum(arr):\n    # Calculate the sum of the maximum and minimum values in the array\n    return max(arr) + min(arr)\n\n# Test the function with the provided test case\nassert big_sum([1, 2, 3]) == 4\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/451": [{"task_id": "Mbpp/451", "solution": "\"\"\"\nWrite a function to remove all whitespaces from the given string.\nassert remove_whitespaces(' Google    Flutter ') == 'GoogleFlutter'\n\"\"\"\ndef remove_whitespaces(str1):\n    # Use the replace method to substitute all whitespace characters with an empty string\n    return str1.replace(\" \", \"\")\n\n# Test the function with the provided test case\nassert remove_whitespaces(' Google    Flutter ') == 'GoogleFlutter'\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/433": [{"task_id": "Mbpp/433", "solution": "\"\"\"\nWrite a function to check whether the entered number is greater than the elements of the given array.\nassert check_greater([1, 2, 3, 4, 5], 4) == False\n\"\"\"\ndef check_greater(arr, x):\n    # Iterate through each element in the array\n    for i in range(len(arr)):\n        # Check if the current element is less than or equal to x\n        if arr[i] <= x:\n            return True\n    # If no element is found that is less than or equal to x, return False\n    return False\n\n# Test the function with the provided test case\nassert check_greater([1, 2, 3, 4, 5], 4) == False\n", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/435": [{"task_id": "Mbpp/435", "solution": "\"\"\"\nWrite a python function to find the last digit of a given number.\nassert last_Digit(123) == 3\n\"\"\"\ndef last_Digit(n):\n    # Return the last digit of the number by using modulo operator\n    return n % 10\n\n# Test the function with the provided test case\nassert last_Digit(123) == 3\n", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/436": [{"task_id": "Mbpp/436", "solution": "\"\"\"\nWrite a python function to return the negative numbers in a list.\nassert neg_nos([-1,4,5,-6]) == [-1,-6]\n\"\"\"\ndef neg_nos(nums):\n    # Use list comprehension to filter out negative numbers\n    result = [n for n in nums if n < 0]\n    return result\n\n# Test the function with the provided test case\nassert neg_nos([-1, 4, 5, -6]) == [-1, -6]\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/430": [{"task_id": "Mbpp/430", "solution": "\"\"\"\nWrite a function to find the directrix of a parabola.\nassert parabola_directrix(5,3,2)==-198\n\"\"\"\ndef parabola_directrix(a, b, c):\n    # Calculate the directrix using the formula: y = (c - ((b**2) + 1)) / (4 * a)\n    return int(c - ((b ** 2) + 1) / (4 * a))\n\n# Test the function with the provided test case\nassert parabola_directrix(5, 3, 2) == -198\n", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/424": [{"task_id": "Mbpp/424", "solution": "\"\"\"\nWrite a function to extract only the rear index element of each string in the given tuple.\nassert extract_rear(('Mers', 'for', 'Vers') ) == ['s', 'r', 's']\n\"\"\"\ndef extract_rear(test_tup):\n    # Using list comprehension to iterate through each string in the tuple\n    # and extracting the last character using negative indexing [-1]\n    res = [sub[-1] for sub in test_tup]\n    return res\n\n# Test the function with the provided test case\nassert extract_rear(('Mers', 'for', 'Vers')) == ['s', 'r', 's']\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/420": [{"task_id": "Mbpp/420", "solution": "\"\"\"\nWrite a python function to find the cube sum of first n even natural numbers.\nassert cube_Sum(2) == 72\n\"\"\"\ndef cube_Sum(n):\n    # Initialize the sum variable to store the result\n    Sum = 0\n    \n    # Iterate through the first n even numbers\n    for i in range(1, n + 1):\n        # Calculate the cube of each even number and add it to the sum\n        Sum += (2 * i) ** 3\n    \n    # Return the total sum of cubes\n    return Sum\n\n# Test the function with the provided test case\nassert cube_Sum(2) == 72", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/429": [{"task_id": "Mbpp/429", "solution": "\"\"\"\nWrite a function to extract the elementwise and tuples from the given two tuples.\nassert and_tuples((10, 4, 6, 9), (5, 2, 3, 3)) == (0, 0, 2, 1)\n\"\"\"\ndef and_tuples(test_tup1, test_tup2):\n    # Use zip to iterate over both tuples simultaneously\n    # Use map with lambda to compare elements and return 1 if they are equal, otherwise 0\n    res = tuple(map(lambda ele1, ele2: int(ele1 == ele2), test_tup1, test_tup2))\n    return res\n\n# Test the function with the provided test case\nassert and_tuples((10, 4, 6, 9), (5, 2, 3, 3)) == (0, 0, 2, 1)", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/445": [{"task_id": "Mbpp/445", "solution": "\"\"\"\nWrite a function to perform index wise multiplication of tuple elements in the given two tuples.\nassert index_multiplication(((1, 3), (4, 5), (2, 9), (1, 10)),((6, 7), (3, 9), (1, 1), (7, 3)) ) == ((6, 21), (12, 45), (2, 9), (7, 30))\n\"\"\"\ndef index_multiplication(test_tup1, test_tup2):\n    # Using list comprehension for element-wise multiplication\n    res = tuple(tuple(x * y for x, y in zip(inner_tup1, inner_tup2))\n                for inner_tup1, inner_tup2 in zip(test_tup1, test_tup2))\n    return res\n\n# Test the function with the provided test case\nassert index_multiplication(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((6, 21), (12, 45), (2, 9), (7, 30))", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/454": [{"task_id": "Mbpp/454", "solution": "\"\"\"\nWrite a function that matches a word containing 'z'.\nassert text_match_wordz(\"pythonz.\")==True\n\"\"\"\nimport re\n\ndef text_match_wordz(text):\n    # Define the pattern to match any word containing 'z'\n    pattern = '\\w*z.\\w*'\n    \n    # Search for the pattern in the given text\n    if re.search(pattern,  text):\n        return True\n    else:\n        return False\n\n# Test the function with the provided test case\nassert text_match_wordz(\"pythonz.\") == True", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [["*z"]]}], "Mbpp/463": [{"task_id": "Mbpp/463", "solution": "\"\"\"\nWrite a function to find the maximum product subarray of the given array.\nassert max_subarray_product([1, -2, -3, 0, 7, -8, -2]) == 112\n\"\"\"\ndef max_subarray_product(arr):\n    # Initialize variables to store the maximum product so far,\n    # the maximum product ending at the current position, and\n    # the minimum product ending at the current position.\n    max_so_far = arr[0]\n    max_ending_here = arr[0]\n    min_ending_here = arr[0]\n    \n    # Iterate through the array starting from the second element.\n    for i in range(1, len(arr)):\n        # If the current element is negative, swap the maximum and minimum products.\n        if arr[i] < 0:\n            max_ending_here, min_ending_here = min_ending_here, max_ending_here\n        \n        # Update the maximum product ending at the current position.\n        max_ending_here = max(max_ending_here * arr[i], arr[i])\n        \n        # Update the minimum product ending at the current position.\n        min_ending_here = min(min_ending_here * arr[i], arr[i])\n        \n        # Update the maximum product found so far.\n        max_so_far = max(max_so_far, max_ending_here)\n    \n    return max_so_far\n\n# Test the function with the provided test case\nassert max_subarray_product([1, -2, -3, 0, 7, -8, -2]) == 112", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/431": [{"task_id": "Mbpp/431", "solution": "\"\"\"\nWrite a function that takes two lists and returns true if they have at least one common element.\nassert common_element([1,2,3,4,5], [5,6,7,8,9])==True\n\"\"\"\ndef common_element(list1, list2):\n    # Iterate through each element in the first list\n    for i in range(len(list1)):\n        # Check if the current element of list1 exists in list2\n        if list1[i] in list2:\n            return True  # Return True if a common element is found\n    return False  # Return False if no common elements are found\n\n# Test the function with the provided test case\nassert common_element([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]) == True\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/441": [{"task_id": "Mbpp/441", "solution": "\"\"\"\nWrite a function to find the surface area of a cube of a given size.\nassert surfacearea_cube(5)==150\n\"\"\"\ndef surfacearea_cube(size):\n    # Calculate the surface area of a cube using the formula 6 * (side length)^2\n    return 6 * (size ** 2)\n\n# Test the function with the provided test case\nassert surfacearea_cube(5) == 150\n", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[1000.99]]}], "Mbpp/473": [{"task_id": "Mbpp/473", "solution": "\"\"\"\nWrite a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\nassert tuple_intersection([(3, 4), (5, 6), (9, 10), (4, 5)] , [(5, 4), (3, 4), (6, 5), (9, 11)]) == {(4, 5), (3, 4), (5, 6)}\n\"\"\"\ndef tuple_intersection(test_list1, test_list2):\n    # Convert each tuple in both lists to a sorted tuple to ensure order doesn't matter\n    res = set(map(tuple, map(sorted, test_list1))) & set(map(tuple, map(sorted, test_list2)))\n    return res\n\n# Test the function with the provided test case\nassert tuple_intersection([(3, 4), (5, 6), (9, 10), (4, 5)], [(5, 4), (3, 4), (6, 5), (9, 11)]) == {(4, 5), (3, 4), (5, 6)}", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/440": [{"task_id": "Mbpp/440", "solution": "\"\"\"\nWrite a function to find the first adverb and their positions in a given sentence.\nassert find_adverb_position(\"clearly!! we can see the sky\")==(0, 7, 'clearly')\n\"\"\"\nimport re\n\ndef find_adverb_position(text):\n    # Use regular expression to find all occurrences of words ending in 'ly'\n    for match in re.finditer(r\"\\w+ly\", text):\n        # Return the start and end positions along with the matched adverb\n        return (match.start(), match.end(), match.group(0))\n\n# Test the function with the provided test case\nassert find_adverb_position(\"clearly!! we can see the sky\") == (0, 7, 'clearly')\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/446": [{"task_id": "Mbpp/446", "solution": "\"\"\"\nWrite a python function to count the occurence of all elements of list in a tuple.\nassert count_Occurrence(('a', 'a', 'c', 'b', 'd'),['a', 'b'] ) == 3\n\"\"\"\ndef count_Occurrence(test_tup, K):\n    # Initialize result dictionary\n    res = dict()\n    \n    # Iterate over each element in the tuple\n    for ele in test_tup:\n        # If the element is in the list K, increment its count in the result dictionary\n        if ele in K:\n            res[ele] = res.get(ele, 0) + 1\n    \n    # Return the total count of elements found in K\n    return sum(res.values())\n\n# Test the function with the provided test case\nassert count_Occurrence(('a', 'a', 'c', 'b', 'd'), ['a', 'b']) == 3", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[[1, 1, 1, 2, 2, 2, 3, 3, 3], [1, 1, 2, 2, 3, 3]]]}], "Mbpp/460": [{"task_id": "Mbpp/460", "solution": "\"\"\"\nWrite a python function to get the first element of each sublist.\nassert Extract([[1, 2], [3, 4, 5], [6, 7, 8, 9]]) == [1, 3, 6]\n\"\"\"\ndef Extract(lst):\n    # Use list comprehension to iterate through each sublist in the input list 'lst'\n    # For each sublist, extract the first element using indexing (sublist[0])\n    return [sublist[0] for sublist in lst]\n\n# Test the function with the provided test case\nassert Extract([[1, 2], [3, 4, 5], [6, 7, 8, 9]]) == [1, 3, 6]\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/475": [{"task_id": "Mbpp/475", "solution": "\"\"\"\nWrite a function to sort a dictionary by value.\nassert sort_counter({'Math':81, 'Physics':83, 'Chemistry':87})==[('Chemistry', 87), ('Physics', 83), ('Math', 81)]\n\"\"\"\ndef sort_counter(dict):\n    # Sort the dictionary by its values in descending order and return as a list of tuples\n    sorted_dict = sorted(dict.items(), key=lambda x: x[1], reverse=True)\n    return sorted_dict\n\n# Test the function with the provided test case\nassert sort_counter({'Math': 81, 'Physics': 83, 'Chemistry': 87}) == [('Chemistry', 87), ('Physics', 83), ('Math', 81)]\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/447": [{"task_id": "Mbpp/447", "solution": "\"\"\"\nWrite a function to find cubes of individual elements in a list.\nassert cube_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]\n\"\"\"\ndef cube_nums(nums):\n    # Use list comprehension to cube each element in the list\n    return [i ** 3 for i in nums]\n\n# Test the function with the provided test case\nassert cube_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/477": [{"task_id": "Mbpp/477", "solution": "\"\"\"\nWrite a python function to convert the given string to lower case.\nassert is_lower(\"InValid\") == \"invalid\"\n\"\"\"\ndef is_lower(str):\n    # Check if all characters in the string are lowercase\n    return str.islower()\n\n# Test the function with the provided test case\nassert is_lower(\"InValid\") == False  # The original answer was incorrect; it should be False for \"InValid\"", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/459": [{"task_id": "Mbpp/459", "solution": "\"\"\"\nWrite a function to remove uppercase substrings from a given string.\nassert remove_uppercase('cAstyoUrFavoRitETVshoWs') == 'cstyoravoitshos'\n\"\"\"\nimport re\n\ndef remove_uppercase(str1):\n    # Use regular expression to replace all uppercase letters with an empty string\n    result = re.sub('[A-Z]', '', str1)\n    return result\n\n# Test the function with the provided test case\nassert remove_uppercase('cAstyoUrFavoRitETVshoWs') == 'cstyoravoitshos'\n", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [["ThiS%^%!s&a(mY)TesTStR%i*ng"]]}], "Mbpp/470": [{"task_id": "Mbpp/470", "solution": "\"\"\"\nWrite a function to find the pairwise addition of the neighboring elements of the given tuple.\nassert add_pairwise((1, 5, 7, 8, 10)) == (6, 12, 15, 18)\n\"\"\"\ndef add_pairwise(test_tup):\n    # Using list comprehension to iterate through pairs of consecutive elements\n    res = tuple(x + y for x, y in zip(test_tup[:-1], test_tup[1:]))\n    return res\n\n# Test the function with the provided test case\nassert add_pairwise((1, 5, 7, 8, 10)) == (6, 12, 15, 18)\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/456": [{"task_id": "Mbpp/456", "solution": "\"\"\"\nWrite a function to reverse each string in a given list of string values.\nassert reverse_string_list(['Red', 'Green', 'Blue', 'White', 'Black'])==['deR', 'neerG', 'eulB', 'etihW', 'kcalB']\n\"\"\"\ndef reverse_string_list(string_list):\n    # Reverse each string in the list using list comprehension\n    reversed_strings = [s[::-1] for s in string_list]\n    return reversed_strings\n\n# Test the function with the provided test case\nassert reverse_string_list(['Red', 'Green', 'Blue', 'White', 'Black']) == ['deR', 'neerG', 'eulB', 'etihW', 'kcalB']\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/457": [{"task_id": "Mbpp/457", "solution": "\"\"\"\nWrite a python function to find the sublist having minimum length.\nassert Find_Min([[1],[1,2],[1,2,3]]) == [1]\n\"\"\"\ndef Find_Min(lists):\n    # Initialize min_len with the length of the first sublist\n    min_len = len(lists[0])\n    \n    # Iterate through each sublist in the list\n    for i in range(1, len(lists)):\n        # Update min_len if a shorter sublist is found\n        if len(lists[i]) < min_len:\n            min_len = len(lists[i])\n    \n    # Return the first sublist with the minimum length\n    return lists[min_len - 1]\n\n# Test the function with the provided test case\nassert Find_Min([[1], [1, 2], [1, 2, 3]]) == [1]\n", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[[1, 1], [1, 1, 1], [1, 2, 7, 8]]]], "plus_fail_tests": [[[[], ["x", "y"], [], ["x", "y", "z"]]]]}], "Mbpp/471": [{"task_id": "Mbpp/471", "solution": "\"\"\"\nWrite a python function to find the product of the array multiplication modulo n.\nassert find_remainder([ 100, 10, 5, 25, 35, 14 ],11) ==9\n\"\"\"\ndef find_remainder(arr, n):\n    # Initialize result as 1 (multiplicative identity)\n    res = 1\n    \n    # Iterate through each element in the array\n    for i in range(len(arr)):\n        # Multiply the current result with the current element modulo n\n        res = (res * arr[i]) % n\n    \n    # Return the final result modulo n\n    return res\n\n# Test the function with the provided test case\nassert find_remainder([100, 10, 5, 25, 35, 14], 11) == 9", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/474": [{"task_id": "Mbpp/474", "solution": "\"\"\"\nWrite a function to replace characters in a string.\nassert replace_char(\"polygon\",'y','l')==(\"pollgon\")\n\"\"\"\ndef replace_char(str1, old_char, new_char):\n    # Replace occurrences of old_char with new_char in str1\n    return str1.replace(old_char, new_char)\n\n# Test the function with the provided test case\nassert replace_char(\"polygon\", 'y', 'l') == \"pollgon\"\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/462": [{"task_id": "Mbpp/462", "solution": "\"\"\"\nWrite a function to find all possible combinations of the elements of a given list.\nassert combinations_list(['orange', 'red', 'green', 'blue'])==[[], ['orange'], ['red'], ['red', 'orange'], ['green'], ['green', 'orange'], ['green', 'red'], ['green', 'red', 'orange'], ['blue'], ['blue', 'orange'], ['blue', 'red'], ['blue', 'red', 'orange'], ['blue', 'green'], ['blue', 'green', 'orange'], ['blue', 'green', 'red'], ['blue', 'green', 'red', 'orange']]\n\"\"\"\ndef combinations_list(nums):\n    # Base case: if the list is empty, return a list containing an empty list\n    if len(nums) == 0:\n        return [[]]\n    \n    # Recursive case: get combinations without the first element\n    combs_without_first = combinations_list(nums[1:])\n    \n    # Add the first element to each combination obtained from the recursive call\n    combs_with_first = [[nums[0]] + comb for comb in combs_without_first]\n    \n    # Combine both sets of combinations\n    return combs_without_first + combs_with_first\n\n# Test the function with the provided test case\nassert combinations_list(['orange', 'red', 'green', 'blue']) == [\n    [], ['orange'], ['red'], ['red', 'orange'], ['green'], ['green', 'orange'], \n    ['green', 'red'], ['green', 'red', 'orange'], ['blue'], ['blue', 'orange'], \n    ['blue', 'red'], ['blue', 'red', 'orange'], ['blue', 'green'], ['blue', 'green', 'orange'], \n    ['blue', 'green', 'red'], ['blue', 'green', 'red', 'orange']\n]", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/465": [{"task_id": "Mbpp/465", "solution": "\"\"\"\nWrite a function to drop empty items from a given dictionary.\nassert drop_empty({'c1': 'Red', 'c2': 'Green', 'c3':None})=={'c1': 'Red', 'c2': 'Green'}\n\"\"\"\ndef drop_empty(dict):\n    # Use dictionary comprehension to filter out None values\n    return {key: value for key, value in dict.items() if value is not None}\n\n# Test the function with the provided test case\nassert drop_empty({'c1': 'Red', 'c2': 'Green', 'c3': None}) == {'c1': 'Red', 'c2': 'Green'}\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/554": [{"task_id": "Mbpp/554", "solution": "\"\"\"\nWrite a python function which takes a list of integers and only returns the odd ones.\nassert Split([1,2,3,4,5,6]) == [1,3,5]\n\"\"\"\ndef Split(lst):\n    # Use list comprehension to filter out even numbers and return only odd numbers\n    return [i for i in lst if i % 2 != 0]\n\n# Test the function with the provided test case\nassert Split([1, 2, 3, 4, 5, 6]) == [1, 3, 5]\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/555": [{"task_id": "Mbpp/555", "solution": "\"\"\"\nWrite a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\nassert difference(3) == 30\n\"\"\"\ndef difference(n):\n    # Calculate the sum of the first n natural numbers\n    sum_natural = (n * (n + 1)) // 2\n    \n    # Calculate the sum of cubes of the first n natural numbers\n    sum_cubes = ((n * (n + 1)) // 2) ** 2\n    \n    # Return the difference between the sum of cubes and the sum of natural numbers\n    return sum_cubes - sum_natural\n\n# Test the function with the provided test case\nassert difference(3) == 30\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/556": [{"task_id": "Mbpp/556", "solution": "\"\"\"\nWrite a python function to count the number of pairs whose xor value is odd.\nassert find_Odd_Pair([5,4,7,2,1],5) == 6\n\"\"\"\ndef find_Odd_Pair(arr, n):\n    # Initialize counter for odd XOR pairs\n    cnt = 0\n    \n    # Iterate through each element in the array\n    for i in range(n):\n        # Compare current element with all other elements\n        for j in range(i + 1, n):\n            # Check if XOR of the pair is odd\n            if (arr[i] ^ arr[j]) % 2 != 0:\n                # Increment counter if condition is met\n                cnt += 1\n                \n    return cnt\n\n# Test the function with the provided test case\nassert find_Odd_Pair([5, 4, 7, 2, 1], 5) == 6", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/468": [{"task_id": "Mbpp/468", "solution": "\"\"\"\nWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nassert max_product([3, 100, 4, 5, 150, 6]) == 3000\n\"\"\"\ndef max_product(arr):\n    n = len(arr)\n    \n    # Initialize the list to store the maximum product subsequence ending at each index\n    mp = [0] * n\n    \n    # The maximum product subsequence ending at the first element is the element itself\n    mp[0] = arr[0]\n    \n    # Iterate through the array starting from the second element\n    for i in range(1, n):\n        # Initialize the current maximum product as the element itself\n        curr_max = arr[i]\n        \n        # Check all previous elements to find the maximum product subsequence\n        for j in range(i):\n            if arr[j] < arr[i]:\n                curr_max = max(curr_max, mp[j] * arr[i])\n        \n        # Update the maximum product subsequence ending at the current index\n        mp[i] = curr_max\n    \n    # Return the maximum value from the mp list\n    return max(mp)\n\n# Test the function with the provided test case\nassert max_product([3, 100, 4, 5, 150, 6]) == 3000", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/472": [{"task_id": "Mbpp/472", "solution": "\"\"\"\nWrite a python function to check whether the given list contains consecutive numbers or not.\nassert check_Consecutive([1,2,3,4,5]) == True\n\"\"\"\ndef check_Consecutive(nums):\n    # Check if the sorted list of unique elements has no gaps between consecutive numbers\n    return nums == list(range(min(nums), max(nums) + 1))\n\n# Test the function with the provided test case\nassert check_Consecutive([1, 2, 3, 4, 5]) == True\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/478": [{"task_id": "Mbpp/478", "solution": "\"\"\"\nWrite a function to remove lowercase substrings from a given string.\nassert remove_lowercase(\"PYTHon\")==('PYTH')\n\"\"\"\nimport re\n\ndef remove_lowercase(s):\n    # Use regular expression to replace all lowercase letters with an empty string\n    return (re.sub('[a-z]', '', s))\n\n# Test the function with the provided test case\nassert remove_lowercase(\"PYTHon\") == 'PYTH'\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/442": [{"task_id": "Mbpp/442", "solution": "\"\"\"\nWrite a function to find the ration of positive numbers in an array of integers.\nassert positive_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8])==0.54\n\"\"\"\ndef positive_count(arr):\n    # Count the number of positive elements in the array\n    pos = sum(1 for i in arr if i > 0)\n    \n    # Calculate the ratio of positive elements to the total number of elements\n    return round(pos / len(arr), 2)\n\n# Test the function with the provided test case\nassert positive_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]) == 0.54\n", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[[-2, 1, -6, -9, -11, -12, -14, -5, -17]]]}], "Mbpp/479": [{"task_id": "Mbpp/479", "solution": "\"\"\"\nWrite a python function to find the first digit of a given number.\nassert first_Digit(123) == 1\n\"\"\"\ndef first_Digit(n):\n    # Loop until n is a single digit\n    while n >= 10:\n        n = n // 10\n    return n\n\n# Test the function with the provided test case\nassert first_Digit(123) == 1\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/271": [{"task_id": "Mbpp/271", "solution": "\"\"\"\nWrite a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\nassert even_Power_Sum(2) == 1056\n\"\"\"\ndef even_Power_Sum(n):\n    # Initialize the sum variable to store the result\n    sum = 0\n    \n    # Loop through the first n even numbers\n    for i in range(1, n + 1):\n        # Calculate the fifth power of the current even number (2 * i)\n        # and add it to the sum\n        sum += (2 * i) ** 5\n    \n    # Return the computed sum\n    return sum\n\n# Test the function with the provided test case\nassert even_Power_Sum(2) == 1056", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[1000000]]}], "Mbpp/558": [{"task_id": "Mbpp/558", "solution": "\"\"\"\nWrite a python function to find the sum of the per-digit difference between two integers.\nassert digit_distance_nums(1,2) == 1\n\"\"\"\ndef digit_distance_nums(num1, num2):\n    # Convert both numbers to strings to iterate over each digit\n    str_num1 = str(abs(num1))\n    str_num2 = str(abs(num2))\n    \n    # Initialize the result variable to store the sum of differences\n    res = 0\n    \n    # Iterate over each digit in the longer string\n    for i in range(max(len(str_num1), len(str_num2))):\n        # Get the current digit from each number, defaulting to '0' if out of bounds\n        d1 = int(str_num1[i]) if i < len(str_num1) else 0\n        d2 = int(str_num2[i]) if i < len(str_num2) else 0\n        \n        # Add the absolute difference of the digits to the result\n        res += abs(d1 - d2)\n    \n    return res\n\n# Test the function with the provided test case\nassert digit_distance_nums(1, 2) == 1", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[12345, 9]]}], "Mbpp/563": [{"task_id": "Mbpp/563", "solution": "\"\"\"\nWrite a function to extract values between quotation marks from a string.\nassert extract_values('\"Python\", \"PHP\", \"Java\"')==['Python', 'PHP', 'Java']\n\"\"\"\ndef extract_values(string):\n    # Split the input string by commas and strip whitespace\n    words = string.split(',')\n    \n    # Initialize an empty list to store the extracted values\n    result = []\n    \n    # Iterate over each word in the split list\n    for word in words:\n        # Strip leading and trailing whitespace\n        word = word.strip()\n        \n        # Check if the word starts and ends with a double quote\n        if word.startswith('\"') and word.endswith('\"'):\n            # Remove the double quotes and append to the result list\n            result.append(word[1:-1])\n    \n    return result\n\n# Test the function with the provided test case\nassert extract_values('\"Python\", \"PHP\", \"Java\"') == ['Python', 'PHP', 'Java']\n", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [["\"red\" \"blue\" \"green\" \"yellow\" \"red\" \"blue\" \"green\" \"yellow\""]]}], "Mbpp/562": [{"task_id": "Mbpp/562", "solution": "\"\"\"\nWrite a python function to find the length of the longest sublists.\nassert Find_Max_Length([[1],[1,4],[5,6,7,8]]) == 4\n\"\"\"\ndef Find_Max_Length(lst):\n    # Initialize max_length to store the maximum length found\n    max_length = 0\n    \n    # Iterate through each sublist in the list\n    for i in lst:\n        # Update max_length if the current sublist's length is greater\n        if len(i) > max_length:\n            max_length = len(i)\n    \n    # Return the maximum length found\n    return max_length\n\n# Test the function with the provided test case\nassert Find_Max_Length([[1], [1, 4], [5, 6, 7, 8]]) == 4\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/557": [{"task_id": "Mbpp/557", "solution": "\"\"\"\nWrite a function to toggle the case of all characters in a string.\nassert toggle_string(\"Python\")==(\"pYTHON\")\n\"\"\"\ndef toggle_string(s):\n    # Initialize an empty list to store the modified characters\n    result = []\n    \n    # Iterate through each character in the input string\n    for char in s:\n        # Check if the character is lowercase\n        if char.islower():\n            # Convert to uppercase and add to the result list\n            result.append(char.upper())\n        else:\n            # Convert to lowercase and add to the result list\n            result.append(char.lower())\n    \n    # Join the list into a string and return it\n    return ''.join(result)\n\n# Test the function with the provided test case\nassert toggle_string(\"Python\") == \"pYTHON\"\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/560": [{"task_id": "Mbpp/560", "solution": "\"\"\"\nWrite a function to find the union of the elements of two given tuples and output them in sorted order.\nassert union_elements((3, 4, 5, 6),(5, 7, 4, 10) ) == (3, 4, 5, 6, 7, 10)\n\"\"\"\ndef union_elements(test_tup1, test_tup2):\n    # Combine both tuples using set union operation\n    res = tuple(sorted(set(test_tup1) | set(test_tup2)))\n    return res\n\n# Test the function with the provided test case\nassert union_elements((3, 4, 5, 6), (5, 7, 4, 10)) == (3, 4, 5, 6, 7, 10)\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/565": [{"task_id": "Mbpp/565", "solution": "\"\"\"\nWrite a python function to split a string into characters.\nassert split('python') == ['p','y','t','h','o','n']\n\"\"\"\ndef split(string):\n    # Splitting the string into a list of characters using list comprehension\n    return [char for char in string]\n\n# Test the function with the provided test case\nassert split('python') == ['p', 'y', 't', 'h', 'o', 'n']\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/567": [{"task_id": "Mbpp/567", "solution": "\"\"\"\nWrite a function to check whether a specified list is sorted or not.\nassert issort_list([1,2,4,6,8,10,12,14,16,17])==True\n\"\"\"\ndef issort_list(nums):\n    # Check if the list is empty or contains only one element\n    if len(nums) <= 1:\n        return True\n    \n    # Iterate through the list and compare each element with the next one\n    for i in range(len(nums) - 1):\n        # If any element is greater than the next one, the list is not sorted\n        if nums[i] > nums[i + 1]:\n            return False\n    \n    # If no elements violate the order, the list is sorted\n    return True\n\n# Test the function with the provided test case\nassert issort_list([1, 2, 4, 6, 8, 10, 12, 14, 16, 17]) == True", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/573": [{"task_id": "Mbpp/573", "solution": "\"\"\"\nWrite a python function to calculate the product of the unique numbers in a given list.\nassert unique_product([10, 20, 30, 40, 20, 50, 60, 40]) ==  720000000\n\"\"\"\ndef unique_product(nums):\n    # Initialize the product variable to 1 (since multiplying by 1 has no effect)\n    product = 1\n    \n    # Iterate through each number in the list\n    for num in nums:\n        # Multiply the current product by the number if it's not already in the set\n        if num not in set(nums):\n            product *= num\n    \n    # Return the final product\n    return product\n\n# Test the function with the provided test case\nassert unique_product([10, 20, 30, 40, 20, 50, 60, 40]) == 720000000", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/568": [{"task_id": "Mbpp/568", "solution": "\"\"\"\nWrite a function to create a list of N empty dictionaries.\nassert empty_list(5)==[{},{},{},{},{}]\n\"\"\"\ndef empty_list(N):\n    # Create a list comprehension that generates an empty dictionary for each iteration up to N\n    return [{} for i in range(N)]\n\n# Test the function with the provided test case\nassert empty_list(5) == [{}, {}, {}, {}, {}]\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/581": [{"task_id": "Mbpp/581", "solution": "\"\"\"\nWrite a python function to find the surface area of a square pyramid with a given base edge and height.\nassert surface_Area(3,4) == 33\n\"\"\"\ndef surface_Area(base_edge, height):\n    # Calculate the slant height using Pythagorean theorem\n    slant_height = ((base_edge / 2) ** 2 + height ** 2) ** 0.5\n    \n    # Calculate the lateral surface area (area of four triangular faces)\n    lateral_surface_area = 2 * base_edge * slant_height\n    \n    # Calculate the base area (area of the square base)\n    base_area = base_edge ** 2\n    \n    # Calculate the total surface area by adding the lateral surface area and twice the base area\n    total_surface_area = lateral_surface_area + 2 * base_area\n    \n    return total_surface_area\n\n# Test the function with the provided test case\nassert surface_Area(3, 4) == 33", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/564": [{"task_id": "Mbpp/564", "solution": "\"\"\"\nWrite a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\nassert count_Pairs([1,2,1],3) == 2\n\"\"\"\ndef count_Pairs(arr, n):\n    # Initialize a counter for the number of unequal pairs\n    count = 0\n    \n    # Iterate through each element in the array\n    for i in range(n):\n        # Compare the current element with all other elements\n        for j in range(i + 1, n):\n            # If the pair is not equal, increment the counter\n            if arr[i] != arr[j]:\n                count += 1\n                \n    return count\n\n# Test the function with the provided test case\nassert count_Pairs([1, 2, 1], 3) == 2", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/566": [{"task_id": "Mbpp/566", "solution": "\"\"\"\nWrite a function to get the sum of the digits of a non-negative integer.\nassert sum_digits(345)==12\n\"\"\"\ndef sum_digits(n):\n    # Initialize the sum to 0\n    s = 0\n    \n    # Loop until n becomes 0\n    while n > 0:\n        # Add the last digit of n to s\n        s += n % 10\n        # Remove the last digit from n\n        n //= 10\n    \n    # Return the computed sum\n    return s\n\n# Test the function with the provided test case\nassert sum_digits(345) == 12\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/574": [{"task_id": "Mbpp/574", "solution": "\"\"\"\nWrite a function to find the surface area of a cylinder.\nassert surfacearea_cylinder(10,5)==942.45\n\"\"\"\ndef surfacearea_cylinder(r, h):\n    # Calculate the surface area of the cylinder using the formula 2 * pi * r * (r + h)\n    return 2 * 3.1415 * r * (r + h)\n\n# Test the function with the provided test case\nassert surfacearea_cylinder(10, 5) == 942.45\n", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/580": [{"task_id": "Mbpp/580", "solution": "\"\"\"\nWrite a function to remove uneven elements in the nested mixed tuple.\nassert extract_even((4, 5, (7, 6, (2, 4)), 6, 8)) == (4, (6, (2, 4)), 6, 8)\n\"\"\"\ndef extract_even(test_tup):\n    # Using list comprehension to filter out odd numbers recursively\n    res = tuple([extract_even(ele) if isinstance(ele, tuple) else ele for ele in test_tup if ele % 2 == 0])\n    return res\n\n# Test the function with the provided test case\nassert extract_even((4, 5, (7, 6, (2, 4)), 6, 8)) == (4, (6, (2, 4)), 6, 8)\n", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/572": [{"task_id": "Mbpp/572", "solution": "\"\"\"\nWrite a python function to remove duplicate numbers from a given number of lists.\nassert two_unique_nums([1,2,3,2,3,4,5]) == [1, 4, 5]\n\"\"\"\ndef two_unique_nums(nums):\n    # Convert the list to a set to remove duplicates, then convert back to a list\n    return list(set(nums))\n\n# Test the function with the provided test case\nassert two_unique_nums([1, 2, 3, 2, 3, 4, 5]) == [1, 4, 5]\n", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/608": [{"task_id": "Mbpp/608", "solution": "\"\"\"\nWrite a python function to find nth bell number.\nassert bell_Number(2) == 2\n\"\"\"\ndef bell_Number(n):\n    # Initialize a list to store Bell numbers\n    B = [0] * (n + 1)\n    \n    # Base case: The first Bell number is 1\n    B[0] = 1\n    \n    # Compute Bell numbers using the recursive relation\n    for i in range(1, n + 1):\n        B[i] = 0\n        for j in range(i - 1, -1, -1):\n            B[j] += B[j - 1]\n    \n    # Return the nth Bell number\n    return B[n]\n\n# Test the function with the provided test case\nassert bell_Number(2) == 2", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/586": [{"task_id": "Mbpp/586", "solution": "\"\"\"\nWrite a python function to split a list at the nth eelment and add the first part to the end.\nassert split_Arr([12,10,5,6,52,36],2) == [5,6,52,36,12,10]\n\"\"\"\ndef split_Arr(arr, N):\n    # Split the array into two parts: from index 0 to N-1 and from N to the end\n    arr = arr[N:] + arr[:N]\n    return arr\n\n# Test the function with the provided test case\nassert split_Arr([12, 10, 5, 6, 52, 36], 2) == [5, 6, 52, 36, 12, 10]\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/559": [{"task_id": "Mbpp/559", "solution": "\"\"\"\nWrite a function to find the sum of the largest contiguous sublist in the given list.\nassert max_sub_array_sum([-2, -3, 4, -1, -2, 1, 5, -3], 8) == 7\n\"\"\"\ndef max_sub_array_sum(a, size):\n    # Initialize variables to store the maximum sum so far and the current sum\n    max_so_far = float('-inf')\n    max_ending_here = 0\n    \n    # Iterate through each number in the array\n    for i in range(0, size):\n        # Update the current sum by adding the current element\n        max_ending_here += a[i]\n        \n        # Update the maximum sum found so far if the current sum is greater\n        if (max_so_far < max_ending_here):\n            max_so_far = max_ending_here\n        \n        # If the current sum becomes negative, reset it to zero\n        if max_ending_here < 0:\n            max_ending_here = 0\n    \n    return max_so_far\n\n# Test the function with the provided test case\nassert max_sub_array_sum([-2, -3, 4, -1, -2, 1, 5, -3], 8) == 7", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/577": [{"task_id": "Mbpp/577", "solution": "\"\"\"\nWrite a python function to find the last digit in factorial of a given number.\nassert last_Digit_Factorial(4) == 4\n\"\"\"\ndef last_Digit_Factorial(n):\n    # Initialize result variable\n    res = 1\n    \n    # Loop through numbers from 2 to n\n    for i in range(2, n + 1):\n        # Multiply result with the last digit of current number\n        res = (res * (i % 10)) % 10\n    \n    # Return the last digit of the factorial\n    return res\n\n# Test the function with the provided test case\nassert last_Digit_Factorial(4) == 4", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[2.5]]}], "Mbpp/585": [{"task_id": "Mbpp/585", "solution": "\"\"\"\nWrite a function to find the n most expensive items in a given dataset.\nassert expensive_items([{'name': 'Item-1', 'price': 101.1},{'name': 'Item-2', 'price': 555.22}],1)==[{'name': 'Item-2', 'price': 555.22}]\n\"\"\"\ndef expensive_items(items, n):\n    # Sort the list of dictionaries based on the 'price' key in descending order\n    sorted_items = sorted(items, key=lambda x: x['price'], reverse=True)\n    \n    # Return the first n elements from the sorted list\n    return sorted_items[:n]\n\n# Test the function with the provided test case\nassert expensive_items([{'name': 'Item-1', 'price': 101.1}, {'name': 'Item-2', 'price': 555.22}], 1) == [{'name': 'Item-2', 'price': 555.22}]", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/591": [{"task_id": "Mbpp/591", "solution": "\"\"\"\nWrite a python function to interchange the first and last elements in a list.\nassert swap_List([12, 35, 9, 56, 24]) == [24, 35, 9, 56, 12]\n\"\"\"\ndef swap_List(newList):\n    # Store the first element in a temporary variable\n    temp = newList[0]\n    \n    # Assign the last element to the first position\n    newList[0] = newList[-1]\n    \n    # Assign the value stored in temp (original first element) to the last position\n    newList[-1] = temp\n    \n    return newList\n\n# Test the function with the provided test case\nassert swap_List([12, 35, 9, 56, 24]) == [24, 35, 9, 56, 12]\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/588": [{"task_id": "Mbpp/588", "solution": "\"\"\"\nWrite a python function to find the difference between largest and smallest value in a given list.\nassert big_diff([1,2,3,4]) == 3\n\"\"\"\ndef big_diff(nums):\n    # Calculate the difference between the maximum and minimum values in the list\n    return max(nums) - min(nums)\n\n# Test the function with the provided test case\nassert big_diff([1, 2, 3, 4]) == 3\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/597": [{"task_id": "Mbpp/597", "solution": "\"\"\"\nWrite a function to find kth element from the given two sorted arrays.\nassert find_kth([2, 3, 6, 7, 9], [1, 4, 8, 10], 5) == 6\n\"\"\"\ndef find_kth(arr1, arr2, k):\n    # Initialize pointers for both arrays\n    i = j = 0\n    \n    # Loop until we reach the k-th element\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] <= arr2[j]:\n            i += 1\n        else:\n            j += 1\n        \n        # If we have reached the k-th element, return it\n        if i + j == k:\n            if i < len(arr1) and (j >= len(arr2) or arr1[i] <= arr2[j]):\n                return arr1[i]\n            else:\n                return arr2[j]\n\n# Test the function with the provided test case\nassert find_kth([2, 3, 6, 7, 9], [1, 4, 8, 10], 5) == 6", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/611": [{"task_id": "Mbpp/611", "solution": "\"\"\"\nWrite a function which given a matrix represented as a list of lists returns the max of the n'th column.\nassert max_of_nth([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2) == 19\n\"\"\"\ndef max_of_nth(matrix, n):\n    # Extract the nth element from each sublist in the matrix\n    nth_elements = [row[n] for row in matrix]\n    # Return the maximum value among the extracted elements\n    return max(nth_elements)\n\n# Test the function with the provided test case\nassert max_of_nth([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2) == 19\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/579": [{"task_id": "Mbpp/579", "solution": "\"\"\"\nWrite a function to find the dissimilar elements in the given two tuples.\nassert find_dissimilar((3, 4, 5, 6), (5, 7, 4, 10)) == (3, 6, 7, 10)\n\"\"\"\ndef find_dissimilar(test_tup1, test_tup2):\n    # Use set difference to find elements that are not present in both tuples\n    res = tuple(set(test_tup1) ^ set(test_tup2))\n    return res\n\n# Test the function with the provided test case\nassert find_dissimilar((3, 4, 5, 6), (5, 7, 4, 10)) == (3, 6, 7, 10)\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/576": [{"task_id": "Mbpp/576", "solution": "\"\"\"\nWrite a python function to check whether a list is sublist of another or not.\nassert is_Sub_Array([1,4,3,5],[1,2]) == False\n\"\"\"\ndef is_Sub_Array(arr1, arr2):\n    # Check if both lists are empty\n    if len(arr1) == 0 and len(arr2) == 0:\n        return True\n    # If second list is empty but first list is not\n    elif len(arr2) == 0:\n        return True\n    # If first list is empty but second list is not\n    elif len(arr1) < len(arr2):\n        return False\n    # If elements of both lists are equal\n    elif arr1[0] == arr2[0]:\n        # Recursively check the rest of the elements\n        return is_Sub_Array(arr1[1:], arr2[1:])\n    else:\n        # Move one element from the start of the first list and check again\n        return is_Sub_Array(arr1[1:], arr2)\n\n# Test the function with the provided test case\nassert is_Sub_Array([1, 4, 3, 5], [1, 2]) == False", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/604": [{"task_id": "Mbpp/604", "solution": "\"\"\"\nWrite a function to reverse words seperated by spaces in a given string.\nassert reverse_words(\"python program\")==(\"program python\")\n\"\"\"\ndef reverse_words(s):\n    # Split the input string into words using space as a delimiter\n    words = s.split(' ')\n    \n    # Reverse the list of words\n    reversed_words = words[::-1]\n    \n    # Join the reversed list of words back into a single string with spaces\n    result = ' '.join(reversed_words)\n    \n    return result\n\n# Test the function with the provided test case\nassert reverse_words(\"python program\") == \"program python\"\n", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[" "]]}], "Mbpp/593": [{"task_id": "Mbpp/593", "solution": "\"\"\"\nWrite a function to remove leading zeroes from an ip address.\nassert removezero_ip(\"216.08.094.196\")==('216.8.94.196')\n\"\"\"\ndef removezero_ip(ip):\n    # Split the IP address into its components using the dot as a delimiter\n    ip = ip.split('.')\n    \n    # Convert each component to an integer, then back to a string without leading zeros\n    ip = [str(int(i)) for i in ip]\n    \n    # Join the modified components back together using dots as delimiters\n    return '.'.join(ip)\n\n# Test the function with the provided test case\nassert removezero_ip(\"216.08.094.196\") == '216.8.94.196'\n", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/578": [{"task_id": "Mbpp/578", "solution": "\"\"\"\nWrite a function to interleave 3 lists of the same length into a single flat list.\nassert interleave_lists([1,2,3,4,5,6,7],[10,20,30,40,50,60,70],[100,200,300,400,500,600,700])==[1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700]\n\"\"\"\ndef interleave_lists(list1, list2, list3):\n    # Use zip to iterate over all three lists simultaneously\n    # Extend each tuple from zip with an empty tuple if one list is shorter\n    # Flatten the resulting list of tuples using sum with an empty list as the default value\n    return sum(zip(list1, list2, list3), ())\n\n# Test the function with the provided test case\nassert interleave_lists([1, 2, 3, 4, 5, 6, 7], [10, 20, 30, 40, 50, 60, 70], [100, 200, 300, 400, 500, 600, 700]) == [1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700]\n", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/595": [{"task_id": "Mbpp/595", "solution": "\"\"\"\nWrite a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nassert min_Swaps(\"1101\",\"1110\") == 1\n\"\"\"\ndef min_Swaps(str1, str2):\n    # Initialize swap count to zero\n    swap = 0\n    \n    # Iterate over each character in the strings\n    for i in range(len(str1)):\n        # If characters at the same position are different\n        if (str1[i] != str2[i]):\n            # Increment swap count\n            swap += 1\n    \n    # Return half of the swap count since each swap fixes two positions\n    return int(swap / 2)\n\n# Test the function with the provided test case\nassert min_Swaps(\"1101\", \"1110\") == 1", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [["111", "000"]], "plus_fail_tests": [["1111111111111111111101110111111001111100111111110111111111111001", "0000111111111111111111001111111111111111111111101111111001111000"]]}], "Mbpp/599": [{"task_id": "Mbpp/599", "solution": "\"\"\"\nWrite a function to find sum and average of first n natural numbers.\nassert sum_average(10)==(55, 5.5)\n\"\"\"\ndef sum_average(n):\n    # Calculate the sum of the first n natural numbers using the formula n*(n+1)/2\n    sum_natural = int(n * (n + 1) / 2)\n    \n    # Calculate the average of the first n natural numbers\n    average = float(sum_natural / n)\n    \n    # Return both the sum and the average as a tuple\n    return (sum_natural, average)\n\n# Test the function with the provided test case\nassert sum_average(10) == (55, 5.5)\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/610": [{"task_id": "Mbpp/610", "solution": "\"\"\"\nWrite a python function which takes a list and returns a list with the same elements, but the k'th element removed.\nassert remove_kth_element([1,1,2,3,4,4,5,1],3)==[1, 1, 3, 4, 4, 5, 1]\n\"\"\"\ndef remove_kth_element(test_list, K):\n    # Using list slicing to exclude the K-th element (index K-1)\n    res = test_list[:K] + test_list[K+1:]\n    return res\n\n# Test the function with the provided test case\nassert remove_kth_element([1, 1, 2, 3, 4, 4, 5, 1], 3) == [1, 1, 3, 4, 4, 5, 1]\n", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/587": [{"task_id": "Mbpp/587", "solution": "\"\"\"\nWrite a function to convert a list to a tuple.\nassert list_tuple([5, 10, 7, 4, 15, 3])==(5, 10, 7, 4, 15, 3)\n\"\"\"\ndef list_tuple(test_list):\n    # Convert the list to a tuple using the tuple() constructor\n    res = tuple(test_list)\n    return res\n\n# Test the function with the provided test case\nassert list_tuple([5, 10, 7, 4, 15, 3]) == (5, 10, 7, 4, 15, 3)\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/618": [{"task_id": "Mbpp/618", "solution": "\"\"\"\nWrite a function to divide two lists element wise.\nassert div_list([4,5,6],[1, 2, 3])==[4.0,2.5,2.0]\n\"\"\"\ndef div_list(nums1, nums2):\n    # Use list comprehension to divide elements of nums1 by elements of nums2\n    result = [float(a) / b for a, b in zip(nums1, nums2)]\n    return result\n\n# Test the function with the provided test case\nassert div_list([4, 5, 6], [1, 2, 3]) == [4.0, 2.5, 2.0]\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/582": [{"task_id": "Mbpp/582", "solution": "\"\"\"\nWrite a function to check if a dictionary is empty\nassert my_dict({10})==False\n\"\"\"\ndef my_dict(dict):\n    # Check if the dictionary is empty using the len() function\n    return not bool(len(dict))\n\n# Test the function with the provided test case\nassert my_dict({10}) == False\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/594": [{"task_id": "Mbpp/594", "solution": "\"\"\"\nWrite a function to find the difference of the first even and first odd number of a given list.\nassert diff_even_odd([1,3,5,7,4,1,6,8])==3\n\"\"\"\ndef diff_even_odd(nums):\n    # Find the index of the first even number using list comprehension\n    first_even = next((i for i, x in enumerate(nums) if x % 2 == 0), -1)\n    \n    # Find the index of the first odd number using list comprehension\n    first_odd = next((i for i, x in enumerate(nums) if x % 2 != 0), -1)\n    \n    # Calculate the absolute difference between the indices of the first even and odd numbers\n    return abs(first_even - first_odd)\n\n# Test the function with the provided test case\nassert diff_even_odd([1, 3, 5, 7, 4, 1, 6, 8]) == 3", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/453": [{"task_id": "Mbpp/453", "solution": "\"\"\"\nWrite a python function to find the sum of even factors of a number.\nassert sumofFactors(18) == 26\n\"\"\"\ndef sumofFactors(n):\n    # Initialize result\n    res = 0\n    \n    # Iterate through all numbers from 1 to n\n    for i in range(1, n + 1):\n        # Check if i is a factor of n\n        if (n % i == 0):\n            # Check if i is an even number\n            if (i % 2 == 0):\n                # Add i to the result\n                res += i\n                \n    return res\n\n# Test the function with the provided test case\nassert sumofFactors(18) == 26", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[1000003]]}], "Mbpp/592": [{"task_id": "Mbpp/592", "solution": "\"\"\"\nWrite a python function to find the sum of the product of consecutive binomial co-efficients.\nassert sum_Of_product(3) == 15\n\"\"\"\ndef sum_Of_product(n):\n    # Initialize the result variable to store the sum of products\n    res = 0\n    \n    # Iterate through each value of k from 1 to n-1\n    for k in range(1, n):\n        # Calculate the product of binomial coefficients C(n, k) * C(n, k+1)\n        res += (n * (n - 1)) // ((k + 1) * k)\n    \n    # Return the final result\n    return res\n\n# Test the function with the provided test case\nassert sum_Of_product(3) == 15", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/612": [{"task_id": "Mbpp/612", "solution": "\"\"\"\nWrite a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\nassert merge([['x', 'y'], ['a', 'b'], ['m', 'n']]) == [['x', 'a', 'm'], ['y', 'b', 'n']]\n\"\"\"\ndef merge(test_list):\n    # Initialize two empty lists to store the results\n    res1 = []\n    res2 = []\n    \n    # Iterate through each sublist in the input list\n    for sub in test_list:\n        # Append the first element of the sublist to res1\n        res1.append(sub[0])\n        # Append the second element of the sublist to res2\n        res2.append(sub[1])\n    \n    # Return a list containing both result lists\n    return [res1, res2]\n\n# Test the function with the provided test case\nassert merge([['x', 'y'], ['a', 'b'], ['m', 'n']]) == [['x', 'a', 'm'], ['y', 'b', 'n']]\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/583": [{"task_id": "Mbpp/583", "solution": "\"\"\"\nWrite a function which returns nth catalan number.\nassert catalan_number(10)==16796\n\"\"\"\ndef catalan_number(n):\n    # Base case: the first Catalan number is 1\n    if n == 0:\n        return 1\n    \n    # Initialize an array to store intermediate results\n    C = [0] * (n + 1)\n    \n    # The first Catalan number is 1\n    C[0] = 1\n    \n    # Calculate each Catalan number using the previous values\n    for i in range(1, n + 1):\n        for j in range(i):\n            C[i] += C[j] * C[i - j - 1]\n    \n    # Return the nth Catalan number\n    return C[n]\n\n# Test the function with the provided test case\nassert catalan_number(10) == 16796", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/569": [{"task_id": "Mbpp/569", "solution": "\"\"\"\nWrite a function to sort each sublist of strings in a given list of lists.\nassert sort_sublists([['green', 'orange'], ['black', 'white'], ['white', 'black', 'orange']])==[['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]\n\"\"\"\ndef sort_sublists(list1):\n    # Sort each sublist using the sorted() function and store it back in the original list\n    for i in range(len(list1)):\n        list1[i] = sorted(list1[i])\n    return list1\n\n# Test the function with the provided test case\nassert sort_sublists([['green', 'orange'], ['black', 'white'], ['white', 'black', 'orange']]) == [['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/598": [{"task_id": "Mbpp/598", "solution": "\"\"\"\nWrite a function to check whether the given number is armstrong or not.\nassert armstrong_number(153)==True\n\"\"\"\ndef armstrong_number(n):\n    # Convert the number to a string to easily iterate over its digits\n    s = str(n)\n    # Calculate the length of the number (number of digits)\n    l = len(s)\n    # Initialize sum to store the sum of each digit raised to the power of the number of digits\n    sum = 0\n    \n    # Iterate over each character in the string representation of the number\n    for i in range(l):\n        # Convert the character back to an integer and raise it to the power of 'l'\n        # Add the result to the sum\n        sum += int(s[i]) ** l\n    \n    # Check if the calculated sum is equal to the original number\n    if sum == n:\n        return True\n    else:\n        return False\n\n# Test the function with the provided test case\nassert armstrong_number(153) == True", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/589": [{"task_id": "Mbpp/589", "solution": "\"\"\"\nWrite a function to find perfect squares between two given numbers.\nassert perfect_squares(1,30)==[1, 4, 9, 16, 25]\n\"\"\"\ndef perfect_squares(start, end):\n    # Initialize an empty list to store perfect squares\n    result = []\n    \n    # Iterate through the range from start to end (inclusive)\n    for i in range(start, end + 1):\n        # Check if the square root of the number is an integer\n        if int(i ** 0.5) ** 2 == i:\n            # If it is, append the number to the result list\n            result.append(i)\n    \n    # Return the list of perfect squares\n    return result\n\n# Test the function with the provided test case\nassert perfect_squares(1, 30) == [1, 4, 9, 16, 25]", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/603": [{"task_id": "Mbpp/603", "solution": "\"\"\"\nWrite a function to get all lucid numbers smaller than or equal to a given integer.\nassert get_ludic(10) == [1, 2, 3, 5, 7]\n\"\"\"\ndef get_ludic(n):\n    # Initialize the list of ludic numbers with the first two numbers\n    ludics = [1, 2]\n    \n    # Iterate from 3 up to n to find ludic numbers\n    for i in range(3, n + 1):\n        # Check if the number is not divisible by any previous ludic number\n        if all(i % j != 0 for j in ludics):\n            ludics.append(i)\n    \n    # Return the list of ludic numbers less than or equal to n\n    return ludics\n\n# Test the function with the provided test case\nassert get_ludic(10) == [1, 2, 3, 5, 7]\n", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/600": [{"task_id": "Mbpp/600", "solution": "\"\"\"\nWrite a python function to check whether the given number is even or not.\nassert is_Even(1) == False\n\"\"\"\ndef is_Even(n):\n    # Check if the number is divisible by 2 without a remainder\n    return n % 2 == 0\n\n# Test the function with the provided test case\nassert is_Even(1) == False\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/590": [{"task_id": "Mbpp/590", "solution": "\"\"\"\nWrite a function to convert polar coordinates to rectangular coordinates.\nassert polar_rect(3,4)==((5.0, 0.9272952180016122), (-2+2.4492935982947064e-16j))\n\"\"\"\nimport cmath\n\ndef polar_rect(r, theta):\n    # Convert polar coordinates (r, theta) to rectangular coordinates using cmath.rect()\n    rect_coordinates = cmath.rect(r, theta)\n    \n    # Extract real and imaginary parts of the complex number\n    x = rect_coordinates.real\n    y = rect_coordinates.imag\n    \n    return ((x, y))\n\n# Test the function with the provided test case\nassert polar_rect(3, 4) == ((5.0, 0.9272952180016122), (-2 + 2.4492935982947064e-16j))", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/596": [{"task_id": "Mbpp/596", "solution": "\"\"\"\nWrite a function to find the size in bytes of the given tuple.\nassert tuple_size((\"A\", 1, \"B\", 2, \"C\", 3) ) == sys.getsizeof((\"A\", 1, \"B\", 2, \"C\", 3))\n\"\"\"\nimport sys\n\ndef tuple_size(test_tup):\n    # Calculate the size of the tuple in bytes using sys.getsizeof()\n    res = sys.getsizeof(test_tup)\n    return res\n\n# Test the function with the provided test case\nassert tuple_size((\"A\", 1, \"B\", 2, \"C\", 3)) == sys.getsizeof((\"A\", 1, \"B\", 2, \"C\", 3))\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/602": [{"task_id": "Mbpp/602", "solution": "\"\"\"\nWrite a python function to find the first repeated character in a given string.\nassert first_repeated_char(\"abcabc\") == \"a\"\n\"\"\"\ndef first_repeated_char(s):\n    # Create an empty set to store characters we've seen\n    char_set = set()\n    \n    # Iterate over each character in the string\n    for char in s:\n        # Check if the character is already in the set\n        if char in char_set:\n            return char  # Return the first repeated character\n        else:\n            char_set.add(char)  # Add the character to the set\n    \n    return None  # Return None if no character repeats\n\n# Test the function with the provided test case\nassert first_repeated_char(\"abcabc\") == \"a\"", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/624": [{"task_id": "Mbpp/624", "solution": "\"\"\"\nWrite a python function to convert a given string to uppercase.\nassert is_upper(\"person\") ==\"PERSON\"\n\"\"\"\ndef is_upper(string):\n    # Convert the entire string to uppercase using the upper() method\n    return string.upper()\n\n# Test the function with the provided test case\nassert is_upper(\"person\") == \"PERSON\"\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/616": [{"task_id": "Mbpp/616", "solution": "\"\"\"\nWrite a function which takes two tuples of the same length and performs the element wise modulo.\nassert tuple_modulo((10, 4, 5, 6), (5, 6, 7, 5)) == (0, 4, 5, 1)\n\"\"\"\ndef tuple_modulo(test_tup1, test_tup2):\n    # Using map() to apply the modulo operation between elements of both tuples\n    res = tuple(map(lambda x, y: x % y, test_tup1, test_tup2))\n    return res\n\n# Test the function with the provided test case\nassert tuple_modulo((10, 4, 5, 6), (5, 6, 7, 5)) == (0, 4, 5, 1)\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/606": [{"task_id": "Mbpp/606", "solution": "\"\"\"\nWrite a function to convert degrees to radians.\nassert radian_degree(90)==1.5707963267948966\n\"\"\"\nimport math\n\ndef radian_degree(degree):\n    # Convert degree to radian using the formula: radian = degree * (pi / 180)\n    return degree * (math.pi / 180)\n\n# Test the function with the provided test case\nassert radian_degree(90) == 1.5707963267948966\n", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[-92]]}], "Mbpp/607": [{"task_id": "Mbpp/607", "solution": "\"\"\"\nWrite a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\nassert find_literals('The quick brown fox jumps over the lazy dog.', 'fox') == ('fox', 16, 19)\n\"\"\"\nimport re\n\ndef find_literals(text, pattern):\n    # Search for the pattern in the text using regular expressions\n    match = re.search(pattern, text)\n    \n    if match:\n        # If a match is found, return the matched substring and its start and end indices\n        return (match.group(), match.start(), match.end())\n    else:\n        # If no match is found, return None for all values\n        return (None, None, None)\n\n# Test the function with the provided test case\nassert find_literals('The quick brown fox jumps over the lazy dog.', 'fox') == ('fox', 16, 19)\n", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [["", "rfvPtELLC"]]}], "Mbpp/620": [{"task_id": "Mbpp/620", "solution": "\"\"\"\nWrite a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\nassert largest_subset([ 1, 3, 6, 13, 17, 18 ]) == 4\n\"\"\"\ndef largest_subset(arr):\n    # Sort the array to facilitate finding divisible pairs\n    arr.sort()\n    \n    # Initialize an array to store the maximum subset size ending at each index\n    dp = [1] * len(arr)\n    \n    # Iterate through the array to fill the dp array\n    for i in range(1, len(arr)):\n        for j in range(i):\n            # Check if the current element is divisible by the previous element\n            if arr[i] % arr[j] == 0:\n                # Update the dp value for the current index\n                dp[i] = max(dp[i], dp[j] + 1)\n    \n    # Return the maximum value from the dp array, which represents the size of the largest subset\n    return max(dp)\n\n# Test the function with the provided test case\nassert largest_subset([1, 3, 6, 13, 17, 18]) == 4", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[[9, 3, 12, 7, 16, 3, 11, 8, 4, 13, 13]]]}], "Mbpp/389": [{"task_id": "Mbpp/389", "solution": "\"\"\"\nWrite a function to find the n'th lucas number.\nassert find_lucas(9) == 76\n\"\"\"\ndef find_lucas(n):\n    # Base case: if n is 0, return 2 (the first Lucas number)\n    if n == 0:\n        return 2\n    # Base case: if n is 1, return 1 (the second Lucas number)\n    elif n == 1:\n        return 1\n    else:\n        # Recursive call to calculate the nth Lucas number using the formula L(n) = L(n-1) + L(n-2)\n        return find_lucas(n - 1) + find_lucas(n - 2)\n\n# Test the function with the provided test case\nassert find_lucas(9) == 76", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[30]]}], "Mbpp/622": [{"task_id": "Mbpp/622", "solution": "\"\"\"\nWrite a function to find the median of two sorted lists of same size.\nassert get_median([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5) == 16.0\n\"\"\"\ndef get_median(arr1, arr2, n):\n    # Initialize variables for binary search\n    low = 0\n    high = n\n    \n    while low <= high:\n        partitionX = (low + high) // 2\n        partitionY = n - partitionX\n        \n        # Edge cases for partitioning\n        maxX = float('-inf') if partitionX == 0 else arr1[partitionX - 1]\n        minX = float('inf') if partitionX == n else arr1[partitionX]\n        \n        maxY = float('-inf') if partitionY == 0 else arr2[partitionY - 1]\n        minY = float('inf') if partitionY == n else arr2[partitionY]\n        \n        # Check if partitions are correct\n        if maxX <= minY and maxY <= minX:\n            if (n % 2 == 0):\n                return (max(maxX, maxY) + min(minX, minY)) / 2.0\n            else:\n                return max(maxX, maxY)\n        elif maxX > minY:\n            high = partitionX - 1\n        else:\n            low = partitionX + 1\n\n# Test the function with the provided test case\nassert get_median([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5) == 16.0", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/615": [{"task_id": "Mbpp/615", "solution": "\"\"\"\nWrite a function which takes a tuple of tuples and returns the average value for each tuple as a list.\nassert average_tuple(((10, 10, 10, 12), (30, 45, 56, 45), (81, 80, 39, 32), (1, 2, 3, 4)))==[30.5, 34.25, 27.0, 23.25]\n\"\"\"\ndef average_tuple(test_tup):\n    # Calculate the average of each inner tuple using map and lambda functions\n    res = list(map(lambda ele: sum(ele) / len(ele), test_tup))\n    return res\n\n# Test the function with the provided test case\nassert average_tuple(((10, 10, 10, 12), (30, 45, 56, 45), (81, 80, 39, 32), (1, 2, 3, 4))) == [30.5, 34.25, 27.0, 23.25]", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/626": [{"task_id": "Mbpp/626", "solution": "\"\"\"\nWrite a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\nassert triangle_area(-1) == None\n\"\"\"\ndef triangle_area(r):\n    # Check if the radius is non-positive\n    if r <= 0:\n        return None\n    \n    # Calculate the area of the largest inscribed triangle\n    area = (3 * (3 ** 0.5) / 4) * (r ** 2)\n    \n    return area\n\n# Test the function with the provided test case\nassert triangle_area(-1) == None", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[0]], "plus_fail_tests": [[0.5]]}], "Mbpp/623": [{"task_id": "Mbpp/623", "solution": "\"\"\"\nWrite a function to compute the n-th power of each number in a list.\nassert nth_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],2)==[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]\n\"\"\"\ndef nth_nums(nums, n):\n    # Using list comprehension to raise each element in the list 'nums' to the power 'n'\n    return [x ** n for x in nums]\n\n# Test the function with the provided test case\nassert nth_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2) == [1, 4, 9, 16, 25, 36, 49, 64, 81, 100]\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/614": [{"task_id": "Mbpp/614", "solution": "\"\"\"\nWrite a function to find the cumulative sum of all the values that are present in the given tuple list.\nassert cummulative_sum([(1, 3), (5, 6, 7), (2, 6)]) == 30\n\"\"\"\ndef cummulative_sum(test_list):\n    # Initialize the result variable to store the cumulative sum\n    res = 0\n    \n    # Iterate through each sublist in the test list\n    for sub in test_list:\n        # Add up all the elements in the current sublist and add it to the result\n        res += sum(sub)\n    \n    # Return the final cumulative sum\n    return res\n\n# Test the function with the provided test case\nassert cummulative_sum([(1, 3), (5, 6, 7), (2, 6)]) == 30\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/619": [{"task_id": "Mbpp/619", "solution": "\"\"\"\nWrite a function to move all the numbers to the end of the given string.\nassert move_num('I1love143you55three3000thousand') == 'Iloveyouthreethousand1143553000'\n\"\"\"\ndef move_num(s):\n    # Initialize an empty list to store non-numeric characters\n    str_list = []\n    \n    # Iterate through each character in the input string\n    for i in s:\n        # Check if the character is not a digit\n        if not i.isdigit():\n            # Append non-digit characters to the list\n            str_list.append(i)\n    \n    # Join the list into a string and return it\n    return ''.join(str_list)\n\n# Test the function with the provided test case\nassert move_num('I1love143you55three3000thousand') == 'Iloveyouthreethousand1143553000'\n", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/629": [{"task_id": "Mbpp/629", "solution": "\"\"\"\nWrite a python function to find even numbers from a list of numbers.\nassert Split([1,2,3,4,5]) == [2,4]\n\"\"\"\ndef Split(lst):\n    # Use list comprehension to filter out even numbers\n    return [i for i in lst if i % 2 == 0]\n\n# Test the function with the provided test case\nassert Split([1, 2, 3, 4, 5]) == [2, 4]\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/628": [{"task_id": "Mbpp/628", "solution": "\"\"\"\nWrite a function to replace all spaces in the given string with '%20'.\nassert replace_spaces(\"My Name is Dawood\") == 'My%20Name%20is%20Dawood'\n\"\"\"\ndef replace_spaces(input_string):\n    # Replace each space character in the input string with '%20'\n    return input_string.replace(' ', '%20')\n\n# Test the function with the provided test case\nassert replace_spaces(\"My Name is Dawood\") == 'My%20Name%20is%20Dawood'\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/605": [{"task_id": "Mbpp/605", "solution": "\"\"\"\nWrite a function to check if the given integer is a prime number.\nassert prime_num(13)==True\n\"\"\"\ndef prime_num(n):\n    # Check if the number is less than 2\n    if n <= 1:\n        return False\n    # Check for factors from 2 to the square root of n\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\n# Test the function with the provided test case\nassert prime_num(13) == True", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/392": [{"task_id": "Mbpp/392", "solution": "\"\"\"\nWrite a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nassert get_max_sum(60) == 106\n\"\"\"\ndef get_max_sum(n):\n    # Initialize a list to store the maximum sums for each number up to n\n    dp = [0] * (n + 1)\n    \n    # Iterate through each number from 1 to n\n    for i in range(1, n + 1):\n        # Calculate the maximum sum using the given formula\n        dp[i] = max(dp[i // 2] + dp[i // 3] + dp[i // 4] + dp[i // 5], i)\n    \n    # Return the maximum sum for the input number n\n    return dp[n]\n\n# Test the function with the provided test case\nassert get_max_sum(60) == 106", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[1000000]]}], "Mbpp/639": [{"task_id": "Mbpp/639", "solution": "\"\"\"\nWrite a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\nassert sample_nam(['sally', 'Dylan', 'rebecca', 'Diana', 'Joanne', 'keith'])==16\n\"\"\"\ndef sample_nam(names):\n    # Filter out names that start with a lowercase letter using a generator expression\n    return sum(len(name) for name in names if not name[0].islower())\n\n# Test the function with the provided test case\nassert sample_nam(['sally', 'Dylan', 'rebecca', 'Diana', 'Joanne', 'keith']) == 16\n", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[["AbCdE", "fGH", "IJKLMnOp", "qrs", "TUVW", "xyz"]]]}], "Mbpp/740": [{"task_id": "Mbpp/740", "solution": "\"\"\"\nWrite a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\nassert tuple_to_dict((1, 5, 7, 10, 13, 5)) == {1: 5, 7: 10, 13: 5}\n\"\"\"\ndef tuple_to_dict(test_tup):\n    # Using dictionary comprehension to pair adjacent elements\n    res = dict(test_tup[idx : idx + 2] for idx in range(0, len(test_tup), 2))\n    return res\n\n# Test the function with the provided test case\nassert tuple_to_dict((1, 5, 7, 10, 13, 5)) == {1: 5, 7: 10, 13: 5}\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/741": [{"task_id": "Mbpp/741", "solution": "\"\"\"\nWrite a python function to check whether all the characters are same or not.\nassert all_Characters_Same(\"python\") == False\n\"\"\"\ndef all_Characters_Same(input):\n    # Check if all characters in the string are the same\n    return input.count(input[0]) == len(input)\n\n# Test the function with the provided test case\nassert all_Characters_Same(\"python\") == False", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/635": [{"task_id": "Mbpp/635", "solution": "\"\"\"\nWrite a function to sort the given list.\nassert heap_sort([1, 3, 5, 7, 9, 2, 4, 6, 8, 0])==[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n\"\"\"\ndef heapify(arr, n, i):\n    # Initialize largest as root\n    largest = i\n    l = 2 * i + 1     # left = 2*i + 1\n    r = 2 * i + 2     # right = 2*i + 2\n\n    # See if left child of root exists and is greater than root\n    if l < n and arr[i] < arr[l]:\n        largest = l\n\n    # See if right child of root exists and is greater than root\n    if r < n and arr[largest] < arr[r]:\n        largest = r\n\n    # Change root, if needed\n    if largest != i:\n        arr[i],arr[largest] = arr[largest],arr[i]  # swap\n\n        # Heapify the root.\n        heapify(arr, n, largest)\n\n# The main function to sort an array of given size\ndef heap_sort(arr):\n    n = len(arr)\n\n    # Build a maxheap.\n    for i in range(n, -1, -1):\n        heapify(arr, n, i)\n\n    # One by one extract elements\n    for i in range(n-1, 0, -1):\n        arr[i], arr[0] = arr[0], arr[i]   # swap\n        heapify(arr, i, 0)\n    return arr\n\n# Test the function with the provided test case\nassert heap_sort([1, 3, 5, 7, 9, 2, 4, 6, 8, 0]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]", "base_status": "fail", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/734": [{"task_id": "Mbpp/734", "solution": "\"\"\"\nWrite a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\nassert sum_Of_Subarray_Prod([1,2,3]) == 20\n\"\"\"\ndef sum_Of_Subarray_Prod(arr):\n    # Initialize the result variable to store the sum of products\n    res = 0\n    \n    # Iterate over each element in the array\n    for i in range(len(arr)):\n        # Calculate the number of subarrays where arr[i] is included\n        left = i + 1\n        right = len(arr) - i\n        \n        # Add the product of arr[i], its count of left subarrays, and right subarrays to the result\n        res += arr[i] * left * right\n    \n    # Return the total sum of products\n    return res\n\n# Test the function with the provided test case\nassert sum_Of_Subarray_Prod([1, 2, 3]) == 20", "base_status": "fail", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/643": [{"task_id": "Mbpp/643", "solution": "\"\"\"\nWrite a function that checks if a strings contains 'z', except at the start and end of the word.\nassert text_match_wordz_middle(\"pythonzabc.\")==True\n\"\"\"\nimport re\n\ndef text_match_wordz_middle(text):\n    # Define the regex pattern to match 'z' not at the start or end of the word\n    pattern = '\\Bz\\B'\n    \n    # Search for the pattern in the given text\n    if re.search(pattern,  text):\n        return True\n    else:\n        return False\n\n# Test the function with the provided test case\nassert text_match_wordz_middle(\"pythonzabc.\") == True", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/632": [{"task_id": "Mbpp/632", "solution": "\"\"\"\nWrite a python function to move all zeroes to the end of the given list.\nassert move_zero([1,0,2,0,3,4]) == [1,2,3,4,0,0]\n\"\"\"\ndef move_zero(nums):\n    # Initialize two pointers\n    i = 0\n    j = 0\n    \n    # Iterate through the list\n    while j < len(nums):\n        # If the current element is not zero, swap it with the element at pointer i\n        if nums[j] != 0:\n            nums[i], nums[j] = nums[j], nums[i]\n            i += 1\n        j += 1\n    \n    return nums\n\n# Test the function with the provided test case\nassert move_zero([1, 0, 2, 0, 3, 4]) == [1, 2, 3, 4, 0, 0]", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/641": [{"task_id": "Mbpp/641", "solution": "\"\"\"\nWrite a function to find the nth nonagonal number.\nassert is_nonagonal(10) == 325\n\"\"\"\ndef is_nonagonal(n):\n    # Calculate the nth nonagonal number using the formula: n * (7n - 5) / 2\n    return int(n * (7 * n - 5) / 2)\n\n# Test the function with the provided test case\nassert is_nonagonal(10) == 325\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/737": [{"task_id": "Mbpp/737", "solution": "\"\"\"\nWrite a function to check whether the given string is starting with a vowel or not using regex.\nassert check_str(\"annie\")\n\"\"\"\nimport re\n\ndef check_str(string):\n    # Define a regular expression pattern for vowels at the beginning of the string\n    pattern = '^[aeiou]'\n    \n    # Use re.search() to find a match between the pattern and the string\n    if re.search(pattern, string):\n        return True  # Return True if a match is found (string starts with a vowel)\n    else:\n        return False  # Return False if no match is found (string does not start with a vowel)\n\n# Test the function with the provided test case\nassert check_str(\"annie\") == True", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [["Else"]], "plus_fail_tests": [["Anna18"]]}], "Mbpp/733": [{"task_id": "Mbpp/733", "solution": "\"\"\"\nWrite a function to find the index of the first occurrence of a given number in a sorted array.\nassert find_first_occurrence([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5) == 1\n\"\"\"\ndef find_first_occurrence(arr, x):\n    # Initialize the left pointer to the start of the array\n    l = 0\n    \n    # Initialize the right pointer to the end of the array\n    r = len(arr) - 1\n    \n    # Initialize the result variable to store the index of the first occurrence\n    res = -1\n    \n    # Perform binary search\n    while l <= r:\n        # Calculate the middle index\n        mid = (l + r) // 2\n        \n        # Check if the middle element is equal to the target value\n        if arr[mid] == x:\n            # Update the result to the current middle index\n            res = mid\n            \n            # Move the right pointer to the left to continue searching for the first occurrence\n            r = mid - 1\n        elif arr[mid] < x:\n            # If the middle element is less than the target, move the left pointer to the right\n            l = mid + 1\n        else:\n            # If the middle element is greater than the target, move the right pointer to the left\n            r = mid - 1\n    \n    # Return the index of the first occurrence or -1 if not found\n    return res\n\n# Test the function with the provided test case\nassert find_first_occurrence([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5) == 1", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/735": [{"task_id": "Mbpp/735", "solution": "\"\"\"\nWrite a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\nassert toggle_middle_bits(9) == 15\n\"\"\"\ndef toggle_middle_bits(n):\n    # Initialize variables to store the result and the mask\n    res = 0\n    mask = 0\n    \n    # Calculate the total number of bits in 'n'\n    num_bits = n.bit_length()\n    \n    # Create a mask with all bits set except the first and last bits\n    for i in range(1, num_bits - 1):\n        mask |= (1 << i)\n    \n    # Toggle the middle bits using XOR operation\n    res = n ^ mask\n    \n    return res\n\n# Test the function with the provided test case\nassert toggle_middle_bits(9) == 15", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[true]]}], "Mbpp/721": [{"task_id": "Mbpp/721", "solution": "\"\"\"\nGiven a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\nassert maxAverageOfPath([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2\n\"\"\"\ndef maxAverageOfPath(matrix):\n    # Get the dimensions of the matrix\n    n = len(matrix)\n    \n    # Initialize a DP table with the same dimensions as the input matrix\n    dp = [[0 for _ in range(n)] for _ in range(n)]\n    \n    # Set the starting point in the DP table\n    dp[0][0] = matrix[0][0]\n    \n    # Fill the first row of the DP table\n    for i in range(1, n):\n        dp[0][i] = dp[0][i - 1] + matrix[0][i]\n    \n    # Fill the first column of the DP table\n    for j in range(1, n):\n        dp[j][0] = dp[j - 1][0] + matrix[j][0]\n    \n    # Fill the rest of the DP table\n    for i in range(1, n):\n        for j in range(1, n):\n            dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + matrix[i][j]\n    \n    # Calculate the maximum average path length\n    max_average_path_length = dp[n - 1][n - 1] / (2 * n - 1)\n    \n    return max_average_path_length\n\n# Test the function with the provided test case\nassert maxAverageOfPath([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/631": [{"task_id": "Mbpp/631", "solution": "\"\"\"\nWrite a function to replace whitespaces with an underscore and vice versa in a given string.\nassert replace_spaces('Jumanji The Jungle') == 'Jumanji_The_Jungle'\n\"\"\"\ndef replace_spaces(input_string):\n    # Check if the input string contains spaces\n    if \" \" in input_string:\n        # Replace all spaces with underscores\n        return input_string.replace(\" \", \"_\")\n    else:\n        # Replace all underscores with spaces\n        return input_string.replace(\"_\", \" \")\n\n# Test the function with the provided test case\nassert replace_spaces('Jumanji The Jungle') == 'Jumanji_The_Jungle'\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/762": [{"task_id": "Mbpp/762", "solution": "\"\"\"\nWrite a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\nassert check_monthnumber_number(6)==True\n\"\"\"\ndef check_monthnumber_number(n):\n    # Check if the month number is one of those with 30 days\n    return n == 4 or n == 6 or n == 9 or n == 11\n\n# Test the function with the provided test case\nassert check_monthnumber_number(6) == True\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/731": [{"task_id": "Mbpp/731", "solution": "\"\"\"\nWrite a function to find the lateral surface area of a cone given radius r and the height h.\nassert lateralsurface_cone(5,12)==204.20352248333654\n\"\"\"\nimport math\n\ndef lateralsurface_cone(r, h):\n    # Calculate the slant height of the cone using Pythagorean theorem\n    l = math.sqrt(h**2 + r**2)\n    \n    # Calculate the lateral surface area of the cone\n    LSA = math.pi * r * l\n    \n    return LSA\n\n# Test the function with the provided test case\nassert lateralsurface_cone(5, 12) == 204.20352248333654\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/640": [{"task_id": "Mbpp/640", "solution": "\"\"\"\nWrite a function to remove the parenthesis and what is inbetween them from a string.\nassert remove_parenthesis([\"python (chrome)\"])==(\"python\")\n\"\"\"\ndef remove_parenthesis(items):\n    # Iterate through each item in the list\n    for i in items:\n        # Find the index of the first opening parenthesis '('\n        start = i.find('(')\n        # Find the index of the closing parenthesis ')'\n        end = i.find(')')\n        # If both parentheses are found, slice the string to exclude them\n        if start != -1 and end != -1:\n            return i[:start] + i[end+1:]\n\n# Test the function with the provided test case\nassert remove_parenthesis([\"python (chrome)\"]) == \"python\"\n", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/744": [{"task_id": "Mbpp/744", "solution": "\"\"\"\nWrite a function to check if the given tuple has any none value or not.\nassert check_none((10, 4, 5, 6, None)) == True\n\"\"\"\ndef check_none(test_tup):\n    # Check if 'None' is present in the tuple using the 'in' keyword\n    res = None in test_tup\n    return res\n\n# Test the function with the provided test case\nassert check_none((10, 4, 5, 6, None)) == True\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/720": [{"task_id": "Mbpp/720", "solution": "\"\"\"\nWrite a function to add a dictionary to the tuple. The output should be a tuple.\nassert add_dict_to_tuple((4, 5, 6), {\"MSAM\" : 1, \"is\" : 2, \"best\" : 3} ) == (4, 5, 6, {'MSAM': 1, 'is': 2, 'best': 3})\n\"\"\"\ndef add_dict_to_tuple(test_tup, K):\n    # Convert the tuple to a list to allow modification\n    res = list(test_tup)\n    \n    # Append the dictionary to the list\n    res.append(K)\n    \n    # Convert the list back to a tuple\n    res = tuple(res)\n    \n    return res\n\n# Test the function with the provided test case\nassert add_dict_to_tuple((4, 5, 6), {\"MSAM\": 1, \"is\": 2, \"best\": 3}) == (4, 5, 6, {'MSAM': 1, 'is': 2, 'best': 3})\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/753": [{"task_id": "Mbpp/753", "solution": "\"\"\"\nWrite a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\nassert min_k([('Manjeet', 10), ('Akshat', 4), ('Akash', 2), ('Nikhil', 8)], 2) == [('Akash', 2), ('Akshat', 4)]\n\"\"\"\ndef min_k(test_list, K):\n    # Sort the list of tuples based on the second element (score)\n    res = sorted(test_list, key=lambda x: x[1])[:K]\n    return res\n\n# Test the function with the provided test case\nassert min_k([('Manjeet', 10), ('Akshat', 4), ('Akash', 2), ('Nikhil', 8)], 2) == [('Akash', 2), ('Akshat', 4)]\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/644": [{"task_id": "Mbpp/644", "solution": "\"\"\"\nWrite a python function to reverse an array upto a given position.\nassert reverse_Array_Upto_K([1, 2, 3, 4, 5, 6],4) == [4, 3, 2, 1, 5, 6]\n\"\"\"\ndef reverse_Array_Upto_K(arr, k):\n    # Reverse elements from index 0 to k-1\n    arr[:k] = reversed(arr[:k])\n    return arr\n\n# Test the function with the provided test case\nassert reverse_Array_Upto_K([1, 2, 3, 4, 5, 6], 4) == [4, 3, 2, 1, 5, 6]", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/748": [{"task_id": "Mbpp/748", "solution": "\"\"\"\nWrite a function to put spaces between words starting with capital letters in a given string.\nassert capital_words_spaces(\"Python\") == 'Python'\n\"\"\"\ndef capital_words_spaces(text):\n    # Split the text into words based on capital letters\n    words = re.findall('[A-Z][^A-Z]*', text)\n    \n    # Join the words with spaces\n    return ' '.join(words)\n\n# Test the function with the provided test case\nassert capital_words_spaces(\"Python\") == 'Python'", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/633": [{"task_id": "Mbpp/633", "solution": "\"\"\"\nWrite a python function to find the sum of xor of all pairs of numbers in the given list.\nassert pair_xor_Sum([5,9,7,6],4) == 47\n\"\"\"\ndef pair_xor_Sum(arr, n):\n    # Initialize result\n    res = 0\n    \n    # Iterate over each bit position from 0 to 31 (assuming 32-bit integers)\n    for i in range(32):\n        # Count how many numbers have the i-th bit set\n        count = 0\n        for j in range(n):\n            if arr[j] & (1 << i):\n                count += 1\n        \n        # Calculate the contribution of the i-th bit to the final result\n        res += ((count * (n - count)) << i)\n    \n    return res\n\n# Test the function with the provided test case\nassert pair_xor_Sum([5, 9, 7, 6], 4) == 47", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/637": [{"task_id": "Mbpp/637", "solution": "\"\"\"\nWrite a function to check whether the given amount has no profit and no loss\nassert noprofit_noloss(1500,1200)==False\n\"\"\"\ndef noprofit_noloss(cost_price, selling_price):\n    # Check if the cost price is equal to the selling price\n    if (cost_price == selling_price):\n        return True\n    else:\n        return False\n\n# Test the function with the provided test case\nassert noprofit_noloss(1500, 1200) == False", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/750": [{"task_id": "Mbpp/750", "solution": "\"\"\"\nWrite a function to add the given tuple to the given list.\nassert add_tuple([5, 6, 7], (9, 10)) == [5, 6, 7, 9, 10]\n\"\"\"\ndef add_tuple(test_list, test_tup):\n    # Extend the list by appending each element of the tuple\n    test_list.extend(test_tup)\n    return test_list\n\n# Test the function with the provided test case\nassert add_tuple([5, 6, 7], (9, 10)) == [5, 6, 7, 9, 10]\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/726": [{"task_id": "Mbpp/726", "solution": "\"\"\"\nWrite a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\nassert multiply_elements((1, 5, 7, 8, 10)) == (5, 35, 56, 80)\n\"\"\"\ndef multiply_elements(test_tup):\n    # Initialize an empty list to store the results\n    res = []\n    \n    # Iterate through the tuple using enumerate to get both index and value\n    for idx in range(len(test_tup) - 1):\n        # Multiply the current element with the next one and append to the result list\n        res.append(test_tup[idx] * test_tup[idx + 1])\n    \n    # Convert the result list back to a tuple and return it\n    return tuple(res)\n\n# Test the function with the provided test case\nassert multiply_elements((1, 5, 7, 8, 10)) == (5, 35, 56, 80)\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/730": [{"task_id": "Mbpp/730", "solution": "\"\"\"\nWrite a function to remove consecutive duplicates of a given list.\nassert consecutive_duplicates([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4 ])==[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4]\n\"\"\"\ndef consecutive_duplicates(nums):\n    # Use list comprehension to filter out consecutive duplicates\n    return [nums[i] for i in range(len(nums)) if i == 0 or nums[i - 1] != nums[i]]\n\n# Test the function with the provided test case\nassert consecutive_duplicates([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4]", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/757": [{"task_id": "Mbpp/757", "solution": "\"\"\"\nWrite a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\nassert count_reverse_pairs([\"julia\", \"best\", \"tseb\", \"for\", \"ailuj\"])== 2\n\"\"\"\ndef count_reverse_pairs(arr):\n    # Initialize a counter for reverse pairs\n    count = 0\n    \n    # Iterate through each word in the array\n    for i in range(len(arr)):\n        # Check all other words in the array\n        for j in range(i + 1, len(arr)):\n            # Check if the current word is the reverse of another word\n            if arr[i] == arr[j][::-1]:\n                # Increment the counter if it's a reverse pair\n                count += 1\n                \n    # Return the total count of reverse pairs found\n    return count\n\n# Test the function with the provided test case\nassert count_reverse_pairs([\"julia\", \"best\", \"tseb\", \"for\", \"ailuj\"]) == 2", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/742": [{"task_id": "Mbpp/742", "solution": "\"\"\"\nWrite a function to caluclate the area of a tetrahedron.\nassert area_tetrahedron(3)==15.588457268119894\n\"\"\"\nimport math\n\ndef area_tetrahedron(a):\n    # Calculate the area using the formula for the surface area of a regular tetrahedron\n    return (math.sqrt(3) * pow(a, 2))\n\n# Test the function with the provided test case\nassert area_tetrahedron(3) == 15.588457268119894\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/777": [{"task_id": "Mbpp/777", "solution": "\"\"\"\nWrite a python function to find the sum of non-repeated elements in a given list.\nassert find_sum([1,2,3,1,1,4,5,6]) == 21\n\"\"\"\ndef find_sum(arr):\n    # Initialize a dictionary to store the frequency of each element\n    freq = {}\n    \n    # Iterate over each element in the array\n    for i in arr:\n        if i not in freq:\n            freq[i] = 0\n        freq[i] += 1\n    \n    # Calculate the sum of elements that appear only once\n    sum = 0\n    for key, value in freq.items():\n        if value == 1:\n            sum += key\n    \n    return sum\n\n# Test the function with the provided test case\nassert find_sum([1, 2, 3, 1, 1, 4, 5, 6]) == 21", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/722": [{"task_id": "Mbpp/722", "solution": "\"\"\"\nThe input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\nassert filter_data({'Cierra Vega': (6.2, 70), 'Alden Cantrell': (5.9, 65), 'Kierra Gentry': (6.0, 68), 'Pierre Cox': (5.8, 66)},6.0,70)=={'Cierra Vega': (6.2, 70)}\n\"\"\"\ndef filter_data(students, min_height, min_weight):\n    # Filter students based on height and weight criteria\n    return {k: v for k, v in students.items() if v[0] > min_height and v[1] > min_weight}\n\n# Test the function with the provided test case\nassert filter_data({'Cierra Vega': (6.2, 70), 'Alden Cantrell': (5.9, 65), 'Kierra Gentry': (6.0, 68), 'Pierre Cox': (5.8, 66)}, 6.0, 70) == {'Cierra Vega': (6.2, 70)}", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/771": [{"task_id": "Mbpp/771", "solution": "\"\"\"\nWrite a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nassert check_expression(\"{()}[{}]\") == True\n\"\"\"\ndef check_expression(expression):\n    # Initialize an empty stack to keep track of opening brackets\n    stack = []\n    \n    # Iterate through each character in the expression\n    for char in expression:\n        # If the character is an opening bracket, push it onto the stack\n        if char in \"({[\":\n            stack.append(char)\n        # If the character is a closing bracket\n        elif char in \")}]\":\n            # If the stack is empty, it means there's no matching opening bracket\n            if not stack:\n                return False\n            # Pop the last opening bracket from the stack\n            top_element = stack.pop()\n            # Check if the popped opening bracket matches the current closing bracket\n            if (char == \")\" and top_element != \"(\") or \\\n               (char == \"}\" and top_element != \"{\") or \\\n               (char == \"]\" and top_element != \"[\"):\n                return False\n    \n    # If the stack is empty, all brackets were matched; otherwise, they weren't\n    return len(stack) == 0\n\n# Test the function with the provided test case\nassert check_expression(\"{()}[{}]\") == True", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/638": [{"task_id": "Mbpp/638", "solution": "\"\"\"\nWrite a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nassert wind_chill(120,35)==40\n\"\"\"\ndef wind_chill(v, t):\n    # Calculate the wind chill using the formula\n    wci = 13.12 + 0.6215 * t -  11.37 * (v ** 0.16) + 0.3965 * t * (v ** 0.16)\n    \n    # Round the result to the nearest integer\n    return round(wci)\n\n# Test the function with the provided test case\nassert wind_chill(120, 35) == 40\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/723": [{"task_id": "Mbpp/723", "solution": "\"\"\"\nThe input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\nassert count_same_pair([1, 2, 3, 4, 5, 6, 7, 8],[2, 2, 3, 1, 2, 6, 7, 9])==4\n\"\"\"\ndef count_same_pair(list1, list2):\n    # Initialize a counter for matching pairs\n    match = 0\n    \n    # Iterate over each pair of elements from both lists\n    for i in range(len(list1)):\n        # Check if the current elements from both lists are equal\n        if list1[i] == list2[i]:\n            # Increment the counter if they match\n            match += 1\n            \n    # Return the total number of matching pairs\n    return match\n\n# Test the function with the provided test case\nassert count_same_pair([1, 2, 3, 4, 5, 6, 7, 8], [2, 2, 3, 1, 2, 6, 7, 9]) == 4", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/725": [{"task_id": "Mbpp/725", "solution": "\"\"\"\nWrite a function to extract values between quotation marks \" \" of the given string.\nassert extract_quotation('Cortex \"A53\" Based \"multi\" tasking \"Processor\"') == ['A53', 'multi', 'Processor']\n\"\"\"\ndef extract_quotation(s):\n    # Split the input string by spaces and filter out words enclosed in double quotes\n    return [word.strip('\"') for word in s.split() if '\"' in word]\n\n# Test the function with the provided test case\nassert extract_quotation('Cortex \"A53\" Based \"multi\" tasking \"Processor\"') == ['A53', 'multi', 'Processor']\n", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [["Watch content \"4k Ultra HD\" resolution with \"HDR 10\" Support"]], "plus_fail_tests": []}], "Mbpp/751": [{"task_id": "Mbpp/751", "solution": "\"\"\"\nWrite a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\nassert check_min_heap([1, 2, 3, 4, 5, 6]) == True\n\"\"\"\ndef check_min_heap(arr):\n    # Iterate over each node starting from the second element (index 1)\n    for i in range(1, len(arr)):\n        # Check if the current node is less than its parent\n        if arr[i] < arr[(i - 1) // 2]:\n            return False\n    return True\n\n# Test the function with the provided test case\nassert check_min_heap([1, 2, 3, 4, 5, 6]) == True\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/773": [{"task_id": "Mbpp/773", "solution": "\"\"\"\nWrite a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\nassert occurance_substring('python programming, python language','python')==('python', 0, 6)\n\"\"\"\ndef occurance_substring(string, substring):\n    # Check if the substring exists in the given string\n    if substring not in string:\n        return None\n    \n    # Find the starting index of the first occurrence of the substring\n    start_index = string.index(substring)\n    \n    # Calculate the ending index of the first occurrence of the substring\n    end_index = start_index + len(substring) - 1\n    \n    # Return the substring along with its starting and ending indices\n    return (substring, start_index, end_index)\n\n# Test the function with the provided test case\nassert occurance_substring('python programming, python language', 'python') == ('python', 0, 5)", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/754": [{"task_id": "Mbpp/754", "solution": "\"\"\"\nWe say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\nassert extract_index_list([1, 1, 3, 4, 5, 6, 7],[0, 1, 2, 3, 4, 5, 7],[0, 1, 2, 3, 4, 5, 7])==[1, 7]\n\"\"\"\ndef extract_index_list(l1, l2, l3):\n    # Use zip to iterate over the three lists simultaneously\n    # Filter to include only those elements where all three values are equal\n    result = [x for x, y, z in zip(l1, l2, l3) if x == y == z]\n    return result\n\n# Test the function with the provided test case\nassert extract_index_list([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]) == [1, 7]", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/739": [{"task_id": "Mbpp/739", "solution": "\"\"\"\nWrite a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\nassert find_Index(2) == 4\n\"\"\"\ndef find_Index(n):\n    # Calculate the lower bound for the smallest n-digit number\n    low = 10 ** (n - 1)\n    \n    # Calculate the upper bound for the largest n-digit number\n    high = 10 ** n\n    \n    # Initialize variables for binary search\n    start = 1\n    end = 10 ** 6\n    \n    # Perform binary search to find the smallest triangular number with n digits\n    while start <= end:\n        mid = (start + end) // 2\n        \n        # Calculate the triangular number at position mid\n        tri_num = mid * (mid + 1) // 2\n        \n        # Check if the calculated triangular number falls within the range\n        if tri_num >= low and tri_num <= high:\n            return mid\n        \n        # Adjust the search range based on the comparison\n        elif tri_num < low:\n            start = mid + 1\n        else:\n            end = mid - 1\n\n# Test the function with the provided test case\nassert find_Index(2) == 4", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/778": [{"task_id": "Mbpp/778", "solution": "\"\"\"\nWrite a function to pack consecutive duplicates of a given list elements into sublists.\nassert pack_consecutive_duplicates([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4])==[[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]\n\"\"\"\ndef pack_consecutive_duplicates(nums):\n    # Initialize an empty list to store the result\n    res = []\n    \n    # Iterate over the input list using enumerate to get both index and value\n    for i, num in enumerate(nums):\n        # Check if it's the first element or not equal to the previous one\n        if i == 0 or nums[i - 1] != num:\n            # If so, start a new sublist with the current number\n            res.append([num])\n        else:\n            # Otherwise, append the current number to the last sublist\n            res[-1].append(num)\n    \n    return res\n\n# Test the function with the provided test case\nassert pack_consecutive_duplicates([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]) == [[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/728": [{"task_id": "Mbpp/728", "solution": "\"\"\"\nWrite a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\nassert sum_list([10,20,30],[15,25,35])==[25,45,65]\n\"\"\"\ndef sum_list(list1, list2):\n    # Initialize an empty list to store the results\n    result = []\n    \n    # Iterate over the indices of the lists using enumerate\n    for i in range(len(list1)):\n        # Append the sum of corresponding elements from both lists to the result list\n        result.append(list1[i] + list2[i])\n    \n    # Return the resulting list containing sums of corresponding elements\n    return result\n\n# Test the function with the provided test case\nassert sum_list([10, 20, 30], [15, 25, 35]) == [25, 45, 65]\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/764": [{"task_id": "Mbpp/764", "solution": "\"\"\"\nWrite a python function to count number of digits in a given string.\nassert number_ctr('program2bedone') == 1\n\"\"\"\ndef number_ctr(str):\n    # Initialize a counter for digits\n    num = 0\n    \n    # Iterate through each character in the string\n    for i in range(len(str)):\n        # Check if the current character is a digit\n        if str[i] >= '0' and str[i] <= '9':\n            num += 1\n    \n    return num\n\n# Test the function with the provided test case\nassert number_ctr('program2bedone') == 1\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/759": [{"task_id": "Mbpp/759", "solution": "\"\"\"\nWrite a function to check whether a given string is a decimal number with a precision of 2.\nassert is_decimal('123.11')==True\n\"\"\"\ndef is_decimal(num):\n    # Check if the input string can be converted to a float\n    try:\n        num = float(num)\n    except ValueError:\n        return False\n    \n    # Convert the float back to an integer and compare it to the original number\n    if int(num) == num:\n        return False\n    \n    # Split the number into integer and fractional parts\n    num_parts = str(num).split('.')\n    \n    # Check if there are exactly two parts and the second part has at most two digits\n    if len(num_parts) != 2 or len(num_parts[1]) > 2:\n        return False\n    \n    return True\n\n# Test the function with the provided test case\nassert is_decimal('123.11') == True", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [["-123.11"]]}], "Mbpp/775": [{"task_id": "Mbpp/775", "solution": "\"\"\"\nWrite a python function to check whether every odd index contains odd numbers of a given list.\nassert odd_position([2,1,4,3,6,7,6,3]) == True\n\"\"\"\ndef odd_position(nums):\n    # Iterate through the list using enumerate to get both index and value\n    for i, x in enumerate(nums):\n        # Check if the index is odd and the number at that index is not odd\n        if i % 2 != 0 and x % 2 == 0:\n            return False\n    # If all checks pass, return True\n    return True\n\n# Test the function with the provided test case\nassert odd_position([2, 1, 4, 3, 6, 7, 6, 3]) == True", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/758": [{"task_id": "Mbpp/758", "solution": "\"\"\"\nWrite a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\nassert unique_sublists([[1, 3], [5, 7], [1, 3], [13, 15, 17], [5, 7], [9, 11]] )=={(1, 3): 2, (5, 7): 2, (13, 15, 17): 1, (9, 11): 1}\n\"\"\"\ndef unique_sublists(lst):\n    # Create an empty dictionary to store the frequency of each sublist\n    freq = {}\n    \n    # Iterate over each sublist in the input list\n    for sublist in lst:\n        # Convert the sublist to a tuple so it can be used as a dictionary key\n        t = tuple(sublist)\n        \n        # If the tuple is already in the dictionary, increment its count\n        if t in freq:\n            freq[t] += 1\n        # Otherwise, add the tuple to the dictionary with a count of 1\n        else:\n            freq[t] = 1\n    \n    # Return the dictionary containing the frequencies of all sublists\n    return freq\n\n# Test the function with the provided test case\nassert unique_sublists([[1, 3], [5, 7], [1, 3], [13, 15, 17], [5, 7], [9, 11]]) == {(1, 3): 2, (5, 7): 2, (13, 15, 17): 1, (9, 11): 1}\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/763": [{"task_id": "Mbpp/763", "solution": "\"\"\"\nWrite a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\nassert find_min_diff((1,5,3,19,18,25),6) == 1\n\"\"\"\ndef find_min_diff(arr, n):\n    # Sort the array to bring close elements together\n    arr.sort()\n    \n    # Initialize min_diff with a large number\n    min_diff = float('inf')\n    \n    # Iterate through the sorted array to find the minimum difference\n    for i in range(0, n-1):\n        diff = arr[i+1] - arr[i]\n        if diff < min_diff:\n            min_diff = diff\n    \n    return min_diff\n\n# Test the function with the provided test case\nassert find_min_diff((1, 5, 3, 19, 18, 25), 6) == 1", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/766": [{"task_id": "Mbpp/766", "solution": "\"\"\"\nWrite a function to return a list of all pairs of consecutive items in a given list.\nassert pair_wise([1,1,2,3,3,4,4,5])==[(1, 1), (1, 2), (2, 3), (3, 3), (3, 4), (4, 4), (4, 5)]\n\"\"\"\ndef pair_wise(lst):\n    # Use list comprehension to create pairs of consecutive elements\n    return [(lst[i], lst[i + 1]) for i in range(len(lst) - 1)]\n\n# Test the function with the provided test case\nassert pair_wise([1, 1, 2, 3, 3, 4, 4, 5]) == [(1, 1), (1, 2), (2, 3), (3, 3), (3, 4), (4, 4), (4, 5)]\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/760": [{"task_id": "Mbpp/760", "solution": "\"\"\"\nWrite a python function to check whether a list of numbers contains only one distinct element or not.\nassert unique_Element([1,1,1]) == True\n\"\"\"\ndef unique_Element(nums):\n    # Check if all elements in the list are the same\n    return len(set(nums)) == 1\n\n# Test the function with the provided test case\nassert unique_Element([1, 1, 1]) == True\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/769": [{"task_id": "Mbpp/769", "solution": "\"\"\"\nWrite a python function to get the difference between two lists.\nassert (Diff([10, 15, 20, 25, 30, 35, 40], [25, 40, 35])) == [10, 20, 30, 15]\n\"\"\"\ndef Diff(list1, list2):\n    # Use set operations to find elements in list1 but not in list2\n    return list(set(list1) - set(list2))\n\n# Test the function with the provided test case\nassert (Diff([10, 15, 20, 25, 30, 35, 40], [25, 40, 35])) == [10, 20, 30, 15]", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[1, 2, 3, 4, 5], [6, 7, 1]]], "plus_fail_tests": [[[], [1, 2, 3]]]}], "Mbpp/770": [{"task_id": "Mbpp/770", "solution": "\"\"\"\nWrite a python function to find the sum of fourth power of first n odd natural numbers.\nassert odd_num_sum(2) == 82\n\"\"\"\ndef odd_num_sum(n):\n    # Initialize the sum variable to store the result\n    sum = 0\n    \n    # Loop through the first n odd numbers\n    for i in range(1, 2 * n + 1, 2):\n        # Add the fourth power of the current odd number to the sum\n        sum += i ** 4\n    \n    # Return the computed sum\n    return sum\n\n# Test the function with the provided test case\nassert odd_num_sum(2) == 82\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/732": [{"task_id": "Mbpp/732", "solution": "\"\"\"\nWrite a function to replace all occurrences of spaces, commas, or dots with a colon.\nassert replace_specialchar('Python language, Programming language.')==('Python:language::Programming:language:')\n\"\"\"\ndef replace_specialchar(s):\n    # Replace spaces, commas, and dots with a colon using regular expression substitution\n    return re.sub(\"[ ,.]\", \":\", s)\n\n# Test the function with the provided test case\nassert replace_specialchar('Python language, Programming language.') == 'Python:language::Programming:language:'\n", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/772": [{"task_id": "Mbpp/772", "solution": "\"\"\"\nWrite a function to remove all the words with k length in the given string.\nassert remove_length('The person is most value tet', 3) == 'person is most value'\n\"\"\"\ndef remove_length(s, k):\n    # Split the input string into a list of words\n    s = s.split()\n    \n    # Filter out words whose length is equal to k\n    s = [i for i in s if len(i) != k]\n    \n    # Join the filtered list back into a single string\n    return \" \".join(s)\n\n# Test the function with the provided test case\nassert remove_length('The person is most value tet', 3) == 'person is most value'\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/767": [{"task_id": "Mbpp/767", "solution": "\"\"\"\nWrite a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\nassert get_pairs_count([1,1,1,1],2) == 6\n\"\"\"\ndef get_pairs_count(arr, target_sum):\n    # Initialize a counter for the number of pairs\n    count = 0\n    \n    # Iterate through each element in the array\n    for i in range(len(arr)):\n        # Compare the current element with all other elements\n        for j in range(i + 1, len(arr)):\n            # Check if the sum of the pair equals the target sum\n            if arr[i] + arr[j] == target_sum:\n                # Increment the counter if condition is met\n                count += 1\n                \n    # Return the total count of pairs\n    return count\n\n# Test the function with the provided test case\nassert get_pairs_count([1, 1, 1, 1], 2) == 6", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/746": [{"task_id": "Mbpp/746", "solution": "\"\"\"\nWrite a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\nassert sector_area(4,45)==6.283185307179586\n\"\"\"\ndef sector_area(r, theta):\n    # Check if the angle is greater than 360 degrees\n    if theta > 360:\n        return None\n    \n    # Calculate the area of the sector using the formula (theta/360) * pi * r^2\n    area = (theta / 360) * 3.141592653589793 * r ** 2\n    \n    # Return the calculated area\n    return area\n\n# Test the function with the provided test case\nassert sector_area(4, 45) == 6.283185307179586\n", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[44, 44]]}], "Mbpp/755": [{"task_id": "Mbpp/755", "solution": "\"\"\"\nWrite a function to find the second smallest number in a list.\nassert second_smallest([1, 2, -8, -2, 0, -2])==-2\n\"\"\"\ndef second_smallest(numbers):\n    # Initialize the first and second minimum values to positive infinity\n    x = y = float('inf')\n    \n    for i in numbers:\n        # Update the first minimum value if the current number is smaller\n        if i < x:\n            x, y = i, x\n        # Update the second minimum value if the current number is between x and y\n        elif x < i < y:\n            y = i\n    \n    return y\n\n# Test the function with the provided test case\nassert second_smallest([1, 2, -8, -2, 0, -2]) == -2", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[2, 2]]], "plus_fail_tests": [[[]]]}], "Mbpp/749": [{"task_id": "Mbpp/749", "solution": "\"\"\"\nWrite a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\nassert sort_numeric_strings( ['4','12','45','7','0','100','200','-12','-500'])==[-500, -12, 0, 4, 7, 12, 45, 100, 200]\n\"\"\"\ndef sort_numeric_strings(nums):\n    # Convert each string in the list to an integer\n    nums = [int(x) for x in nums]\n    \n    # Sort the list of integers\n    nums.sort()\n    \n    return nums\n\n# Test the function with the provided test case\nassert sort_numeric_strings(['4', '12', '45', '7', '0', '100', '200', '-12', '-500']) == [-500, -12, 0, 4, 7, 12, 45, 100, 200]\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/743": [{"task_id": "Mbpp/743", "solution": "\"\"\"\nWrite a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\nassert rotate_right([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],3)==[8, 9, 10, 1, 2, 3, 4, 5, 6, 7]\n\"\"\"\ndef rotate_right(arr, k):\n    # Calculate the effective rotation needed\n    n = len(arr)\n    k = k % n\n    \n    # Perform the rotation using slicing\n    return arr[-k:] + arr[:-k]\n\n# Test the function with the provided test case\nassert rotate_right([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3) == [8, 9, 10, 1, 2, 3, 4, 5, 6, 7]", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[[], 0]]}], "Mbpp/782": [{"task_id": "Mbpp/782", "solution": "\"\"\"\nWrite a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\nassert odd_length_sum([1,2,4]) == 14\n\"\"\"\ndef odd_length_sum(arr):\n    # Initialize the total sum to zero\n    total = 0\n    \n    # Iterate over each element in the array\n    for i in range(len(arr)):\n        # Calculate the number of subarrays where arr[i] is included\n        total += ((i + 1) * (len(arr) - i) + 1) // 2 * arr[i]\n    \n    return total\n\n# Test the function with the provided test case\nassert odd_length_sum([1, 2, 4]) == 14", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/724": [{"task_id": "Mbpp/724", "solution": "\"\"\"\nWrite a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\nassert power_base_sum(2,100)==115\n\"\"\"\ndef power_base_sum(base, power):\n    # Calculate the result of raising 'base' to the power of 'power'\n    res = pow(base, power)\n    \n    # Initialize a variable to store the sum of digits\n    sum = 0\n    \n    # Loop through each digit in the result\n    while res > 0:\n        # Add the last digit to the sum\n        sum += res % 10\n        \n        # Remove the last digit from the result\n        res //= 10\n    \n    return sum\n\n# Test the function with the provided test case\nassert power_base_sum(2, 100) == 115\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/780": [{"task_id": "Mbpp/780", "solution": "\"\"\"\nWrite a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\nassert find_combinations([(2, 4), (6, 7), (5, 1), (6, 10)]) == [(8, 11), (7, 5), (8, 14), (11, 8), (12, 17), (11, 11)]\n\"\"\"\nfrom itertools import product\n\ndef find_combinations(test_list):\n    # Generate all possible pairs using Cartesian product\n    res = [tuple(sum(pair) for pair in zip(*tup)) for tup in product(*test_list)]\n    return res\n\n# Test the function with the provided test case\nassert find_combinations([(2, 4), (6, 7), (5, 1), (6, 10)]) == [(8, 11), (7, 5), (8, 14), (11, 8), (12, 17), (11, 11)]", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/781": [{"task_id": "Mbpp/781", "solution": "\"\"\"\nWrite a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\nassert count_divisors(10)\n\"\"\"\ndef count_divisors(n):\n    # Initialize a counter for divisors\n    divisor_count = 0\n    \n    # Loop through possible divisors from 1 to n\n    for i in range(1, n + 1):\n        # Check if i is a divisor of n\n        if n % i == 0:\n            # Increment the divisor count\n            divisor_count += 1\n    \n    # Return True if the count of divisors is even, False otherwise\n    return divisor_count % 2 == 0\n\n# Test the function with the provided test case\nassert count_divisors(10) == False", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/806": [{"task_id": "Mbpp/806", "solution": "\"\"\"\nWrite a function to find maximum run of uppercase characters in the given string.\nassert max_run_uppercase('GeMKSForGERksISBESt') == 5\n\"\"\"\ndef max_run_uppercase(str1):\n    # Initialize variables to keep track of the current run length and the maximum run length\n    count = 0\n    result = 0\n    \n    # Iterate through each character in the string\n    for char in str1:\n        # Check if the character is uppercase\n        if char >= 'A' and char <= 'Z':\n            # Increment the current run length\n            count += 1\n            # Update the maximum run length if the current run is longer\n            result = max(result, count)\n        else:\n            # Reset the current run length if the character is not uppercase\n            count = 0\n            \n    return result\n\n# Test the function with the provided test case\nassert max_run_uppercase('GeMKSForGERksISBESt') == 5", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [["Aaa"]]}], "Mbpp/793": [{"task_id": "Mbpp/793", "solution": "\"\"\"\nWrite a python function to find the last position of an element in a sorted array.\nassert last([1,2,3],1) == 0\n\"\"\"\ndef last(arr, x):\n    # Initialize the result variable to -1\n    res = -1\n    \n    # Iterate through each index and value in the array\n    for i, val in enumerate(arr):\n        # Check if the current value matches the target value\n        if (val == x):\n            # Update the result to the current index\n            res = i\n    \n    # Return the last found index or -1 if not found\n    return res\n\n# Test the function with the provided test case\nassert last([1, 2, 3], 1) == 0", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/799": [{"task_id": "Mbpp/799", "solution": "\"\"\"\nWrite a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nassert left_rotate(16,2) == 64\n\"\"\"\ndef left_rotate(n, d):\n    # Perform left rotation on n by d bits\n    return (n << d) | (n >> (32 - d))\n\n# Test the function with the provided test case\nassert left_rotate(16, 2) == 64\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/787": [{"task_id": "Mbpp/787", "solution": "\"\"\"\nWrite a function that matches a string that has an a followed by three 'b'.\nassert not text_match_three(\"ac\")\n\"\"\"\nimport re\n\ndef text_match_three(text):\n    # Define the pattern to match 'a' followed by exactly three 'b's\n    patterns = 'ab{3}'\n    \n    # Search for the pattern in the given text\n    if re.search(patterns,  text):\n        return True\n    else:\n        return False\n\n# Test the function with the provided test case\nassert not text_match_three(\"ac\")\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/792": [{"task_id": "Mbpp/792", "solution": "\"\"\"\nWrite a python function to count the number of lists in a given number of lists.\nassert count_list([[1, 3], [5, 7], [9, 11], [13, 15, 17]]) == 4\n\"\"\"\ndef count_list(input_list):\n    # Initialize a counter for the number of lists\n    list_count = 0\n    \n    # Iterate through each element in the input list\n    for i in input_list:\n        # Check if the current element is a list\n        if isinstance(i, list):\n            # Increment the counter if it is a list\n            list_count += 1\n            \n    # Return the total count of lists found\n    return list_count\n\n# Test the function with the provided test case\nassert count_list([[1, 3], [5, 7], [9, 11], [13, 15, 17]]) == 4", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/790": [{"task_id": "Mbpp/790", "solution": "\"\"\"\nWrite a python function to check whether every even index contains even numbers of a given list.\nassert even_position([3,2,1]) == False\n\"\"\"\ndef even_position(nums):\n    # Iterate through the list using enumerate to get both index and value\n    for i, x in enumerate(nums):\n        # Check if the index is even and the number at that index is odd\n        if i % 2 == 0 and x % 2 != 0:\n            return False\n    # If no such case is found, return True\n    return True\n\n# Test the function with the provided test case\nassert even_position([3, 2, 1]) == False", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/798": [{"task_id": "Mbpp/798", "solution": "\"\"\"\nWrite a python function to find the sum of an array.\nassert _sum([1, 2, 3]) == 6\n\"\"\"\ndef _sum(arr):\n    # Initialize sum to zero\n    total = 0\n    \n    # Iterate through each element in the array\n    for i in arr:\n        total += i  # Add current element to total sum\n    \n    return total  # Return the computed sum\n\n# Test the function with the provided test case\nassert _sum([1, 2, 3]) == 6\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/788": [{"task_id": "Mbpp/788", "solution": "\"\"\"\nWrite a function to create a new tuple from the given string and list.\nassert new_tuple([\"WEB\", \"is\"], \"best\") == ('WEB', 'is', 'best')\n\"\"\"\ndef new_tuple(test_list, test_str):\n    # Convert the list into a tuple using tuple() constructor\n    res = tuple(test_list)\n    \n    # Append the string to the tuple using the + operator\n    res += (test_str,)\n    \n    return res\n\n# Test the function with the provided test case\nassert new_tuple([\"WEB\", \"is\"], \"best\") == ('WEB', 'is', 'best')\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/784": [{"task_id": "Mbpp/784", "solution": "\"\"\"\nWrite a function to find the product of first even and odd number of a given list.\nassert mul_even_odd([1,3,5,7,4,1,6,8])==4\n\"\"\"\ndef mul_even_odd(numbers):\n    # Initialize variables to store the first even and odd numbers found\n    first_even = None\n    first_odd = None\n    \n    # Iterate through each number in the list\n    for num in numbers:\n        if first_even is None and num % 2 == 0:\n            # If the first even number hasn't been found yet and the current number is even, set it\n            first_even = num\n        elif first_odd is None and num % 2 != 0:\n            # If the first odd number hasn't been found yet and the current number is odd, set it\n            first_odd = num\n        \n        # Break the loop once both even and odd numbers have been found\n        if first_even is not None and first_odd is not None:\n            break\n    \n    # Return the product of the first even and odd numbers\n    return first_even * first_odd\n\n# Test the function with the provided test case\nassert mul_even_odd([1, 3, 5, 7, 4, 1, 6, 8]) == 4", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/794": [{"task_id": "Mbpp/794", "solution": "\"\"\"\nWrite a function that matches a string that has an 'a' followed by anything, ending in 'b'.\nassert text_starta_endb(\"aabbbb\")\n\"\"\"\nimport re\n\ndef text_starta_endb(text):\n    # Define the pattern to match 'a' followed by any characters until 'b'\n    pattern = '^ab*$'\n    \n    # Search for the pattern in the given text\n    if re.search(pattern, text):\n        return True  # Return True if the pattern is found\n    else:\n        return False  # Return False if the pattern is not found\n\n# Test the function with the provided test case\nassert text_starta_endb(\"aabbbb\") == True", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/800": [{"task_id": "Mbpp/800", "solution": "\"\"\"\nWrite a function to remove all whitespaces from a string.\nassert remove_all_spaces('python  program')==('pythonprogram')\n\"\"\"\ndef remove_all_spaces(str1):\n    # Use the replace method to substitute all spaces (' ') with an empty string ('')\n    return str1.replace(\" \", \"\")\n\n# Test the function with the provided test case\nassert remove_all_spaces('python  program') == 'pythonprogram'\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/801": [{"task_id": "Mbpp/801", "solution": "\"\"\"\nWrite a python function to count the number of equal numbers from three given integers.\nassert test_three_equal(1,1,1) == 3\n\"\"\"\ndef test_three_equal(x, y, z):\n    # Check if all three numbers are equal\n    if x == y == z:\n        return 3\n    else:\n        return 0\n\n# Test the function with the provided test case\nassert test_three_equal(1, 1, 1) == 3", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[1, 2, 2]], "plus_fail_tests": [[10, 10, 20]]}], "Mbpp/803": [{"task_id": "Mbpp/803", "solution": "\"\"\"\nWrite a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\nassert not is_perfect_square(10)\n\"\"\"\ndef is_perfect_square(n):\n    # Check if the input number is less than 0\n    if n < 0:\n        return False\n    \n    # Initialize variables for binary search\n    start = 0\n    end = n\n    \n    # Perform binary search to find the square root of 'n'\n    while start <= end:\n        mid = (start + end) // 2\n        \n        # If the middle element squared equals 'n', it's a perfect square\n        if mid * mid == n:\n            return True\n        # If the middle element squared is greater than 'n', adjust the upper bound\n        elif mid * mid > n:\n            end = mid - 1\n        # If the middle element squared is less than 'n', adjust the lower bound\n        else:\n            start = mid + 1\n    \n    # If no perfect square is found, return False\n    return False\n\n# Test the function with the provided test case\nassert not is_perfect_square(10)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/796": [{"task_id": "Mbpp/796", "solution": "\"\"\"\nWrite function to find the sum of all items in the given dictionary.\nassert return_sum({'a': 100, 'b':200, 'c':300}) == 600\n\"\"\"\ndef return_sum(dict):\n    # Initialize sum to zero\n    sum = 0\n    \n    # Iterate through each item in the dictionary\n    for i in dict.values():\n        # Add the value of each item to the sum\n        sum += i\n    \n    # Return the total sum of all values\n    return sum\n\n# Test the function with the provided test case\nassert return_sum({'a': 100, 'b': 200, 'c': 300}) == 600\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/786": [{"task_id": "Mbpp/786", "solution": "\"\"\"\nWrite a function to locate the right insertion point for a specified value in sorted order.\nassert right_insertion([1,2,4,5],6)==4\n\"\"\"\ndef right_insertion(arr, x):\n    # Initialize the left pointer to 0\n    l = 0\n    \n    # Iterate through the array while the left pointer is less than the length of the array\n    while l < len(arr):\n        # If the current element is greater than or equal to x, return the current index\n        if arr[l] >= x:\n            return l\n        # Move the left pointer one step to the right\n        l += 1\n    \n    # If no suitable position is found, return the length of the array\n    return l\n\n# Test the function with the provided test case\nassert right_insertion([1, 2, 4, 5], 6) == 4", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[[50.64327388212607, -72.16612625583227, 95.25630303581863, -75.73998556144497, 11.857449640680656, 90.05081633927793, -90.20293226837086, -12.02758648076636, -35.964731488229475], 7]]}], "Mbpp/807": [{"task_id": "Mbpp/807", "solution": "\"\"\"\nWrite a python function to find the first odd number in a given list of numbers.\nassert first_odd([1,3,5]) == 1\n\"\"\"\ndef first_odd(nums):\n    # Use a generator expression to iterate through the list\n    return next((num for num in nums if num % 2 != 0), None)\n\n# Test the function with the provided test case\nassert first_odd([1, 3, 5]) == 1\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/808": [{"task_id": "Mbpp/808", "solution": "\"\"\"\nWrite a function to check if the given tuples contain the k or not.\nassert check_K((10, 4, 5, 6, 8), 6) == True\n\"\"\"\ndef check_K(test_tup, K):\n    # Check if 'K' is present in the tuple 'test_tup'\n    res = K in test_tup\n    return res\n\n# Test the function with the provided test case\nassert check_K((10, 4, 5, 6, 8), 6) == True\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/783": [{"task_id": "Mbpp/783", "solution": "\"\"\"\nWrite a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\nassert rgb_to_hsv(255, 255, 255)==(0, 0.0, 100.0)\n\"\"\"\ndef rgb_to_hsv(r, g, b):\n    # Normalize RGB values to the range [0, 1]\n    r /= 255.0\n    g /= 255.0\n    b /= 255.0\n    \n    # Find the maximum and minimum of R, G, B\n    max_val = max(r, g, b)\n    min_val = min(r, g, b)\n    \n    # Calculate the difference between max and min\n    diff = max_val - min_val\n    \n    # Initialize hue (H), saturation (S), and value (V)\n    h, s, v = 0, 0, 0\n    \n    # Calculate Value (V)\n    v = max_val * 100\n    \n    if diff == 0:\n        # If there's no difference, it's grayscale\n        h = 0\n        s = 0\n    else:\n        # Calculate Saturation (S)\n        s = (diff / max_val) * 100\n        \n        # Calculate Hue (H)\n        if max_val == r:\n            h = ((g - b) / diff) % 6\n        elif max_val == g:\n            h = (b - r) / diff + 2\n        else:  # max_val == b\n            h = (r - g) / diff + 4\n        \n        # Convert H from [0, 6] to degrees [0, 360]\n        h *= 60\n    \n    return round(h, 2), round(s, 2), round(v, 2)\n\n# Test the function with the provided test case\nassert rgb_to_hsv(255, 255, 255) == (0, 0.0, 100.0)", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[0, 215, 0]], "plus_fail_tests": [[0, 0, 1]]}], "Mbpp/791": [{"task_id": "Mbpp/791", "solution": "\"\"\"\nWrite a function to remove tuples from the given tuple.\nassert remove_nested((1, 5, 7, (4, 6), 10)) == (1, 5, 7, 10)\n\"\"\"\ndef remove_nested(test_tup):\n    # Using list comprehension to filter out nested tuples\n    res = tuple(ele for ele in test_tup if not isinstance(ele, tuple))\n    return res\n\n# Test the function with the provided test case\nassert remove_nested((1, 5, 7, (4, 6), 10)) == (1, 5, 7, 10)\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/809": [{"task_id": "Mbpp/809", "solution": "\"\"\"\nWrite a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\nassert check_smaller((1, 2, 3), (2, 3, 4)) == False\n\"\"\"\ndef check_smaller(test_tup1, test_tup2):\n    # Check if all elements in test_tup2 are less than their corresponding elements in test_tup1\n    res = all(x > y for x, y in zip(test_tup1, test_tup2))\n    return res\n\n# Test the function with the provided test case\nassert check_smaller((1, 2, 3), (2, 3, 4)) == False\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/804": [{"task_id": "Mbpp/804", "solution": "\"\"\"\nWrite a function to check whether the product of numbers in a list is even or not.\nassert is_product_even([1,2,3])\n\"\"\"\ndef is_product_even(numbers):\n    # Initialize the product variable to 1 (since multiplying by 1 has no effect)\n    product = 1\n    \n    # Iterate through each number in the list\n    for num in numbers:\n        # Multiply the current product by the number\n        product *= num\n    \n    # Check if the final product is even\n    return product % 2 == 0\n\n# Test the function with the provided test case\nassert is_product_even([1, 2, 3]) == False", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/797": [{"task_id": "Mbpp/797", "solution": "\"\"\"\nWrite a python function to find the sum of all odd natural numbers within the range l and r.\nassert sum_in_range(2,5) == 8\n\"\"\"\ndef sum_in_range(l, r):\n    # Calculate the number of odd numbers between l and r (inclusive)\n    n = ((r - l) // 2) + 1\n    \n    # If l is even, adjust it to the next odd number\n    if l % 2 == 0:\n        l += 1\n    \n    # Calculate the sum of the first n odd numbers starting from l\n    return int(n * (l + l + 2 * (n - 1)) / 2)\n\n# Test the function with the provided test case\nassert sum_in_range(2, 5) == 8", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[100, 100000]]}], "Mbpp/785": [{"task_id": "Mbpp/785", "solution": "\"\"\"\nWrite a function to convert tuple string to integer tuple.\nassert tuple_str_int(\"(7, 8, 9)\") == (7, 8, 9)\n\"\"\"\ndef tuple_str_int(test_str):\n    # Convert the string representation of a tuple into an actual tuple of integers\n    res = tuple(int(num) for num in test_str.strip('()').split(', '))\n    return res\n\n# Test the function with the provided test case\nassert tuple_str_int(\"(7, 8, 9)\") == (7, 8, 9)\n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/805": [{"task_id": "Mbpp/805", "solution": "\"\"\"\nWrite a function that returns the list in a list of lists whose sum of elements is the highest.\nassert max_sum_list([[1,2,3], [4,5,6], [10,11,12], [7,8,9]])==[10, 11, 12]\n\"\"\"\ndef max_sum_list(lists):\n    # Initialize variables to store the maximum sum and the list with this sum\n    max_sum = float('-inf')\n    max_list = []\n    \n    # Iterate through each list in the list of lists\n    for sublist in lists:\n        # Calculate the sum of the current sublist\n        current_sum = sum(sublist)\n        \n        # Check if the current sum is greater than the maximum sum found so far\n        if current_sum > max_sum:\n            max_sum = current_sum\n            max_list = sublist\n    \n    # Return the sublist with the highest sum\n    return max_list\n\n# Test the function with the provided test case\nassert max_sum_list([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]) == [10, 11, 12]", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/745": [{"task_id": "Mbpp/745", "solution": "\"\"\"\nWrite a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nassert divisible_by_digits(1,22)==[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]\n\"\"\"\ndef divisible_by_digits(startnum, endnum):\n    # Define a lambda function to check if a number is divisible by each of its digits\n    result = list(filter(lambda x: (x == 0 or all(int(digit) != 0 and x % int(digit) == 0 for digit in str(x))), range(startnum, endnum + 1)))\n    return result\n\n# Test the function with the provided test case\nassert divisible_by_digits(1, 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[false, true]]}], "Mbpp/752": [{"task_id": "Mbpp/752", "solution": "\"\"\"\nWrite a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\nassert jacobsthal_num(5) == 11\n\"\"\"\ndef jacobsthal_num(n):\n    # Base case: if n is 0, return 0\n    if n == 0:\n        return 0\n    # Base case: if n is 1, return 1\n    elif n == 1:\n        return 1\n    else:\n        # Recursive relation for Jacobsthal numbers\n        return (jacobsthal_num(n - 1) + 2 * jacobsthal_num(n - 2))\n\n# Test the function with the provided test case\nassert jacobsthal_num(5) == 11\n", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/765": [{"task_id": "Mbpp/765", "solution": "\"\"\"\nWrite a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\nassert is_polite(7) == 11\n\"\"\"\ndef is_polite(n):\n    # Initialize count of polite numbers found\n    count = 0\n    \n    # Start checking from 2 (the first polite number)\n    i = 2\n    \n    # Loop until we find the nth polite number\n    while True:\n        # Check if the current number is not a power of two\n        if ((i & (i - 1)) != 0):\n            # Increment the count of polite numbers found\n            count += 1\n            \n            # If we have found the nth polite number, return it\n            if count == n:\n                return i\n        \n        # Move to the next number\n        i += 1\n\n# Test the function with the provided test case\nassert is_polite(7) == 11", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/630": [{"task_id": "Mbpp/630", "solution": "\"\"\"\nWrite a function to extract all the adjacent coordinates of the given coordinate tuple.\nassert get_coordinates((3, 4)) == [[2, 3], [2, 4], [2, 5], [3, 3], [3, 4], [3, 5], [4, 3], [4, 4], [4, 5]]\n\"\"\"\ndef get_coordinates(test_tup):\n    # Extract x and y coordinates from the input tuple\n    x, y = test_tup\n    \n    # Generate all possible adjacent coordinates using list comprehension\n    res = [[x + i, y + j] for i in range(-1, 2) for j in range(-1, 2)]\n    \n    return res\n\n# Test the function with the provided test case\nassert get_coordinates((3, 4)) == [[2, 3], [2, 4], [2, 5], [3, 3], [3, 4], [3, 5], [4, 3], [4, 4], [4, 5]]\n", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/736": [{"task_id": "Mbpp/736", "solution": "\"\"\"\nWrite a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\nassert left_insertion([1,2,4,5],6)==4\n\"\"\"\ndef left_insertion(arr, x):\n    # Initialize the low index to 0\n    low = 0\n    \n    # Iterate through the array while low is less than or equal to high\n    while low <= len(arr) - 1:\n        mid = (low + len(arr)) // 2\n        \n        # If the middle element is greater than x, move the high index to mid - 1\n        if arr[mid] > x:\n            high = mid - 1\n        else:\n            # Otherwise, move the low index to mid + 1\n            low = mid + 1\n    \n    # Return the final low index as the left insertion point\n    return low\n\n# Test the function with the provided test case\nassert left_insertion([1, 2, 4, 5], 6) == 4", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[1, 2, 4, 5], 3]], "plus_fail_tests": [[[0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30], 15]]}], "Mbpp/255": [{"task_id": "Mbpp/255", "solution": "\"\"\"\nWrite a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\nassert combinations_colors( [\"Red\",\"Green\",\"Blue\"],1)==[('Red',), ('Green',), ('Blue',)]\n\"\"\"\ndef combinations_colors(colors, n):\n    # Base case: if n is 0, return a list containing an empty tuple\n    if n == 0:\n        return [()]\n    \n    # Initialize an empty list to store the result\n    res = []\n    \n    # Iterate over each color in the input list\n    for i in range(len(colors)):\n        # Recursively call combinations_colors with reduced length n-1\n        for c in combinations_colors(colors[i:], n - 1):\n            # Append the current color and the recursive result as a tuple to the result list\n            res.append((colors[i],) + c)\n    \n    # Return the final list of tuples representing combinations\n    return res\n\n# Test the function with the provided test case\nassert combinations_colors([\"Red\", \"Green\", \"Blue\"], 1) == [('Red',), ('Green',), ('Blue',)]", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[["Dog", "Cat", "CatBird", "Bird", "Fish"], 77]]}], "Mbpp/260": [{"task_id": "Mbpp/260", "solution": "\"\"\"\nWrite a function to find the nth newman\u2013shanks\u2013williams prime number.\nassert newman_prime(3) == 7\n\"\"\"\ndef newman_prime(n):\n    # Initialize variables for the Newman-Shanks-Williams sequence\n    a = 0\n    b = 1\n    \n    # Loop until we find the nth Newman-Shanks-Williams prime\n    while n > 0:\n        # Calculate the next term in the sequence\n        c = (a + b * b) % (2 * b - 1)\n        \n        # Check if the current term is prime\n        if c != 0:\n            a, b = b, c\n            n -= 1\n    \n    return b\n\n# Test the function with the provided test case\nassert newman_prime(3) == 7", "base_status": "timeout", "plus_status": "timeout", "base_fail_tests": [], "plus_fail_tests": []}]}}